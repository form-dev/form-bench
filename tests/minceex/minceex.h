*
#ifndef `MINCEEXH'
#define MINCEEXH "1"
*--#[ Comments :
*
*	Version of Mincer in which we express everything in terms of ep and
*	the two master integrals G311 (two loop) and F321 (three loop NO).
*	Additionally we have the G-scheme on loop constants
*	GschemeConstants(0,1),GschemeConstants(0,2),GschemeConstants(1,1)
*	with the relation
*	GschemeConstants(0,1)*GschemeConstants(0,2)
*			= GschemeConstants(0,0)*GschemeConstants(1,1)*(2*D-6)/(3*D-10)
*			= GschemeConstants(0,0)*GschemeConstants(1,1)*(1-2*ep)/(1-3*ep)
*
*--#] Comments : 
*--#[ Declarations :
*
Symbol D,[D-4];
Dimension D;
Symbols ep,epp,epp1,epp2,epp3,epp4,epp5,epp6,epp7,epp8,epQ;
Symbols n,n0,n1,n2,n3,n4,n5,n6,n7,n8;
Symbols x,x1,x2,x3,x4,x5,x6,x7,x8,k1,k2,k3,k9,y,isum1,isum2,isum3;
Symbols intl1,intt1,intt2,intt3,inty1,inty2,inty3,inty4,inty5;
Symbols into1,into2,into3,into4,intbu,intfa,intla,intbe,intno,int0;
Symbols BasicNOIntegral,BasicT1Integral;
Symbols z2,z3,z4,z5,z6,z7,z8,z9,zz5,z6z2;
Symbols cf,ca,nf,[dabc^2/n],cOlNA,cOlNR,xi;
Symbols quark1,quark2,quark3,ghost1,ghost2,ghost3,gluon1,gluon2,gluon3;
Symbols xdivergence,xpower,x11div,j,k,s,proexp;
Indices i1,i2,i3,i4,MU,NU;
Vectors P,Q,p,p1,p2,p3,p4,p5,p6,p7,p8,p9,q1,q2;
Vectors [P+p1],[P+p2],[P+p3],[P+p4],[P+p5],[P+p6],[P+p7],[P+p8],[P+Q];
Vectors [P-p1],[P-p2],[P-p3],[P-p4],[P-p5],[P-p6],[P-p7],[P-p8],[P-Q];
CFunctions G,NO,NOaid,T1;
CFunctions rat,acc,den,dena,num;
CFunctions Pochhammer,PochhammerINV,GschemeConstants;
CFunctions del,ftriangle,hfac;
CFunctions GC0,GC1,GC2,BT1,BNO;
CTensor ftensor,dd;
Set pp:p1,p2,p3,p4,p5,p6,p7,p8,Q;
Set epppp:epp1,epp2,epp3,epp4,epp5,epp6,epp7,epp8,epQ;
set pp18:p1,p2,p3,p4,p5,p6,p7,p8;
set pQ18:p1,p2,p3,p4,p5,p6,p7,p8,Q;
set [pp18]:[P+p1],[P+p2],[P+p3],[P+p4],[P+p5],[P+p6],[P+p7],[P+p8];
set [-pp18]:[P-p1],[P-p2],[P-p3],[P-p4],[P-p5],[P-p6],[P-p7],[P-p8];
set [Pp]:[P+p1],[P+p2],[P+p3],[P+p4],[P+p5],[P+p6],[P+p7],[P+p8],[P+Q],
	[P-p1],[P-p2],[P-p3],[P-p4],[P-p5],[P-p6],[P-p7],[P-p8],[P-Q];
set [x18]:x1,x2,x3,x4,x5,x6,x7,x8;
set Pcenter:[P+p7],[P+p2],[P+p8],[P-p7],[P-p2],[P-p8];
set pcenter:p7,p2,p8;
Function fp,vqg;
CFunction vgh,Dg,Dgh,v3g,epexp;
CFunction Dg,v2gp,v2gi,v2gc,v3g,v3gp,Ds,DL,v4g,V4G,v3gc,v3gi,v4g,v4gi,v4gp,v4gc;
PolyRatFun rat;
*
*--#] Declarations : 
*--#[ T1Table :
*
*	Tabulates the T1 integral with one power for the 4 peripheral propagators
*	and n5+ep for the central propagator.
*	In the case of the old mincer this table was very relevant.
*	Also here it saves by quite a factor because it needs far fewer GCD's.
*	Values outside the table are done by recursion in procedure integt1.
*
*#define MAXT1TABLE "20"
*#define MINT1TABLE "-18"
#define MAXT1TABLE "1"
#define MINT1TABLE "1"
Table T1Table(`MINT1TABLE':`MAXT1TABLE');
Fill T1Table(1) = BasicT1Integral*rat(ep^2,1);
#if `MAXT1TABLE' > 1
Fill T1Table(2) = 
      +BasicT1Integral*(
         +rat(-3*ep^3,2*ep+1)
         )
      +GschemeConstants(1,0)*GschemeConstants(2,0)*(
         +rat(60*ep^3-23*ep^2-2*ep+1,12*ep^3+24*ep^2+15*ep+3)
         );
#endif
#if `MAXT1TABLE' > 2
Fill T1Table(3) = 
      +BasicT1Integral*(
         +rat(9*ep^4+3*ep^3,4*ep^2+6*ep+2)
         )
      +GschemeConstants(1,0)*GschemeConstants(2,0)*(
         +rat(540*ep^6-159*ep^5-490*ep^4+44*ep^3+72*ep^2-5*ep-2,24*ep^6+144*
         ep^5+342*ep^4+414*ep^3+270*ep^2+90*ep+12)
         );
#endif
#if `MAXT1TABLE' > 3
Fill T1Table(4) = 
      +BasicT1Integral*(
         +rat(-27*ep^5-27*ep^4-6*ep^3,8*ep^3+24*ep^2+22*ep+6)
         )
      +GschemeConstants(1,0)*GschemeConstants(2,0)*(
         +rat(14040*ep^9+27414*ep^8+15129*ep^7+13501*ep^6+17236*ep^5+3438*ep^4-
         3625*ep^3-949*ep^2+180*ep+36,96*ep^9+1152*ep^8+5904*ep^7+16992*ep^6+
         30294*ep^5+34704*ep^4+25536*ep^3+11628*ep^2+2970*ep+324)
         );
#endif
#if `MAXT1TABLE' > 4
Fill T1Table(5) = 
      +BasicT1Integral*(
         +rat(81*ep^5+81*ep^4+18*ep^3,16*ep^3+64*ep^2+76*ep+24)
         )
      +GschemeConstants(1,0)*GschemeConstants(2,0)*(
         +rat(55080*ep^11+203994*ep^10+238659*ep^9+58797*ep^8-146530*ep^7-
         264378*ep^6-180023*ep^5-5969*ep^4+35670*ep^3+6644*ep^2-1656*ep-288,64*
         ep^11+1216*ep^10+10144*ep^9+49056*ep^8+152772*ep^7+321468*ep^6+465812*
         ep^5+463988*ep^4+310664*ep^3+132816*ep^2+32544*ep+3456)
         );
#endif
#if `MAXT1TABLE' > 5
Fill T1Table(6) = 
      +BasicT1Integral*(
         +rat(-243*ep^6-567*ep^5-378*ep^4-72*ep^3,32*ep^4+208*ep^3+472*ep^2+428
         *ep+120)
         )
      +GschemeConstants(1,0)*GschemeConstants(2,0)*(
         +rat(1328400*ep^14+10316700*ep^13+33102900*ep^12+58417725*ep^11+
         65442270*ep^10+55554575*ep^9+50145630*ep^8+54614135*ep^7+45350890*ep^6
         +15690125*ep^5-4454690*ep^4-4300140*ep^3-417800*ep^2+204480*ep+28800,
         256*ep^14+7424*ep^13+97216*ep^12+761984*ep^11+3993328*ep^10+14796752*
         ep^9+39950468*ep^8+79768432*ep^7+118212176*ep^6+129182824*ep^5+
         102274316*ep^4+56750584*ep^3+20808240*ep^2+4500000*ep+432000)
         );
#endif
#if `MAXT1TABLE' > 6
Fill T1Table(7) = 
      +BasicT1Integral*(
         +rat(729*ep^7+2916*ep^6+3969*ep^5+2106*ep^4+360*ep^3,64*ep^5+608*ep^4+
         2192*ep^3+3688*ep^2+2808*ep+720)
         )
      +GschemeConstants(1,0)*GschemeConstants(2,0)*(
         +rat(15921360*ep^17+204237612*ep^16+1147332276*ep^15+3726907605*ep^14+
         7739416530*ep^13+10530574644*ep^12+8659909562*ep^11+1806566610*ep^10-
         6315354670*ep^9-11275942424*ep^8-10776937582*ep^7-5859367415*ep^6-
         874901700*ep^5+852510328*ep^4+426156624*ep^3+16817040*ep^2-21254400*ep
         -2592000,512*ep^17+20992*ep^16+395648*ep^15+4552960*ep^14+35825504*
         ep^13+204511264*ep^12+876716776*ep^11+2881335200*ep^10+7344458056*ep^9
         +14589267296*ep^8+22559022904*ep^7+26961453920*ep^6+24560063928*ep^5+
         16661576448*ep^4+8110668672*ep^3+2662657920*ep^2+524880000*ep+46656000
         ));
#endif
#if `MAXT1TABLE' > 7
Fill T1Table(8) = 
      +BasicT1Integral*(
         +rat(-2187*ep^7-8748*ep^6-11907*ep^5-6318*ep^4-1080*ep^3,128*ep^5+1408
         *ep^4+5824*ep^3+11072*ep^2+9288*ep+2520)
         )
      +GschemeConstants(1,0)*GschemeConstants(2,0)*(
         +rat(382229280*ep^19+6498564552*ep^18+49438175364*ep^17+223310535282*
         ep^16+669454820685*ep^15+1409090759115*ep^14+2153216716866*ep^13+
         2472110266098*ep^12+2307953966712*ep^11+2100579649644*ep^10+
         2187002208006*ep^9+2283936167748*ep^8+1840093243371*ep^7+873576222369*
         ep^6+70024376964*ep^5-150640831128*ep^4-63146742048*ep^3-1083829680*
         ep^2+3287692800*ep+381024000,2048*ep^19+108544*ep^18+2666496*ep^17+
         40353792*ep^16+421694208*ep^15+3232067328*ep^14+18834276992*ep^13+
         85346333824*ep^12+304982909448*ep^11+866321879592*ep^10+1962281498328*
         ep^9+3540107702376*ep^8+5058945564488*ep^7+5667419823256*ep^6+
         4895645666184*ep^5+3179744902008*ep^4+1493753105808*ep^3+476384237280*
         ep^2+91731528000*ep+8001504000)
         );
#endif
#if `MAXT1TABLE' > 8
Fill T1Table(9) = 
      +BasicT1Integral*(
         +rat(6561*ep^8+41553*ep^7+96957*ep^6+102303*ep^5+47466*ep^4+7560*ep^3,
         256*ep^6+3840*ep^5+22912*ep^4+68736*ep^3+107152*ep^2+79344*ep+20160)
         )
      +GschemeConstants(1,0)*GschemeConstants(2,0)*(
         +rat(4586401440*ep^22+111217738824*ep^21+1234281506652*ep^20+
         8326711799262*ep^19+38228394601251*ep^18+126577688824584*ep^17+
         312024390476349*ep^16+581066959164408*ep^15+815051082228330*ep^14+
         829863710881068*ep^13+519040872963018*ep^12-35198946826590*ep^11-
         602310582799173*ep^10-941297790757644*ep^9-920872911664371*ep^8-
         597090289607832*ep^7-207430319928168*ep^6+14181085408368*ep^5+
         45473870318352*ep^4+14266858162752*ep^3-360492007680*ep^2-805027507200
         *ep-85349376000,4096*ep^22+282624*ep^21+9134080*ep^20+183926784*ep^19+
         2589136384*ep^18+27097579008*ep^17+218896352512*ep^16+1398474021120*
         ep^15+7181942055952*ep^14+29969085183312*ep^13+102292790114224*ep^12+
         286560348904656*ep^11+659144778513040*ep^10+1241982393662256*ep^9+
         1906847587802896*ep^8+2364897387351792*ep^7+2338902124418848*ep^6+
         1810797342724800*ep^5+1068442950492288*ep^4+461573684955648*ep^3+
         136887457351680*ep^2+24763511808000*ep+2048385024000)
         );
#endif
#if `MAXT1TABLE' > 9
Fill T1Table(10) = 
      +BasicT1Integral*(
         +rat(-19683*ep^9-177147*ep^8-623295*ep^7-1082565*ep^6-960822*ep^5-
         402408*ep^4-60480*ep^3,512*ep^7+9984*ep^6+80384*ep^5+343680*ep^4+
         832928*ep^3+1123056*ep^2+754416*ep+181440)
         )
      +GschemeConstants(1,0)*GschemeConstants(2,0)*(
         +rat(110075734080*ep^25+3586652601264*ep^24+54289670183856*ep^23+
         507575689335000*ep^22+3286712803931100*ep^21+15661271623415715*ep^20+
         56938181003698905*ep^19+161566853691892515*ep^18+363019509241341165*
         ep^17+651900268713885630*ep^16+942940318101851850*ep^15+
         1113765616780292790*ep^14+1115864378401482030*ep^13+
         1040451898884470055*ep^12+1027095114327357285*ep^11+
         1091167968299812815*ep^10+1083290725370030745*ep^9+858241105488697320*
         ep^8+466210824593781480*ep^7+120913071831265440*ep^6-31238815672548720
         *ep^5-35792071102257984*ep^4-8967385687493376*ep^3+613561745341440*
         ep^2+560833188249600*ep+55306395648000,16384*ep^25+1425408*ep^24+
         58544128*ep^23+1510809600*ep^22+27504609280*ep^21+375957227520*ep^20+
         4009293959680*ep^19+34216433387520*ep^18+237825055608640*ep^17+
         1362933588296640*ep^16+6495119387712400*ep^15+25884437541873120*ep^14+
         86544967330082560*ep^13+243054738927242880*ep^12+572906252344169440*
         ep^11+1130272028840435520*ep^10+1857306658426961920*ep^9+
         2523519475714843200*ep^8+2805916736247244560*ep^7+2517206759680151520*
         ep^6+1786571512941969216*ep^5+975787204292468352*ep^4+
         393717802950369792*ep^3+109967662413342720*ep^2+18882196042752000*ep+
         1493272682496000)
         );
#endif
#if `MAXT1TABLE' > 10
Fill T1Table(11) = 
      +BasicT1Integral*(
         +rat(59049*ep^9+531441*ep^8+1869885*ep^7+3247695*ep^6+2882466*ep^5+
         1207224*ep^4+181440*ep^3,1024*ep^7+22016*ep^6+194560*ep^5+907520*ep^4+
         2380096*ep^3+3435104*ep^2+2434080*ep+604800)
         )
      +GschemeConstants(1,0)*GschemeConstants(2,0)*(
         +rat(1320902510400*ep^27+51515132295600*ep^26+939313609660800*ep^25+
         10653088934442600*ep^24+84325047405409620*ep^23+495398035357080795*
         ep^22+2241925442902543590*ep^21+8003969608955981040*ep^20+
         22891026376325054700*ep^19+52923112522633369755*ep^18+
         99254368754078061150*ep^17+150485231910940383240*ep^16+
         181545828991372276380*ep^15+165899336731102992465*ep^14+
         94536608818273825410*ep^13-14698023247626977160*ep^12-
         124983230159268043740*ep^11-197187246899975190375*ep^10-
         206161427201391774630*ep^9-154726587602660833560*ep^8-
         77003451483352608960*ep^7-16873330843874172240*ep^6+
         6360186725327443680*ep^5+5792869458047283840*ep^4+1319577660804441600*
         ep^3-117204158566656000*ep^2-86613766041600000*ep-8295959347200000,
         32768*ep^27+3407872*ep^26+167976960*ep^25+5223997440*ep^24+
         115118346240*ep^23+1913718251520*ep^22+24947279385600*ep^21+
         261704398525440*ep^20+2249496354821760*ep^19+16049135663193600*ep^18+
         95924655913629600*ep^17+483445607729833440*ep^16+2063377254222009600*
         ep^15+7476445487716239360*ep^14+23017126202086536000*ep^13+
         60161583942040040640*ep^12+133194675194015022720*ep^11+
         248776413088656695040*ep^10+389686052262076372000*ep^9+
         507746124325212729440*ep^8+544261962356684550912*ep^7+
         472888605899870212608*ep^6+326399364153556899840*ep^5+
         174003112526272473600*ep^4+68750186193628416000*ep^3+
         18858532884710400000*ep^2+3188512470528000000*ep+248878780416000000)
         );
#endif
#if `MAXT1TABLE' > 11
Fill T1Table(12) = 
      +BasicT1Integral*(
         +rat(-177147*ep^10-2184813*ep^9-10924065*ep^8-28441935*ep^7-41124348*
         ep^6-32446332*ep^5-12616560*ep^4-1814400*ep^3,2048*ep^8+55296*ep^7+
         631296*ep^6+3955200*ep^5+14742912*ep^4+33051264*ep^3+42654304*ep^2+
         27984480*ep+6652800)
         )
      +GschemeConstants(1,0)*GschemeConstants(2,0)*(
         +rat(31701698040960*ep^30+1569234517231392*ep^29+36634209303311856*
         ep^28+536840852806840608*ep^27+5544269497218663504*ep^26+
         42946008390868466250*ep^25+259229852618993304795*ep^24+
         1250500014128806840215*ep^23+4904677377863623403820*ep^22+
         15828235912586831409630*ep^21+42368068495810118308995*ep^20+
         94547035810175183788815*ep^19+176419949830764423220620*ep^18+
         275788846798092153013410*ep^17+362432195468687431809585*ep^16+
         405062462356192066485285*ep^15+398828920554762780839580*ep^14+
         375065946776874863591010*ep^13+373899230843896752817185*ep^12+
         400393030816649052842085*ep^11+411943894199801695443420*ep^10+
         358267502981122249448628*ep^9+236857174592019547562784*ep^8+
         102329088831129562090992*ep^7+15125707088955344748096*ep^6-
         11813602387702794880320*ep^5-7886078952866192275200*ep^4-
         1501541996454384768000*ep^3+203036649070348800000*ep^2+
         110551756737945600000*ep+10038110810112000000,131072*ep^30+16515072*
         ep^29+991625216*ep^28+37783339008*ep^27+1026347098112*ep^26+
         21169383260160*ep^25+344796063744000*ep^24+4553200241049600*ep^23+
         49668235510586880*ep^22+453688211847214080*ep^21+3505296411120080640*
         ep^20+23078958875818629120*ep^19+130192538892569970720*ep^18+
         631643290019992031040*ep^17+2641805050420099324320*ep^16+
         9535758086989594920960*ep^15+29703508384088252535360*ep^14+
         79749790329339352782720*ep^13+184108915280084477488960*ep^12+
         364115199698234867393280*ep^11+613740174229603724552608*ep^10+
         875645147888565073773888*ep^9+1048008373478455102495264*ep^8+
         1039929434961786712972032*ep^7+842473624412715668725248*ep^6+
         545834887283357222423040*ep^5+274864310363350481241600*ep^4+
         103197494831497341696000*ep^3+27051658646895590400000*ep^2+
         4394481760424448000000*ep+331257656733696000000)
         );
#endif
#if `MAXT1TABLE' > 12
Fill T1Table(13) = 
      +BasicT1Integral*(
         +rat(531441*ep^11+8503056*ep^10+56805138*ep^9+205490520*ep^8+436234329
         *ep^7+549706824*ep^6+394759332*ep^5+144225360*ep^4+19958400*ep^3,4096*
         ep^9+135168*ep^8+1926144*ep^7+15485952*ep^6+76948224*ep^5+243017472*
         ep^4+481923776*ep^3+567820608*ep^2+349119360*ep+79833600)
         )
      +GschemeConstants(1,0)*GschemeConstants(2,0)*(
         +rat(380420263117440*ep^33+23237336117507616*ep^32+673938122950535184*
         ep^31+12355879735633004784*ep^30+160843413291360957648*ep^29+
         1582940926869295409298*ep^28+12244095448606145409093*ep^27+
         76394810361567235396212*ep^26+391521508535106122573835*ep^25+
         1669668897710103819315840*ep^24+5980104702128462957021385*ep^23+
         18104153726070538522186860*ep^22+46515652490987783877338595*ep^21+
         101619832004429020989057540*ep^20+188662648320927870810154875*ep^19+
         296541118611831396921011460*ep^18+390907629263528357157911385*ep^17+
         422643944430596856840480720*ep^16+352782472232871862886842875*ep^15+
         178290063219446846958794580*ep^14-60688695281397913318190535*ep^13-
         295581631302264729249199206*ep^12-454347673888204703019206484*ep^11-
         488101822251804416819640744*ep^10-396331142809393887999574608*ep^9-
         235265143881475769272802208*ep^8-87656117071244722349012928*ep^7-
         6652937137108179694753152*ep^6+12762720285176920221066240*ep^5+
         6869795482706860080230400*ep^4+1100205653226825056256000*ep^3-
         207099997892992512000000*ep^2-91712769211839283200000*ep-
         7950183761608704000000,262144*ep^33+39321600*ep^32+2823159808*ep^31+
         129223360512*ep^30+4237548568576*ep^29+106062193459200*ep^28+
         2107852284198912*ep^27+34164353408237568*ep^26+460307012676172800*
         ep^25+5228507614055270400*ep^24+50602156782984568320*ep^23+
         420653257231545262080*ep^22+3022068426863656134720*ep^21+
         18849529741385798812800*ep^20+102412022491832301157440*ep^19+
         485756096604521543285760*ep^18+2013913025672185932850560*ep^17+
         7300660457974134815020800*ep^16+23128365771799238812987520*ep^15+
         63939214095254941846586880*ep^14+153888038279354093784278336*ep^13+
         321362393352155649738115200*ep^12+579668979107540300012869952*ep^11+
         897888024571150462917769728*ep^10+1185441982354955254199042304*ep^9+
         1321384235018005491769497600*ep^8+1228539339805889208387714048*ep^7+
         937797652801698755633897472*ep^6+575560077412832477002690560*ep^5+
         275941130871845696038502400*ep^4+99112830287109956665344000*ep^3+
         24970546872193808793600000*ep^2+3916084997430853632000000*ep+
         286206615417913344000000)
         );
#endif
#if `MAXT1TABLE' > 13
Fill T1Table(14) = 
      +BasicT1Integral*(
         +rat(-1594323*ep^11-25509168*ep^10-170415414*ep^9-616471560*ep^8-
         1308702987*ep^7-1649120472*ep^6-1184277996*ep^5-432676080*ep^4-
         59875200*ep^3,8192*ep^9+290816*ep^8+4446208*ep^7+38226944*ep^6+
         202306048*ep^5+677137664*ep^4+1414524032*ep^3+1742554176*ep^2+
         1109689920*ep+259459200)
         )
      +GschemeConstants(1,0)*GschemeConstants(2,0)*(
         +rat(9130086995063040*ep^35+636823579107006144*ep^34+
         21156758678254886784*ep^33+445830141188989569456*ep^32+
         6694909272010103150016*ep^31+76305415718041315636788*ep^30+
         686457934126858784259000*ep^29+5004516428660154390571161*ep^28+
         30121435415886910969481235*ep^27+151710867312578503777003581*ep^26+
         645788874818124450162577665*ep^25+2340146557592992889263461915*ep^24+
         7256218067049531285060510015*ep^23+19318849827346991084156518725*ep^22
         +44249745824730169202270226105*ep^21+87261206586631944319494950085*
         ep^20+148134320593145373161604344445*ep^19+
         216437736675261212315467246215*ep^18+272699666482024642156593843915*
         ep^17+299144653496366494695324555105*ep^16+
         294361746171662837401307193645*ep^15+277902601047650941693331161851*
         ep^14+275588949338922005813572441011*ep^13+
         294720462117753284577659784534*ep^12+312724009940903074475680789764*
         ep^11+294351855882109727644216751112*ep^10+
         224953866521092173838432842000*ep^9+127610801185329325631949872544*
         ep^8+44677167536803314336652059840*ep^7+1816293341880214768688275584*
         ep^6-7260083403725859875395476480*ep^5-3603709448762191390082764800*
         ep^4-532105926588030670958592000*ep^3+115827482680612106342400000*ep^2
         +47428545490510734950400000*ep+4030743167135612928000000,1048576*ep^35
         +180355072*ep^34+14882177024*ep^33+784776036352*ep^32+29722279215104*
         ep^31+861460929839104*ep^30+19880665800687616*ep^29+375283835665072128
         *ep^28+5907339281679052800*ep^27+78656432746172596224*ep^26+
         895566198158259962880*ep^25+8792355982449791431680*ep^24+
         74912642239437555367680*ep^23+556667607214486054848000*ep^22+
         3621151781051002436397120*ep^21+20676604566655088272724160*ep^20+
         103818443730361525611983040*ep^19+458838936625734043547972160*ep^18+
         1785389055146701745679762560*ep^17+6113175680451270034383255680*ep^16+
         18395547800558381175224278144*ep^15+48549269863361277184119790208*
         ep^14+112053131084938556521002869056*ep^13+
         225307844068027035041764925888*ep^12+392744211753268844978698721216*
         ep^11+589842783953800168782774209856*ep^10+
         757325447058650209675012606464*ep^9+823203207540469768015328838912*
         ep^8+748217272509683374937825341440*ep^7+
         559632868706662499979583589376*ep^6+337252562724346001491277537280*
         ep^5+159073111302666769890705715200*ep^4+56313162122083707545044992000
         *ep^3+14006769425643993475276800000*ep^2+2172071086466358325248000000*
         ep+157198983518288904192000000)
         );
#endif
#if `MAXT1TABLE' > 14
Fill T1Table(15) = 
      +BasicT1Integral*(
         +rat(4782969*ep^12+97253703*ep^11+842865426*ep^10+4064815062*ep^9+
         11940239241*ep^8+21960500247*ep^7+24991400124*ep^6+16693642188*ep^5+
         5804414640*ep^4+778377600*ep^3,16384*ep^10+696320*ep^9+12963840*ep^8+
         138700800*ep^7+939789312*ep^6+4186560000*ep^5+12308975360*ep^4+
         23288444800*ep^3+26615138304*ep^2+16054577280*ep+3632428800)
         )
      +GschemeConstants(1,0)*GschemeConstants(2,0)*(
         +rat(109561041900023040*ep^38+9148346960320147392*ep^37+
         365541281422240881024*ep^36+9309454690326342437808*ep^35+
         169811940141435278238336*ep^34+2363546580359491975590036*ep^33+
         26113232146373051785286472*ep^32+235211896602966441828745449*ep^31+
         1760449106067840239611270923*ep^30+11102868715644908686623130902*ep^29
         +59628994453188041086761561954*ep^28+274876649363752491105647715258*
         ep^27+1094118772862656135956804363126*ep^26+
         3776867238907431166304885475510*ep^25+11340834173974140709967745885810
         *ep^24+29674219919871519124103322093420*ep^23+
         67700823161582584041468406780140*ep^22+
         134583115656680898877976956748370*ep^21+
         232579826731924273800181741965390*ep^20+
         347764708500383454410502859972230*ep^19+
         445782556119340918521155619110970*ep^18+
         480452237526643303086093431637918*ep^17+
         414860030406235007427930194171646*ep^16+
         242831654411289534610287635616507*ep^15-
         3690730885369887504498086069031*ep^14-
         264455272697905911594642409320336*ep^13-
         469582795126309066677149788519272*ep^12-
         561007746935381818847529865929024*ep^11-
         516575522177074211659858317109248*ep^10-
         367941864465352433393642095638912*ep^9-
         190354027794211210023056141092224*ep^8-
         57870039226545272844383512059648*ep^7+2071917973741781847087553791744*
         ep^6+11359042270210533405952157829120*ep^5+
         4891394751173835827495511859200*ep^4+609575734091285763720081408000*
         ep^3-174712305447915872987750400000*ep^2-62709398330676568856985600000
         *ep-5135166794930770870272000000,2097152*ep^38+419430400*ep^37+
         40378040320*ep^36+2492766617600*ep^35+110931730366464*ep^34+
         3792328100413440*ep^33+103643773209640960*ep^32+2326779778872934400*
         ep^31+43754023998678327296*ep^30+699289218220800901120*ep^29+
         9605378300657400145920*ep^28+114382940601850373376000*ep^27+
         1188941282321359614739968*ep^26+10845414435111005680880640*ep^25+
         87185996671358739918710400*ep^24+619684981559772805823664000*ep^23+
         3903639073006674055582563840*ep^22+21831267203414682117738681600*ep^21
         +108505097454662438590095203200*ep^20+479478122193783532304980304000*
         ep^19+1883496591778778847406812332288*ep^18+
         6572259083640389012101228672000*ep^17+20343960830370857898386437073280
         *ep^16+55753424844305738027886097334400*ep^15+
         134918360175467616644199991294976*ep^14+
         287311100867959602373653426837760*ep^13+
         536112872615964935988049232679040*ep^12+
         871924654113212289292165371977600*ep^11+
         1227949582810638108069456458751744*ep^10+
         1485439518057253867998105813434880*ep^9+
         1528075210048291167438404820372480*ep^8+
         1319978493284718925027985280768000*ep^7+
         942090772157663997231684287926272*ep^6+
         543837891213797406901951654748160*ep^5+
         246630481377088821338386284134400*ep^4+
         84246925828873556198709633024000*ep^3+20290405627429098806086041600000
         *ep^2+3057109032555805185294336000000*ep+
         215677005387092376551424000000)
         );
#endif
#if `MAXT1TABLE' > 15
Fill T1Table(16) = 
      +BasicT1Integral*(
         +rat(-14348907*ep^13-358722675*ep^12-3890148120*ep^11-23994561150*
         ep^10-92728128591*ep^9-233044850115*ep^8-382421203830*ep^7-
         399960528300*ep^6-251124234552*ep^5-83596937760*ep^4-10897286400*ep^3,
         32768*ep^11+1638400*ep^10+36372480*ep^9+471859200*ep^8+3960090624*ep^7
         +22469959680*ep^6+87416350720*ep^5+231211520000*ep^4+402556948608*ep^3
         +431336229120*ep^2+248083516800*ep+54486432000)
         )
      +GschemeConstants(1,0)*GschemeConstants(2,0)*(
         +rat(2629465017844953600*ep^41+258564060348280617600*ep^40+
         12213792005068331064000*ep^39+369204865846954860535200*ep^38+
         8027069246278803793655280*ep^37+133752624420816051181358040*ep^36+
         1777264048173021188817580020*ep^35+19347390729815252613968793150*ep^34
         +175917381648351332328278809155*ep^33+1355328192064986293954678198730*
         ep^32+8944730056665799116190508514465*ep^31+
         50994933679725504278773437106110*ep^30+
         252783375558879744334330242550920*ep^29+
         1094978295833499711827394528284820*ep^28+
         4160443116004320834509289631018560*ep^27+
         13904044672964237069896214249020200*ep^26+
         40945367005146057050579213515691550*ep^25+
         106357124390313576469572284008581000*ep^24+
         243742600903000473910805388648437250*ep^23+
         492606899013996700481459572294595400*ep^22+
         877045908964518788189214337232700600*ep^21+137379694738897046015322353\
         9483501700*ep^20+1891682847415205407679324288902182900*ep^19+229381962\
         6858844675957141722127922250*ep^18+24721972276633907348591670071077186\
         95*ep^17+2433015874983581485605423933012268110*ep^16+23149208916663395\
         93658289544533682805*ep^15+2295140538025915901803025661947265450*ep^14
         +2436126110196465547777781351099461320*ep^13+2603082771085711249840921\
         654792731120*ep^12+2548582024883868829437662065403784960*ep^11+
         2117749691466365905016337224345149440*ep^10+13985001457514023501523918\
         29481066880*ep^9+667985494032813974900070453799898880*ep^8+
         176475089800126187129736513201335040*ep^7-
         22119063470993889418528053718387200*ep^6-
         42182623159273007438803506436608000*ep^5-
         16153795278992060081459399485440000*ep^4-
         1679377395207546701313763737600000*ep^3+
         633144204744658488511838208000000*ep^2+
         204235997409015847885209600000000*ep+16175775404031928241356800000000,
         8388608*ep^41+1929379840*ep^40+214203105280*ep^39+15295368396800*ep^38
         +789699788537856*ep^37+31421758376509440*ep^36+1002865748884848640*
         ep^35+26385135603600588800*ep^34+583628021659206877184*ep^33+
         11015064738539192320000*ep^32+179412378141334980526080*ep^31+
         2544547359980229879398400*ep^30+31647869701242261469519872*ep^29+
         347153571560807572032798720*ep^28+3373795086041530218106982400*ep^27+
         29154827594136610104278016000*ep^26+224664274052977659502691295360*
         ep^25+1547160100595039768918131987200*ep^24+
         9536803224125153140674272924800*ep^23+52673481658573669080078515360000
         *ep^22+260820122478388934827450039809152*ep^21+
         1157926218725507221821896547362560*ep^20+
         4607219261513475737907665588757120*ep^19+
         16414881465370542148529790715603200*ep^18+
         52298414763472087081449520120747904*ep^17+
         148722918376873553095224697286268160*ep^16+
         376572747641551946597631176861695360*ep^15+
         846395697399026400320269645222419200*ep^14+168234470394715223814497337\
         2813678976*ep^13+2943591888965751072853679402070508800*ep^12+450855403\
         1301122976768722963413787520*ep^11+60040982389792480320250051079691456\
         00*ep^10+6894608767030356294854097514105625088*ep^9+675745588308206635\
         0056509630791265280*ep^8+5581026602384462412968682890215372800*ep^7+
         3821306629116204226207031275971072000*ep^6+212310296711776571543884090\
         4555520000*ep^5+929602743316579237818073548441600000*ep^4+
         307527796795234233319233334272000000*ep^3+
         71945247894844940389182689280000000*ep^2+
         10560379615936321423988736000000000*ep+
         727909893181436770861056000000000)
         );
#endif
#if `MAXT1TABLE' > 16
Fill T1Table(17) = 
      +BasicT1Integral*(
         +rat(43046721*ep^13+1076168025*ep^12+11670444360*ep^11+71983683450*
         ep^10+278184385773*ep^9+699134550345*ep^8+1147263611490*ep^7+
         1199881584900*ep^6+753372703656*ep^5+250790813280*ep^4+32691859200*
         ep^3,65536*ep^11+3473408*ep^10+81592320*ep^9+1117716480*ep^8+
         9881346048*ep^7+58894639104*ep^6+239878860800*ep^5+661690347520*ep^4+
         1196046479616*ep^3+1323351237888*ep^2+780790510080*ep+174356582400)
         )
      +GschemeConstants(1,0)*GschemeConstants(2,0)*(
         +rat(31553580177406241280*ep^43+3447228633504932774016*ep^42+
         181258226454047530728384*ep^41+6111255179625399822459168*ep^40+
         148510316471072646510995760*ep^39+2772136433126327906877620472*ep^38+
         41363172494846650028192461668*ep^37+506918397434769707406932710566*
         ep^36+5203036557983618215194860585415*ep^35+
         45382320643141972931020425038538*ep^34+
         340140070984144839860847341315277*ep^33+
         2209652620364387715021912571849854*ep^32+
         12526420003605587435941944041798520*ep^31+
         62297829468656772532081101063760644*ep^30+
         272931546108343835510904593796513696*ep^29+105664924136870214997362887\
         6854447752*ep^28+3623202860208271901745861703559428710*ep^27+110202607\
         64705633625371057816797852920*ep^26+2975539057878757132174470756436527\
         9930*ep^25+71324397000343409140531011738783639960*ep^24+15167014314106\
         7119050470650874635975320*ep^23+285661559288439689926918368785189774004
         *ep^22+475195144385878598422301908824448155396*ep^21+69490208757572702\
         8674035400240736243842*ep^20+886043358029905393595236516220955581115*
         ep^19+969576215289026566571852412178494912798*ep^18+878176561425873067\
         301391255076438028337*ep^17+590709070854751699612924703128953664794*
         ep^16+147873535157465682471096915903283868760*ep^15-357931316801332065\
         494534053003350148368*ep^14-807953687918571866446373990101802681472*
         ep^13-1087591526124936615040255617273404166144*ep^12-11238297373332589\
         37470210445391388552320*ep^11-925028314291450034844928410878864365824*
         ep^10-592324838272089496362601835834448681216*ep^9-2714287560355390309\
         97865596706219489792*ep^8-66428921054401584725569730397955522560*ep^7+
         11600239530551289438964279221400780800*ep^6+17394145288898545110945104\
         618618880000*ep^5+6328929054715697308561532605808640000*ep^4+
         599495193455905975352302131609600000*ep^3-
         257840777838608097238966468608000000*ep^2-
         79591278834152384421298176000000000*ep-
         6211497755148260444681011200000000,16777216*ep^43+4311744512*ep^42+
         535696506880*ep^41+42873235963904*ep^40+2484978331942912*ep^39+
         111187135293292544*ep^38+3997521136540712960*ep^37+
         118693303981019496448*ep^36+2968624042485148418048*ep^35+
         63479558490862429536256*ep^34+1173949798672932529111040*ep^33+
         18946649548664374636183552*ep^32+268796297292880015447670784*ep^31+
         3371736178357520963808903168*ep^30+37572607462221698360769208320*ep^29
         +373362626330883659954124742656*ep^28+3318623752099393313020192416000*
         ep^27+26448336976544167534328574992640*ep^26+
         189344390310309493395749923865600*ep^25+
         1219275315750933370953677123284480*ep^24+
         7068504441809565292787408427893504*ep^23+
         36908219331515541652014714283433728*ep^22+
         173580788686809497977911963726686720*ep^21+
         735020243053621202126221832319410176*ep^20+280010125136101612358984659\
         0246129408*ep^19+9585147310227625347747950914830384896*ep^18+294343384\
         09965890604866592668726640640*ep^17+8091157639081783268230839473646346\
         8032*ep^16+198567227413773113246749363591307068672*ep^15+4336353412669\
         58961990160059862781513984*ep^14+8393492814209990049340678203617016345\
         60*ep^13+1433150009998083812254169462913452694528*ep^12+21462522234728\
         90427704779319396199131136*ep^11+2799650284543073393965226561355036905\
         472*ep^10+3154330611335582199697254045524297441280*ep^9+30381057791836\
         19160293497412498968756224*ep^8+24694076083577046296563293945747657523\
         20*ep^7+1666278477911396742514437567897177292800*ep^6+9135391169942241\
         40267665566387208192000*ep^5+395190716899358876897194710368256000000*
         ep^4+129316240389011752717506078887116800000*ep^3+29958004659487995544\
         013396508672000000*ep^2+4359073578565317861667063726080000000*ep+
         298151892247116501344688537600000000)
         );
#endif
#if `MAXT1TABLE' > 17
Fill T1Table(18) = 
      +BasicT1Integral*(
         +rat(-129140163*ep^14-3917251611*ep^13-52230021480*ep^12-402678160110*
         ep^11-1986292092519*ep^10-6548353823403*ep^9-14627943639990*ep^8-
         21955862538540*ep^7-21458223469368*ep^6-12806335698336*ep^5-
         4110728590080*ep^4-523069747200*ep^3,131072*ep^12+8060928*ep^11+
         222232576*ep^10+3622502400*ep^9+38763872256*ep^8+285772161024*ep^7+
         1480966586368*ep^6+5401321328640*ep^5+13640828867072*ep^4+
         22979492629248*ep^3+24058552064256*ep^2+13622151836160*ep+
         2964061900800)
         )
      +GschemeConstants(1,0)*GschemeConstants(2,0)*(
         +rat(757285924478149002240*ep^46+95607347971236277199616*ep^45+
         5826315993245896389615360*ep^44+228354790260951418573545984*ep^43+
         6471076921900564701836034432*ep^42+141314356952017336913097913632*
         ep^41+2475200135981753796492848168928*ep^40+
         35735638779604675509440942149488*ep^39+
         433717915907401185526909942820724*ep^38+
         4490880880017852487400737605646563*ep^37+
         40123855620171449145867621046366611*ep^36+
         312093942027997676587383812454634617*ep^35+212836619241211029410588166\
         9553071051*ep^34+12797753614277696013139521581916818694*ep^33+68155503\
         301733579765805859328200741524*ep^32+322622346039013291889492153928944\
         827236*ep^31+1361183674075736046817300170705151533108*ep^30+5129452739\
         293280542782142236004199468130*ep^29+172899220937154890303944432653042\
         65663322*ep^28+52176187726920485385278099432570668880190*ep^27+
         141015245901321083166281888306742636549450*ep^26+341276829716727713025\
         504920333609854506504*ep^25+739108724950076248103080213714560375890700
         *ep^24+1430790740501672102019503621872645221561396*ep^23+2471948408721\
         331768382168565677223712274208*ep^22+380492236702829574107874686264622\
         6951792963*ep^21+5210977984509830714933692904607858666356907*ep^20+
         6353622060621387779586953583396023620787217*ep^19+69397130975267062149\
         23134329603508127213091*ep^18+6923986128752642538297564286379920222964\
         682*ep^17+6595575355906721289611041641224241597157224*ep^16+6420217800\
         257996630909459126903115072541488*ep^15+669230150265060929996701712488\
         6540008161664*ep^14+7247711156748991948148294345827156644341376*ep^13+
         7507131618133229811403798860508580456670336*ep^12+68855546028822684838\
         68417015655074919993344*ep^11+5274052675111332521087685018130287609599\
         232*ep^10+3177112225815895772487392689030947794787840*ep^9+13550473034\
         18032091800691958172466125529088*ep^8+28298410343343605928254443899714\
         6987479040*ep^7-83943101220850993695616377781497918259200*ep^6-
         91068905325813478769237133297160765440000*ep^5-30197636294550052203304\
         095109697372160000*ep^4-2320151610631894128103193462204006400000*ep^3+
         1327510740657744652242297623150592000000*ep^2+378484024051035147892480\
         907673600000000*ep+28721965619805556296204995788800000000,67108864*
         ep^46+19528679424*ep^45+2753426358272*ep^44+250660566073344*ep^43+
         16565938472091648*ep^42+847289297223548928*ep^41+34912964843998806016*
         ep^40+1191310199537258201088*ep^39+34339465949356521684992*ep^38+
         848802749337827598139392*ep^37+18201821093298808783503360*ep^36+
         341756582754202067361595392*ep^35+5660162057737869633188724736*ep^34+
         83188765103961904820926611456*ep^33+1090342088926309339430541737984*
         ep^32+12796080106512222925479382941696*ep^31+
         134909569816578605632346381952000*ep^30+
         1281229393701716253388229842160640*ep^29+
         10984093294998499516920478796250368*ep^28+
         85150183770376466019609694343032320*ep^27+
         597638784273523912673864651402895616*ep^26+380105130226681230850852922\
         2425017856*ep^25+21918129528532509156158869882456497408*ep^24+11460700\
         7490270928504126714141909556736*ep^23+54331747928891212869795663441599\
         6517632*ep^22+2334061025456786394837082965423554698752*ep^21+907861815\
         0169929874346643880182758097664*ep^20+31934151640534223295683795551701\
         816955392*ep^19+101422691036355352955298848389395936645888*ep^18+
         290267816786235168017163753863512584165888*ep^17+746780021958980575460\
         132013152468825112320*ep^16+1722047958727871205377110811246656149170688
         *ep^15+3546803553551543902564770538762318803122944*ep^14+6497713687599\
         084611692060969030282503642624*ep^13+105357702231821127480162005163476\
         83041616896*ep^12+15031173221345425381393333717192854986717184*ep^11+
         18735749597742438887432231157398064933089280*ep^10+2022979369306033845\
         0340031434655640033239040*ep^9+187247757166699309779183829342675349560\
         19712*ep^8+14665794063222183057018899897027378667356160*ep^7+956075338\
         8495214932929097019433979160166400*ep^6+507697510842374032860324416445\
         7166340096000*ep^5+2132525684416676773538146386211209216000000*ep^4+
         679214032378428766357398822948333158400000*ep^3+1535230868704370142620\
         29601772404736000000*ep^2+21846957975788489998813359023063040000000*ep
         +1464820246610083371106454785228800000000)
         );
#endif
#if `MAXT1TABLE' > 18
Fill T1Table(19) = 
      +BasicT1Integral*(
         +rat(387420489*ep^15+13947137604*ep^14+223283341827*ep^13+
         2095944845490*ep^12+12804404999427*ep^11+53412027043032*ep^10+
         155205845917821*ep^9+314542629495450*ep^8+437624333563284*ep^7+
         403208806074264*ep^6+230039892641952*ep^5+71451595272960*ep^4+
         8892185702400*ep^3,262144*ep^13+18481152*ep^12+589561856*ep^11+
         11245191168*ep^10+142732787712*ep^9+1269294022656*ep^8+8105832071168*
         ep^7+37460041211904*ep^6+124505441649664*ep^5+291493904865792*ep^4+
         461747971454976*ep^3+460298240828928*ep^2+251126856852480*ep+
         53353114214400)
         )
      +GschemeConstants(1,0)*GschemeConstants(2,0)*(
         +rat(9087431093076590392320*ep^49+1311619221081182823190272*ep^48+
         91608562737530454677928192*ep^47+4125760588374089960016822528*ep^46+
         134706500686791363840077202048*ep^45+3398809287976713160146820713888*
         ep^44+68982465474804332726045367901344*ep^43+
         1157527741448200763705475859341264*ep^42+
         16379942001106344799793539195681956*ep^41+
         198404710097973412304205902072628927*ep^40+208090770353258662167020732\
         3760961101*ep^39+19070483448334839726089281487125924980*ep^38+15382855\
         6524065279938256868457161180324*ep^37+10985727875882623351646170175725\
         59881001*ep^36+6979191200644638746866635497707152305643*ep^35+
         39595030681420564116805360667222703771696*ep^34+2012253579507217896305\
         88311855193501545532*ep^33+918328398148494253053348355260151510429350*
         ep^32+3770578041609911404275266157339778072612530*ep^31+13948041282611\
         674569547992158663449032728232*ep^30+465276444074306004554559288508727\
         62781954280*ep^29+140024860428857458041842566474976240678593410*ep^28+
         380197311169142279871985543964798523887547558*ep^27+930983530341089965\
         449045809592132507762687792*ep^26+205406694217462783161319624010376900\
         3125259612*ep^25+4077538570915243230628250787534184200449388267*ep^24+
         7267143155936326651502472183992403839846317521*ep^23+11592056737359060\
         847027134309880265997342421956*ep^22+164723451113164556306223554978044\
         19924418966804*ep^21+20693889437669732992432810644049684127649511653*
         ep^20+22665538547953666348363542420141846713633388639*ep^19+2100401862\
         5893584655742223497313911653993641840*ep^18+15171579908421665641429461\
         248351945280515846436*ep^17+580739480906355506289439479819679472822074\
         7904*ep^16-5391360499404501042121352049548796279757880928*ep^15-
         16087119297972758809396409991868511774427662976*ep^14-2383377910650047\
         3368490528414750451218050975872*ep^13-26742069520042203832173121124747\
         339226671013120*ep^12-24284806568059841456373446063443329076671709440*
         ep^11-17818937909503073920724293198600878275919194112*ep^10-1014132352\
         8246657227948898666890980166497213440*ep^9-401458792826000877095596995\
         1836799998594711552*ep^8-694026914793154825226910758926479611354972160
         *ep^7+320701632211890885366510000187687659277516800*ep^6+2798829491418\
         37160286369473375409823580160000*ep^5+85294540449355169768775366531859\
         725680640000*ep^4+5105616345640845873159967906486655385600000*ep^3-
         4016091934378623862914110022135840768000000*ep^2-106948725974726704799\
         5806140753510400000000*ep-79100293316944502039748558402355200000000,
         134217728*ep^49+43889197056*ep^48+6967275814912*ep^47+715581749723136*
         ep^46+53466658680864768*ep^45+3098390214217826304*ep^44+
         144980095461157240832*ep^43+5630964475178124312576*ep^42+
         185203463379738535395328*ep^41+5236814514139604418822144*ep^40+
         128806268099750632112259072*ep^39+2781708393897882338861776896*ep^38+
         53145381976419428507224506368*ep^37+903808540704013424207029469184*
         ep^36+13751568727416803457277078700032*ep^35+
         187984722910291489045286647627776*ep^34+
         2316892438375500741295769142478848*ep^33+
         25820210231781110715723159075600384*ep^32+
         260806824078538881890691956267172352*ep^31+239234719926417827652588208\
         3938241536*ep^30+19959271280997142582345293340207342592*ep^29+15163335\
         9974447908396759281933580772352*ep^28+10498973039562476487039440801201\
         41974528*ep^27+6628885590812596215500590053475795006464*ep^26+
         38175890013398688217792592504430596088832*ep^25+2005319223320354948436\
         28946640988746064896*ep^24+960490822198877331940341633585626901229568*
         ep^23+4192432010319768144645604698426687368346624*ep^22+16661906952060\
         807108765546446624442254748672*ep^21+602228827429182921319145325432549\
         26953491456*ep^20+197665208775772524272162069328651050635260928*ep^19+
         588077756157365039155437809102394812140207104*ep^18+158239383167094583\
         0653037956406786324115244032*ep^17+38408346738328723646052523081913380\
         93687919616*ep^16+8383309651980721313494980052795603267856813568*ep^15
         +16394265051623363523969393380556869346826881024*ep^14+286010229649487\
         97558822356693886608733241393152*ep^13+4428698983851241160893964172279\
         8028243844694016*ep^12+60500852984948320141343387385990538889374875648
         *ep^11+72397094158122505337051972888105143045980094464*ep^10+
         75232205418795578623276640826837388873670983680*ep^9+67179267375207989\
         963623415026644469484524142592*ep^8+5087947299221235254714619055808669\
         7708664258560*ep^7+32146406996018033995817336019332891696391782400*
         ep^6+16581015677046122729979215330844001309556736000*ep^5+677970561815\
         6179814393591666825695199232000000*ep^4+210651772939530225569707571991\
         2218322534400000*ep^3+465474824332338936489836804321549746176000000*
         ep^2+64892233857153404367135983287287152640000000*ep+42714158391150031\
         10146422153727180800000000)
         );
#endif
#if `MAXT1TABLE' > 19
Fill T1Table(20) = 
      +BasicT1Integral*(
         +rat(-1162261467*ep^15-41841412812*ep^14-669850025481*ep^13-
         6287834536470*ep^12-38413214998281*ep^11-160236081129096*ep^10-
         465617537753463*ep^9-943627888486350*ep^8-1312873000689852*ep^7-
         1209626418222792*ep^6-690119677925856*ep^5-214354785818880*ep^4-
         26676557107200*ep^3,524288*ep^13+38797312*ep^12+1297481728*ep^11+
         25907167232*ep^10+343681204224*ep^9+3188423786496*ep^8+21197707853824*
         ep^7+101744644653056*ep^6+350283798407168*ep^5+846888410632192*ep^4+
         1380549671566848*ep^3+1410509909901312*ep^2+784860830046720*ep+
         168951528345600)
         )
      +GschemeConstants(1,0)*GschemeConstants(2,0)*(
         +rat(218098346237805355223040*ep^51+34350489532583739824712192*ep^50+
         2621358858614660558666295552*ep^49+129162553740680421671761015296*
         ep^48+4620274285148174127776175809280*ep^47+
         127904712740355678855491136784320*ep^46+
         2852625403638396424093623679346400*ep^45+
         52684608492792103096984651274141280*ep^44+
         821955160380583160249878069159492440*ep^43+109963465408476970614897916\
         37917794570*ep^42+127623538770933070907720520644084747985*ep^41+
         1296849270300156759419597448468531828180*ep^40+11623441013786826024563\
         841021124322708205*ep^39+92442864018014326726381159537065885377730*
         ep^38+655595029061349309010120818615846443019855*ep^37+416260510587429\
         8936574004085995612151993460*ep^36+23740255311833960952337161670938675\
         096352095*ep^35+121940470714502362399385097804321709587269880*ep^34+
         565287048812884228651387293610180069426709790*ep^33+236895533155742753\
         9888825904461516560972963560*ep^32+89852595777798712275601188676253523\
         89396411730*ep^31+30869860699808928995174165026305031471565410116*
         ep^30+96105332410899041074069458658624853056924034766*ep^29+
         271135628247925570843918698169590715447373259528*ep^28+692962924640975\
         771094770880572676982505711558790*ep^27+160330179298934695005903571695\
         3049976775279745530*ep^26+33545806027600439920844691675416588506856187\
         58125*ep^25+6338058425304896163731807939394085505990785286820*ep^24+
         10794645155659866786222028540766674241740549007985*ep^23+1654100421845\
         6807867046386323883616231824644962330*ep^22+22766503648721559776818907\
         202389982554663919608115*ep^21+281367490040499700618729340724198657711\
         15851914020*ep^20+31337718019392884327639821427092954836645321332595*
         ep^19+31872230853856503374305508853018020111251457520420*ep^18+
         30575193534404571893283699699362890010714634421620*ep^17+2930070545792\
         5530048805567451185157191364522382240*ep^16+29736880585293877286923768\
         693691788577380942354080*ep^15+320495066899530846903903929947126116659\
         84446744320*ep^14+34423367148934221885173843685250802566984862751360*
         ep^13+34095461616667714697789773027522107141788843543040*ep^12+
         29335095128525009815073124930079541080901745089280*ep^11+2088392036031\
         0101777868663350605535624314713172992*ep^10+11589433055982127453702062\
         366432419020247438226432*ep^9+4441721759692722369971695184821812323071\
         546392576*ep^8+692500564310289749686501605167510031167741460480*ep^7-
         395133560680903508512255594408601979761403494400*ep^6-3174146318244462\
         62120465320439462278998097920000*ep^5-93157332111543856348616156836343\
         310845214720000*ep^4-4829140251850486020926257234320215821516800000*
         ep^3+4533109678203481414263888128354700754944000000*ep^2+1171780852463\
         487722828255053922854502400000000*ep+856656176622508957090476887497506\
         81600000000,536870912*ep^51+192736657408*ep^50+33626104266752*ep^49+
         3799736897241088*ep^48+312713608146452480*ep^47+19983624930548776960*
         ep^46+1032389438962757795840*ep^45+44325817925587079004160*ep^44+
         1613706476979215453388800*ep^43+50574254980867974234112000*ep^42+
         1380690385398689365753856000*ep^41+33144004767705101832237875200*ep^40
         +704951799844458656213789573120*ep^39+13368087268046922099946997678080
         *ep^38+227183801829578365126687969771520*ep^37+
         3474973118178054981751875815342080*ep^36+
         48012213260474137726576534299975680*ep^35+
         601009646751783721820596221930987520*ep^34+683321943674365018682959509\
         1227258880*ep^33+70709754139715186458939117820720721920*ep^32+66707247\
         4015401869819524672356906881536*ep^31+57449685315434860672038469708494\
         59009024*ep^30+45213642844632997427724385042094743315456*ep^29+
         325416931967039918527112421050191757195264*ep^28+214291042776063507606\
         8576511244179463751680*ep^27+12913784504053570923506448271840192597207\
         040*ep^26+71215116200511708678188453440019345313218560*ep^25+
         359282185223663845642973267133480111801405440*ep^24+165733857137926995\
         5848122090779071944177740800*ep^23+69848162874985772348354083908094888\
         80868582400*ep^22+26866274494288253627573220841698186743571097600*
         ep^21+94186098927969955337679675042147611060067123200*ep^20+
         300455255268729509292214962408706180752013588480*ep^19+870421686354005\
         839622717883109399981348515768320*ep^18+228465618655590847483355241634\
         7441246718592430080*ep^17+54182488856714643153074678027420243500031423\
         28320*ep^16+11572998015322634073719694981348496358718786654720*ep^15+
         22179284679206401083085410130301170473367755118080*ep^14+3797102823297\
         2503351192161339307135221801653867520*ep^13+57771981807608319985778032\
         611398861434001366599680*ep^12+776418992282482322918986275822907611143\
         27865495552*ep^11+91504722502840016142053882715580183740985235693568*
         ep^10+93752231127448650554189866284755866775924506017792*ep^9+
         82625153337877742059405036154742226667030852763648*ep^8+61821701576331\
         372809945812632909521099394742026240*ep^7+3862379362879247599786555185\
         2310993479196416409600*ep^6+197171184348784112585408945511489201776960\
         47104000*ep^5+7985897154526208117274418462629807134697062400000*ep^4+
         2459894151568453346776279879610179345553817600000*ep^3+539302959641173\
         649008963772165509248712704000000*ep^2+7465379956817824668543071384937\
         4058741760000000*ep+4882940206748301055415718258735788851200000000)
         );
#endif
#if `MINT1TABLE' < 1
Fill T1Table(0) = 
      +BasicT1Integral*(
         +rat(-2*ep^3,3*ep-1)
         )
      +GschemeConstants(1,0)*GschemeConstants(2,0)*(
         +rat(5*ep-1,9*ep-3)
         );
#endif
#if `MINT1TABLE' < 0
Fill T1Table(-1) = 
      +BasicT1Integral*(
         +rat(4*ep^4-2*ep^3,9*ep^2-9*ep+2)
         )
      +GschemeConstants(1,0)*GschemeConstants(2,0)*(
         +rat(-45*ep^4+98*ep^3-72*ep^2+21*ep-2,162*ep^4-351*ep^3+279*ep^2-96*ep
         +12)
         );
#endif
#if `MINT1TABLE' < -1
Fill T1Table(-2) = 
      +BasicT1Integral*(
         +rat(-8*ep^4+4*ep^3,27*ep^2-27*ep+6)
         )
      +GschemeConstants(1,0)*GschemeConstants(2,0)*(
         +rat(1170*ep^5-3297*ep^4+3557*ep^3-1810*ep^2+426*ep-36,5832*ep^5-17010
         *ep^4+19521*ep^3-10989*ep^2+3024*ep-324)
         );
#endif
#if `MINT1TABLE' < -2
Fill T1Table(-3) = 
      +BasicT1Integral*(
         +rat(16*ep^5-32*ep^4+12*ep^3,81*ep^3-189*ep^2+126*ep-24)
         )
      +GschemeConstants(1,0)*GschemeConstants(2,0)*(
         +rat(-13770*ep^7+78021*ep^6-180534*ep^5+219959*ep^4-151372*ep^3+58272*
         ep^2-11448*ep+864,104976*ep^7-586116*ep^6+1354482*ep^5-1679130*ep^4+
         1206576*ep^3-502632*ep^2+112320*ep-10368)
         );
#endif
#if `MINT1TABLE' < -3
Fill T1Table(-4) = 
      +BasicT1Integral*(
         +rat(-32*ep^6+128*ep^5-152*ep^4+48*ep^3,243*ep^4-972*ep^3+1323*ep^2-
         702*ep+120)
         )
      +GschemeConstants(1,0)*GschemeConstants(2,0)*(
         +rat(332100*ep^10-3515400*ep^9+16238925*ep^8-42990975*ep^7+71996555*
         ep^6-79373085*ep^5+58042860*ep^4-27616660*ep^3+8108160*ep^2-1308960*ep
         +86400,3779136*ep^10-38421216*ep^9+171714492*ep^8-443589210*ep^7+
         732378186*ep^6-806272542*ep^5+598513050*ep^4-295386048*ep^3+92619720*
         ep^2-16632000*ep+1296000)
         );
#endif
#if `MINT1TABLE' < -4
Fill T1Table(-5) = 
      +BasicT1Integral*(
         +rat(64*ep^6-288*ep^5+368*ep^4-120*ep^3,729*ep^4-2916*ep^3+3969*ep^2-
         2106*ep+360)
         )
      +GschemeConstants(1,0)*GschemeConstants(2,0)*(
         +rat(-663390*ep^10+7351803*ep^9-35267292*ep^8+96337197*ep^7-165606201*
         ep^6+186608506*ep^5-138972549*ep^4+67125902*ep^3-19948680*ep^2+3250800
         *ep-216000,11337408*ep^10-115263648*ep^9+515143476*ep^8-1330767630*
         ep^7+2197134558*ep^6-2418817626*ep^5+1795539150*ep^4-886158144*ep^3+
         277859160*ep^2-49896000*ep+3888000)
         );
#endif
#if `MINT1TABLE' < -5
Fill T1Table(-6) = 
      +BasicT1Integral*(
         +rat(-128*ep^7+960*ep^6-2464*ep^5+2448*ep^4-720*ep^3,2187*ep^5-13851*
         ep^4+32319*ep^3-34101*ep^2+15822*ep-2520)
         )
      +GschemeConstants(1,0)*GschemeConstants(2,0)*(
         +rat(15926220*ep^13-289334268*ep^12+2357447949*ep^11-11391401061*ep^10
         +36363918750*ep^9-80828363172*ep^8+128406056633*ep^7-147193702289*ep^6
         +121316123260*ep^5-70678683130*ep^4+28122000948*ep^3-7176881520*ep^2+
         1040407200*ep-63504000,408146688*ep^13-6768432576*ep^12+50726397744*
         ep^11-227273696100*ep^10+678459901122*ep^9-1423385868402*ep^8+
         2156435511516*ep^7-2385509026968*ep^6+1924174090242*ep^5-1116069140970
         *ep^4+451769175792*ep^3-120652859880*ep^2+19019448000*ep-1333584000)
         );
#endif
#if `MINT1TABLE' < -6
Fill T1Table(-7) = 
      +BasicT1Integral*(
         +rat(256*ep^8-2816*ep^7+11648*ep^6-22144*ep^5+18576*ep^4-5040*ep^3,
         6561*ep^6-59049*ep^5+207765*ep^4-360855*ep^3+320274*ep^2-134136*ep+
         20160)
         )
      +GschemeConstants(1,0)*GschemeConstants(2,0)*(
         +rat(-191100060*ep^15+4650065496*ep^14-51476630355*ep^13+343490279589*
         ep^12-1543003023537*ep^11+4935275469591*ep^10-11590922453049*ep^9+
         20313150811759*ep^8-26718293517747*ep^7+26300114103073*ep^6-
         19147773880596*ep^5+10080134965852*ep^4-3692537737056*ep^3+
         881494871040*ep^2-121224902400*ep+7112448000,7346640384*ep^15-
         161013868416*ep^14+1615087462752*ep^13-9827020082952*ep^12+
         40523531957028*ep^11-119844129239748*ep^10+262303749917496*ep^9-
         432150362746416*ep^8+539667745687332*ep^7-510155112652596*ep^6+
         361568766248352*ep^5-188398442398032*ep^4+69751479113856*ep^3-
         17293437584640*ep^2+2562513408000*ep-170698752000)
         );
#endif
#if `MINT1TABLE' < -7
Fill T1Table(-8) = 
      +BasicT1Integral*(
         +rat(-512*ep^8+6144*ep^7-27392*ep^6+55296*ep^5-48416*ep^4+13440*ep^3,
         19683*ep^6-177147*ep^5+623295*ep^4-1082565*ep^3+960822*ep^2-402408*ep+
         60480)
         )
      +GschemeConstants(1,0)*GschemeConstants(2,0)*(
         +rat(1528829640*ep^16-42170318172*ep^15+531589998366*ep^14-
         4062091400577*ep^13+21040997505138*ep^12-78254306667309*ep^11+
         215880676494470*ep^10-449920813591567*ep^9+714578079957662*ep^8-
         865785481661195*ep^7+795357837563204*ep^6-546274905315356*ep^5+
         273789109661760*ep^4-96245751308224*ep^3+22206031733760*ep^2-
         2971038873600*ep+170698752000,88159684608*ep^16-2130525711360*ep^15+
         23728424000256*ep^14-161531602489728*ep^13+751611925724040*ep^12-
         2532264913716732*ep^11+6383436488483148*ep^10-12268005600729384*ep^9+
         18144072742401216*ep^8-20692890485389116*ep^7+18113013236600316*ep^6-
         12023137997481888*ep^5+5923775694113136*ep^4-2090811187089792*ep^3+
         497672975681280*ep^2-71236247040000*ep+4608866304000)
         );
#endif
#if `MINT1TABLE' < -9
Fill T1Table(-9) = 
      +BasicT1Integral*(
         +rat(1024*ep^9-16896*ep^8+110080*ep^7-357120*ep^6+594496*ep^5-462624*
         ep^4+120960*ep^3,59049*ep^7-728271*ep^6+3641355*ep^5-9480645*ep^4+
         13708116*ep^3-10815444*ep^2+4205520*ep-604800)
         )
      +GschemeConstants(1,0)*GschemeConstants(2,0)*(
         +rat(-9172934100*ep^18+324874548900*ep^17-5309081988075*ep^16+
         53151755518575*ep^15-364998896811630*ep^14+1823980612927185*ep^13-
         6866610144523080*ep^12+19887563189988775*ep^11-44859329392960370*ep^10
         +79264533399916615*ep^9-109762342419719485*ep^8+118563246884319190*
         ep^7-98884963326147100*ep^6+62601299541264600*ep^5-29294315607488960*
         ep^4+9722858303948160*ep^3-2139133802803200*ep^2+275416339968000*ep-
         15362887680000,793437161472*ep^18-24464312478720*ep^17+350203327144704
         *ep^16-3090542433558912*ep^15+18829245880925640*ep^14-
         84040260015865788*ep^13+284548015791756252*ep^12-746644731087226536*
         ep^11+1537720639573688784*ep^10-2501680938985513404*ep^9+
         3218997822492871404*ep^8-3264278084712267552*ep^7+2586003584755963104*
         ep^6-1576557642078785088*ep^5+722305297417832640*ep^4-
         239582623473216000*ep^3+54082952187264000*ep^2-7400156682240000*ep+
         460886630400000)
         );
#endif
#if `MINT1TABLE' < -9
Fill T1Table(-10) = 
      +BasicT1Integral*(
         +rat(-2048*ep^10+44032*ep^9-389120*ep^8+1815040*ep^7-4760192*ep^6+
         6870208*ep^5-4868160*ep^4+1209600*ep^3,177147*ep^8-2834352*ep^7+
         18935046*ep^6-68496840*ep^5+145411443*ep^4-183235608*ep^3+131586444*
         ep^2-48075120*ep+6652800)
         )
      +GschemeConstants(1,0)*GschemeConstants(2,0)*(
         +rat(220150680840*ep^21-10310391758988*ep^20+225717216293358*ep^19-
         3070215277900965*ep^18+29089616126905044*ep^17-204000552542492046*
         ep^16+1098275355105203196*ep^15-4646350314507155850*ep^14+
         15682218730629264988*ep^13-42630005620019458464*ep^12+
         93818417577539357314*ep^11-167425189149711262465*ep^10+
         241865830722454952952*ep^9-281418465009140292222*ep^8+
         261413137884426738932*ep^7-191281917686224970520*ep^6+
         108118864545892497776*ep^5-45881938531528964480*ep^4+
         14006022482659065600*ep^3-2871347192792064000*ep^2+348801013693440000*
         ep-18589094092800000,28563737812992*ep^21-1168732938848256*ep^20+
         22447924172365824*ep^19-269041218322818816*ep^18+2256027780849476256*
         ep^17-14066142588383060232*ep^16+67647242449249442388*ep^15-
         256920580938257305092*ep^14+782550665598458457540*ep^13-
         1930426639603099191108*ep^12+3878420213422746684252*ep^11-
         6359750328059604941868*ep^10+8502753768807860532684*ep^9-
         9229737960621106446564*ep^8+8072111883088384429536*ep^7-
         5620427315633225872224*ep^6+3061303110081959358528*ep^5-
         1271181842550264075840*ep^4+387027692783787456000*ep^3-
         81105900793593984000*ep^2+10407281366845440000*ep-613440105062400000)
         );
#endif
#if `MINT1TABLE' < -10
Fill T1Table(-11) = 
      +BasicT1Integral*(
         +rat(4096*ep^10-94208*ep^9+885760*ep^8-4367360*ep^7+12016384*ep^6-
         18036992*ep^5+13160640*ep^4-3326400*ep^3,531441*ep^8-8503056*ep^7+
         56805138*ep^6-205490520*ep^5+436234329*ep^4-549706824*ep^3+394759332*
         ep^2-144225360*ep+19958400)
         )
      +GschemeConstants(1,0)*GschemeConstants(2,0)*(
         +rat(-880602460920*ep^21+42562450361988*ep^20-959446840846662*ep^19+
         13408832468973951*ep^18-130267540869443127*ep^17+934899613870393476*
         ep^16-5141478436870193604*ep^15+22181282680071090762*ep^14-
         76221967142011647474*ep^13+210634296241271387024*ep^12-
         470572686794716134906*ep^11+851346790692801323623*ep^10-
         1245275152770674067591*ep^9+1465344917189783291472*ep^8-
         1375097220153983543028*ep^7+1015428059358763038664*ep^6-
         578657686655415345888*ep^5+247345499370672715040*ep^4-
         75985664518237756800*ep^3+15663081990390912000*ep^2-
         1911434665029120000*ep+102240017510400000,171382426877952*ep^21-
         7012397633089536*ep^20+134687545034194944*ep^19-1614247309936912896*
         ep^18+13536166685096857536*ep^17-84396855530298361392*ep^16+
         405883454695496654328*ep^15-1541523485629543830552*ep^14+
         4695303993590750745240*ep^13-11582559837618595146648*ep^12+
         23270521280536480105512*ep^11-38158501968357629651208*ep^10+
         51016522612847163196104*ep^9-55378427763726638679384*ep^8+
         48432671298530306577216*ep^7-33722563893799355233344*ep^6+
         18367818660491756151168*ep^5-7627091055301584455040*ep^4+
         2322166156702724736000*ep^3-486635404761563904000*ep^2+
         62443688201072640000*ep-3680640630374400000)
         );
#endif
#if `MINT1TABLE' < -11
Fill T1Table(-12) = 
      +BasicT1Integral*(
         +rat(-8192*ep^11+237568*ep^10-2902016*ep^9+19363840*ep^8-76441088*ep^7
         +180270592*ep^6-242765184*ep^5+164580480*ep^4-39916800*ep^3,1594323*
         ep^9-32417901*ep^8+280955142*ep^7-1354938354*ep^6+3980079747*ep^5-
         7320166749*ep^4+8330466708*ep^3-5564547396*ep^2+1934804880*ep-
         259459200)
         )
      +GschemeConstants(1,0)*GschemeConstants(2,0)*(
         +rat(21134460636720*ep^24-1308575368411632*ep^23+38161351881072576*
         ep^22-697242029284888236*ep^21+8956030338388597113*ep^20-
         86025262911601338342*ep^19+641649206140867398285*ep^18-
         3809568635968503635928*ep^17+18308765885613122759226*ep^16-
         72050030562648656318772*ep^15+233942982381555385699474*ep^14-
         629629670355765949552900*ep^13+1407528229387752069848549*ep^12-
         2612919609881086501758902*ep^11+4018070962822389145410993*ep^10-
         5093663269690435980396072*ep^9+5283218690541702601017272*ep^8-
         4435527741418405746607952*ep^7+2969365441543216868098672*ep^6-
         1552440825675951706252864*ep^5+615452751363111724917120*ep^4-
         177127616457797653670400*ep^3+34531838093285761536000*ep^2-
         4022592725718927360000*ep+207342755511091200000,6169767367606272*ep^24
         -325969375921864704*ep^23+8146706507250167808*ep^22-
         128121339169170671616*ep^21+1422842285334109669632*ep^20-
         11869288797230801979264*ep^19+77240678429280963461328*ep^18-
         401988491600393669365656*ep^17+1701707449139796175927992*ep^16-
         5928158208084636718178784*ep^15+17128447783534167156888768*ep^14-
         41246868699705329817835536*ep^13+82980657085842625910928912*ep^12-
         139492915180268632905937824*ep^11+195553073717579237175355248*ep^10-
         227664471388369515220025496*ep^9+218645841673641269910648312*ep^8-
         171552081306733814323727424*ep^7+108485706455273929164838848*ep^6-
         54257609636356951205421696*ep^5+20892194414743135381418880*ep^4-
         5951133725623882883712000*ep^3+1176246812151399276288000*ep^2-
         143409065643089326080000*ep+8086367464932556800000)
         );
#endif
#if `MINT1TABLE' < -12
Fill T1Table(-13) = 
      +BasicT1Integral*(
         +rat(16384*ep^12-581632*ep^11+8892416*ep^10-76453888*ep^9+404612096*
         ep^8-1354275328*ep^7+2829048064*ep^6-3485108352*ep^5+2219379840*ep^4-
         518918400*ep^3,4782969*ep^10-119574225*ep^9+1296716040*ep^8-7998187050
         *ep^7+30909376197*ep^6-77681616705*ep^5+127473734610*ep^4-133320176100
         *ep^3+83708078184*ep^2-27865645920*ep+3632428800)
         )
      +GschemeConstants(1,0)*GschemeConstants(2,0)*(
         +rat(-126806761458360*ep^26+9267460791505668*ep^25-320489117005946958*
         ep^24+6978422913970725279*ep^23-107396750351256727977*ep^22+
         1243103407366374610866*ep^21-11243581770555943813593*ep^20+
         81504465539201167965399*ep^19-481873473420114854881872*ep^18+
         2352326165849893583049456*ep^17-9563187871782549987622008*ep^16+
         32564974102602512795904229*ep^15-93207601800720016068718497*ep^14+
         224573182964343218950497106*ep^13-455340343221677552725314513*ep^12+
         775315012831663323444677029*ep^11-1104246149387035044179695182*ep^10+
         1307608434723450562819594616*ep^9-1276509261488068952738358288*ep^8+
         1015497009362044214323973264*ep^7-648108830595690975066566112*ep^6+
         324831321432600153668492288*ep^5-124083469812610481587664640*ep^4+
         34574276184180680168524800*ep^3-6555490782855135593472000*ep^2+
         746003840700087889920000*ep-37736381503018598400000,55527906308456448*
         ep^26-3451984842175709184*ep^25+101911060546738974720*ep^24-
         1901305396812235622400*ep^23+25164527533638356332800*ep^22-
         251454133620299881699200*ep^21+1971063452756401532658000*ep^20-
         12432494016720381142978200*ep^19+64221573308830302648487320*ep^18-
         275086593954181768437228960*ep^17+985655979562317039220903200*ep^16-
         2971930440898806806302218000*ep^15+7568738650120528100646743760*ep^14-
         16310197696975442916967234080*ep^13+29741591327425932977219041200*
         ep^12-45816049810104633609273883800*ep^11+
         59420030620331341194047605080*ep^10-64532455824466895984533002240*ep^9
         +58241331155896794668163722400*ep^8-43225325765090050218145833600*ep^7
         +26008867424420362235996606592*ep^6-12442996023095000754255246336*ep^5
         +4605351559551423290476500480*ep^4-1266517624033786388350464000*ep^3+
         242663514002878154554368000*ep^2-28787431733099842682880000*ep+
         1584928023126781132800000)
         );
#endif
#if `MINT1TABLE' < -13
Fill T1Table(-14) = 
      +BasicT1Integral*(
         +rat(-32768*ep^12+1228800*ep^11-19783680*ep^10+178483200*ep^9-
         987162624*ep^8+3437306880*ep^7-7431416320*ep^6+9419808000*ep^5-
         6131236608*ep^4+1452971520*ep^3,14348907*ep^10-358722675*ep^9+
         3890148120*ep^8-23994561150*ep^7+92728128591*ep^6-233044850115*ep^5+
         382421203830*ep^4-399960528300*ep^3+251124234552*ep^2-83596937760*ep+
         10897286400)
         )
      +GschemeConstants(1,0)*GschemeConstants(2,0)*(
         +rat(1014454096390800*ep^27-79972797991190400*ep^26+
         2987680037090520600*ep^25-70397215730953281000*ep^24+
         1174635061097512590765*ep^23-14773242429733943007990*ep^22+
         145542672023743558287945*ep^21-1152322377782240261267190*ep^20+
         7463915073693625933937520*ep^19-40056117760981983429678120*ep^18+
         179718603211605029218701850*ep^17-678350770508306367992609620*ep^16+
         2162771406667729099448760925*ep^15-5837259375632116183847726950*ep^14+
         13343439799021728615742756405*ep^13-25805352460217735204622820750*
         ep^12+42106811769130140367644813830*ep^11-
         57710412716827798870524266780*ep^10+66010126207890476937787163360*ep^9
         -62456867108139295041682774880*ep^8+48307098567829704789474827360*ep^7
         -30061054292005099074646669760*ep^6+14729900356927977327954339840*ep^5
         -5514859340449506546698626560*ep^4+1509714185578373267855308800*ep^3-
         281891493342871390218240000*ep^2+31664241466630255042560000*ep-
         1584928023126781132800000,666334875701477376*ep^27-
         43922573889989050368*ep^26+1378272044458774609920*ep^25-
         27401662486350081331200*ep^24+387533073260210879001600*ep^23-
         4149853342457324615366400*ep^22+34968197445990313068360000*ep^21-
         237887783574682642685348400*ep^20+1330121110458380783215866840*ep^19-
         6191009926347544840428676920*ep^18+24206768482685984050326141600*ep^17
         -80017684371089948440567260000*ep^16+224561733641892643491360735120*
         ep^15-536315611619129079532710278160*ep^14+
         1090857992293006126990154028000*ep^13-1888164207455422587286143459600*
         ep^12+2774762608898684606745896031960*ep^11-
         3448290847808513105546538255480*ep^10+3602856485971771855321949769600*
         ep^9-3139563811196436362685117511200*ep^8+
         2257246068522096606648521791104*ep^7-1319714986376056309670910252672*
         ep^6+615199039753892113427204090880*ep^5-
         222439031668219484731648089600*ep^4+59905255249554925330423296000*ep^3
         -11265307310926715067141120000*ep^2+1314453564267014294323200000*ep-
         71321761040705150976000000)
         );
#endif
#if `MINT1TABLE' < -14
Fill T1Table(-15) = 
      +BasicT1Integral*(
         +rat(65536*ep^13-2949120*ep^12+57999360*ep^11-653721600*ep^10+
         4651573248*ep^9-21682053120*ep^8+66422435840*ep^7-130310860800*ep^6+
         153559593216*ep^5-94874492160*ep^4+21794572800*ep^3,43046721*ep^11-
         1305750537*ep^10+17410007160*ep^9-134226053370*ep^8+662097364173*ep^7-
         2182784607801*ep^6+4875981213330*ep^5-7318620846180*ep^4+7152741156456
         *ep^3-4268778566112*ep^2+1370242863360*ep-174356582400)
         )
      +GschemeConstants(1,0)*GschemeConstants(2,0)*(
         +rat(-12173449142517840*ep^29+1115899504524839088*ep^28-
         48654909138212547840*ep^27+1343256249879680184108*ep^26-
         26370878121335259644715*ep^25+391963365844479278129250*ep^24-
         4585416105682366848668700*ep^23+43332594482275052313146220*ep^22-
         336885085238445725482789875*ep^21+2183230817784939019138688250*ep^20-
         11907942330266621430574227180*ep^19+55043793759955268231271917020*
         ep^18-216684099331344460197449432305*ep^17+
         728721720266125605937964228470*ep^16-2097187003255472133958643654860*
         ep^15+5166429075986262747054720709540*ep^14-
         10884127452895867050808910113585*ep^13+
         19563464725617477017429802722270*ep^12-
         29890622792326494276883134621740*ep^11+
         38615730441535110059800665198440*ep^10-
         41882451952459493242630285194800*ep^9+37778798293440296281747871610272
         *ep^8-27993096255406977754588133391680*ep^7+
         16763568851148586148738458764672*ep^6-7937601266104559431944123386880*
         ep^5+2882960492382192855583573862400*ep^4-
         768444351256355943379488768000*ep^3+140202410247238232451317760000*
         ep^2-15442914819544046714880000000*ep+760765451100854943744000000,
         11994027762626592768*ep^29-918542626154486562816*ep^28+
         33583194443494997065728*ep^27-780346515122060582854656*ep^26+
         12942389802825904037898240*ep^25-163133361423203573486476800*ep^24+
         1624616329288859931429648000*ep^23-13120598925312577880528988000*ep^22
         +87520351526936961784472815920*ep^21-488619977072502430560060998640*
         ep^20+2305417747101767283274700339520*ep^19-
         9257814949645270967892312450240*ep^18+31799372067938561517200391651360
         *ep^17-93738588266385764583500483269920*ep^16+
         237583648916795927023679842292160*ep^15-
         518025283403448871674007818066720*ep^14+
         970992546845636596699324535154480*ep^13-
         1561563730386277045085555178050160*ep^12+
         2147601715282852928314629209268480*ep^11-
         2513785507986074760789974057770560*ep^10+
         2488089201800660710480054236425472*ep^9-
         2064602786243586979745372734174464*ep^8+
         1420168847183086332102547599194112*ep^7-
         797816191227316067054698900429824*ep^6+
         358768497028782891799152547061760*ep^5-
         125593368753639602717253634867200*ep^4+
         32858089855626857319365640192000*ep^3-6021496219232477551603875840000*
         ep^2+686694003024526707680870400000*ep-36516741652841037299712000000)
         );
#endif
#if `MINT1TABLE' < -15
Fill T1Table(-16) = 
      +BasicT1Integral*(
         +rat(-131072*ep^14+6946816*ep^13-163184640*ep^12+2235432960*ep^11-
         19762692096*ep^10+117789278208*ep^9-479757721600*ep^8+1323380695040*
         ep^7-2392092959232*ep^6+2646702475776*ep^5-1561581020160*ep^4+
         348713164800*ep^3,129140163*ep^12-4649045868*ep^11+74427780609*ep^10-
         698648281830*ep^9+4268134999809*ep^8-17804009014344*ep^7+
         51735281972607*ep^6-104847543165150*ep^5+145874777854428*ep^4-
         134402935358088*ep^3+76679964213984*ep^2-23817198424320*ep+
         2964061900800)
         )
      +GschemeConstants(1,0)*GschemeConstants(2,0)*(
         +rat(292162779505458720*ep^32-32016171255561278928*ep^31+
         1677769108412713005312*ep^30-55985713602448617869544*ep^29+
         1336422669203106911802114*ep^28-24305540776536838412454921*ep^27+
         350257972435484926807542087*ep^26-4106503249659174620929416660*ep^25+
         39911699721572227263566468340*ep^24-326012598768407677166737135575*
         ep^23+2261098666025054409859432424145*ep^22-
         13418002730512198119501732759390*ep^21+
         68520029651004730040790172574350*ep^20-
         302344559912000973387597706919855*ep^19+
         1156015592116977852229229047542585*ep^18-
         3836420986770665506667944779164760*ep^17+
         11057618455408034152639814160759120*ep^16-
         27670196259890447041609595387520105*ep^15+
         60033730381959057888349579529744575*ep^14-
         112664728313647152987871483816097870*ep^13+
         182260534113706702331031907227726060*ep^12-
         252975814706829839766498793002241752*ep^11+
         299430031832848010393049222281504208*ep^10-
         299873361925349443944972750318701856*ep^9+
         251569611097572203770770514115077696*ep^8-
         174531914399403625202580336634196864*ep^7+
         98475445567819480131514377479897088*ep^6-
         44193444246651951364923603927889920*ep^5+
         15298954263834818031323266587033600*ep^4-
         3907966204088439216099754033152000*ep^3+
         686955526866797069453678346240000*ep^2-
         73296257975203993979977728000000*ep+3517779445890353259872256000000,
         431784999454557339648*ep^32-39796184116395034804224*ep^31+
         1758960153472477709205504*ep^30-49646161475179124953448448*ep^29+
         1005268659749206066348867584*ep^28-15553677353624306815807954944*ep^27
         +191241352571777708570471651328*ep^26-1918792697656645219145188101120*
         ep^25+16008004048387091173588526879520*ep^24-
         112589507301171241979094081626160*ep^23+
         674506164466246000426248788512560*ep^22-
         3468719915102694518326921369363920*ep^21+
         15401658817678097117612265051564720*ep^20-
         59295639503689236296092822863385440*ep^19+
         198524189502396726354160308377402400*ep^18-
         579068172304483686820870593809504160*ep^17+147272234519807122498746668\
         7730450560*ep^16-3265284649238493732976622710025671920*ep^15+630457759\
         2241918198707771423178047600*ep^14-10578706404030132444053981958258280\
         080*ep^13+15378336445800235811715068403466944432*ep^12-192861510877793\
         52285342942177157931136*ep^11+20750174235520738156641345106539237696*
         ep^10-19016120406844507252776132028885915392*ep^9+14708172006345422828\
         987834379505479936*ep^8-9488768826965724811405041886839730176*ep^7+
         5028152675018580778727163011027622912*ep^6-214424462387332783541012133\
         2158586880*ep^5+715402880732491288670760093938073600*ep^4-
         179220469472672871894530349367296000*ep^3+
         31588642485897288218152695889920000*ep^2-
         3479261020236210312632283955200000*ep+
         179406751740408016253485056000000)
         );
#endif
#if `MINT1TABLE' < -16
Fill T1Table(-17) = 
      +BasicT1Integral*(
         +rat(262144*ep^14-14548992*ep^13+357171200*ep^12-5101977600*ep^11+
         46915878912*ep^10-290049048576*ep^9+1221638881280*ep^8-3472809369600*
         ep^7+6444801516544*ep^6-7290176159232*ep^5+4376047173120*ep^4-
         988020633600*ep^3,387420489*ep^12-13947137604*ep^11+223283341827*ep^10
         -2095944845490*ep^9+12804404999427*ep^8-53412027043032*ep^7+
         155205845917821*ep^6-314542629495450*ep^5+437624333563284*ep^4-
         403208806074264*ep^3+230039892641952*ep^2-71451595272960*ep+
         8892185702400)
         )
      +GschemeConstants(1,0)*GschemeConstants(2,0)*(
         +rat(-194775186322800720*ep^32+21831052133410608672*ep^31-
         1168951396308105150648*ep^30+39817458954050873530896*ep^29-
         969296068723363688049381*ep^28+17960979205058348217700134*ep^27-
         263470836776757035220192798*ep^26+3141638974869098441655499245*ep^25-
         31028150784850765312415935455*ep^24+257339122323651822225800336580*
         ep^23-1810769053862163050410035905100*ep^22+
         10893612741591013675884578795715*ep^21-
         56353687238171171315441139421995*ep^20+
         251721045759217942798270070183450*ep^19-
         973636360960324336100109908454910*ep^18+
         3266549279163760227554193729652195*ep^17-
         9512160887465947030629176926434025*ep^16+
         24033634916052338046036100018179000*ep^15-
         52618323173246098080276928130362720*ep^14+
         99590587445586004481068542648561485*ep^13-
         162395767116123883650324965494011320*ep^12+
         227082846455021075125607479943970628*ep^11-
         270647085127861081953844392540491552*ep^10+
         272794319412181643715838559461095984*ep^9-
         230217633032759509498045362968568704*ep^8+
         160597173638653943130079881883833536*ep^7-
         91070703552658582045343063230582272*ep^6+
         41058753823752377308937959401364480*ep^5-
         14273136106653699177558690469478400*ep^4+
         3659584589425646909083944050688000*ep^3-
         645422645306908313750828482560000*ep^2+
         69061383483716255737577472000000*ep-3322347254452000300990464000000,
         431784999454557339648*ep^32-39796184116395034804224*ep^31+
         1758960153472477709205504*ep^30-49646161475179124953448448*ep^29+
         1005268659749206066348867584*ep^28-15553677353624306815807954944*ep^27
         +191241352571777708570471651328*ep^26-1918792697656645219145188101120*
         ep^25+16008004048387091173588526879520*ep^24-
         112589507301171241979094081626160*ep^23+
         674506164466246000426248788512560*ep^22-
         3468719915102694518326921369363920*ep^21+
         15401658817678097117612265051564720*ep^20-
         59295639503689236296092822863385440*ep^19+
         198524189502396726354160308377402400*ep^18-
         579068172304483686820870593809504160*ep^17+147272234519807122498746668\
         7730450560*ep^16-3265284649238493732976622710025671920*ep^15+630457759\
         2241918198707771423178047600*ep^14-10578706404030132444053981958258280\
         080*ep^13+15378336445800235811715068403466944432*ep^12-192861510877793\
         52285342942177157931136*ep^11+20750174235520738156641345106539237696*
         ep^10-19016120406844507252776132028885915392*ep^9+14708172006345422828\
         987834379505479936*ep^8-9488768826965724811405041886839730176*ep^7+
         5028152675018580778727163011027622912*ep^6-214424462387332783541012133\
         2158586880*ep^5+715402880732491288670760093938073600*ep^4-
         179220469472672871894530349367296000*ep^3+
         31588642485897288218152695889920000*ep^2-
         3479261020236210312632283955200000*ep+
         179406751740408016253485056000000)
         );
#endif
#if `MINT1TABLE' < -17
Fill T1Table(-18) = 
      +BasicT1Integral*(
         +rat(-524288*ep^15+33816576*ep^14-976224256*ep^13+16633036800*ep^12-
         185667354624*ep^11+1424583917568*ep^10-7664160636928*ep^9+
         28935118602240*ep^8-75400171685888*ep^7+130586779616256*ep^6-
         139975265212416*ep^5+80744890383360*ep^4-17784371404800*ep^3,
         1162261467*ep^13-49202402103*ep^12+934845639957*ep^11-10530218031183*
         ep^10+78236167062591*ep^9-403519776118209*ep^8+1480446051571071*ep^7-
         3892538960924949*ep^6+7289182961103402*ep^5-9524488755925188*ep^4+
         8351086993336872*ep^3-4585112746015968*ep^2+1384256867293440*ep-
         168951528345600)
         )
      +GschemeConstants(1,0)*GschemeConstants(2,0)*(
         +rat(4674604471832247840*ep^35-617826891028993080912*ep^34+
         39184320122430990336576*ep^33-1588344795676958490906696*ep^32+
         46239431600443190416146810*ep^31-1029931254610018725042624789*ep^30+
         18259552466713775785097229129*ep^29-264657175998793819442795584089*
         ep^28+3196631179474336152420366119715*ep^27-
         32633088234641516047177661427189*ep^26+
         284594003297645854526337762280575*ep^25-
         2137727033112146788728593262195165*ep^24+
         13917755980455455556278240990753275*ep^23-
         78914658437630010291260107231026475*ep^22+
         391081613830307435326294874923431205*ep^21-169823903303137325576880287\
         4876811355*ep^20+6472303404254573068976101573857029025*ep^19-216669283\
         01185383853540413443549638135*ep^18+6371299590777266134551652365034112\
         6565*ep^17-164451089155868684552457811383450767415*ep^16+3720296121412\
         00607039366777357500360335*ep^15-7359634789763310441050361415887063488\
         68*ep^14+1269115865961032352325941687743611577294*ep^13-18998402586241\
         01729161387821761470671024*ep^12+2455939208754053099323333672453366298\
         840*ep^11-2723521189397079533875858397146347360896*ep^10+2569582121668\
         652155791699755403001757216*ep^9-2041269865313692933698077082949199533\
         056*ep^8+1347480536783119578262584511905075660160*ep^7-726690759732123\
         034817070664540666612736*ep^6+313057334998298380072547135285587261440*
         ep^5-104463785064225738444668429436916531200*ep^4+25824654056869646702\
         945281839120384000*ep^3-4410766650054908686888600802426880000*ep^2+
         459113303922060662720664698880000000*ep-
         21588612459429097955836035072000000,15544259980364064227328*ep^35-
         1703391822848228704911360*ep^34+89833516814019836349775872*ep^33-
         3036755667305136906431889408*ep^32+73940623176798727808325451776*ep^31
         -1381523185011291614659215802368*ep^30+
         20606387276559325399623682080768*ep^29-
         252028778161947403177066097129472*ep^28+
         2576435122925278483042249331319936*ep^27-
         22328806877011183421286387393502752*ep^26+
         165825736726523553431008372786703760*ep^25-106403630318914848683120050\
         0231541520*ep^24+5936565788507682569498385672851680800*ep^23-289399997\
         76411687927486058394224355520*ep^22+1237171750204067456021846015455449\
         23760*ep^21-465018357459736371308207471255277307440*ep^20+153947486392\
         1498489629654048339238725440*ep^19-44930606756279016879408284295808297\
         69440*ep^18+11562654528394735355838928356066821562480*ep^17-2622288373\
         0345300386810358027165769950320*ep^16+52342581544495854743465299156091\
         587144992*ep^15-91768746214412899584189172868242079256960*ep^14+
         140914564799097930170606772357122647847568*ep^13-188797954688945184267\
         955739573759898249552*ep^12+219644440988628383339976693047506563972864
         *ep^11-220537259275894760405910776373906952128192*ep^10+18965854236426\
         1630024222710827588781487872*ep^9-138367651790565611703536452796391541\
         509888*ep^8+84605292423849929331826534210288632612864*ep^7-42683831833\
         255447308504918773207358993408*ep^6+1740348670008030736823319018249752\
         4817920*ep^5-5573865585975892919816034548082552422400*ep^4+13454961547\
         89903197346720465974820864000*ep^3-22933911912716345494310282131734528\
         0000*ep^2+24511909711583039473019916700876800000*ep-123055091018745858\
         3482653999104000000)
         );
#endif
*
*--#] T1Table : 
*--#[ Service routines :
*--#[ DoG :
*
#procedure DoG
*
*	The only objects left are the G(1,x1,1,x2,0,0)
*	which have been written as GschemeConstants(x1,x2)
*
*#$vc = 0;
*Print +f "<1> %t";
id	G(n1?,x1?,n2?,x2?,n3?,n4?) = GschemeConstants(x1,x2)/(1+x1+x2)*
			Pochhammer(n1+n2-n4-2,ep+x1*ep+x2*ep)*
			Pochhammer(1-n1+n3-n4,1-ep-x1*ep)*
			Pochhammer(1-n2+n4,1-ep-x2*ep)*
			PochhammerINV(n1-1,1+x1*ep)*
			PochhammerINV(n2-1,1+x2*ep)*
			PochhammerINV(2-n1-n2+n3,2-2*ep-x1*ep-x2*ep);
*Print +f "<2> %t";
repeat id Pochhammer(n?pos_,x?) = Pochhammer(n-1,x)*num(n-1+x);
repeat id Pochhammer(n?neg_,x?) = Pochhammer(n+1,x)*den(n+x);
repeat id PochhammerINV(n?pos_,x?) = PochhammerINV(n-1,x)*den(n-1+x);
repeat id PochhammerINV(n?neg_,x?) = PochhammerINV(n+1,x)*num(n+x);
id	GschemeConstants(0,n?pos_) = GschemeConstants(n,0);
*	GschemeConstants(0,1)*GschemeConstants(0,2)
*			= GschemeConstants(1,1)*(2*D-6)/(3*D-10)
*			= GschemeConstants(1,1)*(1-2*ep)/(1-3*ep)
id	GschemeConstants(1,1)*GschemeConstants(0,0) =
			GschemeConstants(1,0)*GschemeConstants(2,0)*rat(1-3*ep,1-2*ep);
id	Pochhammer(0,x?) = 1;
id	PochhammerINV(0,x?) = 1;
id	num(x?)*den(x?) = 1;
id	den(x?number_) = 1/x;
id	num(x?number_) = x;
*Print +f "<3> %t";
id	num(x?) = rat(x,1);
*Print +f "<4> %t";
id	den(x?) = rat(1,x);
*Print +f "<5> %t";
*$vc = $vc+1;
*Print +f "<$vc = %$>",$vc;
*
#endprocedure
*
*--#] DoG : 
*--#[ ntriangle :
*
#procedure ntriangle(p,pa,pb,p1,p2)
*
*   Routine solves the triangle recursion
*                     p
*      n1 -------------------------- n2
*          p1    \    n0    /    p2
*                 \        /
*               n3 \      / n4
*                pa \    / pb
*                    \  /
*                     \/
*
*   n3,n4,n0,n1,n2 are the powers of the denominators
*   eppa and eppb are 1/pa.pa^ep and 1/pb.pb^ep
*   p is the momentum in n0. We need it here to determine the extra
*   momenta in the numerator.
*
id	`p' = xpower*`p';
if ( count(`p1'.`p1',1,`p2'.`p2',1,`p'.`p',1) >= -4 );
*
*	Here we can just use the recursion
*
	repeat;
		id	xpower^n8?/`p1'.`p1'^n1?pos_/`p2'.`p2'^n2?pos_/`p'.`p'^n?pos_/`pa'.`pa'^n3?/`pb'.`pb'^n4?
			*ep`pa'^x1?*ep`pb'^x2? = xpower^n8/`p1'.`p1'^n1/`p2'.`p2'^n2/`p'.`p'^n/`pa'.`pa'^n3/`pb'.`pb'^n4
				*ep`pa'^x1*ep`pb'^x2*(
					+num(n3+x1*ep)*(`p'.`p'/`pa'.`pa'-`p1'.`p1'/`pa'.`pa')
					+num(n4+x2*ep)*(`p'.`p'/`pb'.`pb'-`p2'.`p2'/`pb'.`pb')
				)*den(4-2*ep+n8-2*n-n3-n4-x1*ep-x2*ep);
	endrepeat;
	id	num(x?number_) = x;
	id	den(x?number_) = 1/x;
	id	num(x?)*den(x?) = 1;
	id	num(x?) = rat(x,1);
	id	den(x?) = rat(1,x);
else;
*
*	Here we have to use the general formula
*
	id	xpower^n8?/`p1'.`p1'^n1?pos_/`p2'.`p2'^n2?pos_/`p'.`p'^n?pos_/`pa'.`pa'^n3?/`pb'.`pb'^n4?
			*ep`pa'^x1?*ep`pb'^x2? = ftriangle(n8,n,n3,x1,n4,x2,n1,n2);
	id	ftriangle(n?,n0?,n3?,x1?,n4?,x2?,n1?,n2?) =
		+sum_(isum1,0,n2-1,sum_(isum2,0,n0-1,sum_(isum3,0,n0-1-isum2,
			ftriangle(n,n0-isum2-isum3,n3+n1+isum2,x1,n4+isum1+isum3,x2,0,n2-isum1)*sign_(n1+isum1)
				*fac_(n1+isum1+isum2+isum3-1)
				*Pochhammer(n1+isum2,n3+x1*ep)
				*Pochhammer(isum3+isum1,n4+x2*ep)
				*Pochhammer(-n1-isum1-isum2-isum3,isum2+isum3+5-2*ep+n-2*n0-n3-n4-x1*ep-x2*ep)
				*invfac_(isum1)*invfac_(isum2)*invfac_(isum3)*invfac_(n1-1)
		)))
		+sum_(isum1,0,n1-1,sum_(isum2,0,n2-1,sum_(isum3,0,n0,
			ftriangle(n,0,n3+isum1+isum3,x1,n4+n0+isum2-isum3,x2,n1-isum1,n2-isum2)*sign_(isum1+isum2)
				*fac_(n0+isum1+isum2-1)
				*Pochhammer(isum3+isum1,n3+x1*ep)
				*Pochhammer(n0-isum3+isum2,n4+x2*ep)
				*Pochhammer(-isum1-isum2-n0,4-2*ep+n-n0-n3-n4-x1*ep-x2*ep)
				*n0*invfac_(n0-isum3)
				*invfac_(isum1)*invfac_(isum2)*invfac_(isum3)
		)))
		+sum_(isum1,0,n1-1,sum_(isum2,0,n0-1,sum_(isum3,0,n0-1-isum2,
			ftriangle(n,n0-isum2-isum3,n3+isum1+isum3,x1,n4+n2+isum2,x2,n1-isum1,0)*sign_(n2+isum1)
				*fac_(n2+isum1+isum2+isum3-1)
				*Pochhammer(n2+isum2,n4+x2*ep)
				*Pochhammer(isum3+isum1,n3++x1*ep)
				*Pochhammer(-n2-isum1-isum2-isum3,isum2+isum3+5-2*ep+n-2*n0-n3-n4-x1*ep-x2*ep)
				*invfac_(isum1)*invfac_(isum2)*invfac_(isum3)*invfac_(n2-1)
		)));
	repeat id Pochhammer(n?pos_,x?) = Pochhammer(n-1,x)*num(n-1+x);
	repeat id Pochhammer(n?neg_,x?) = Pochhammer(n+1,x)*den(n+x);
	id	Pochhammer(0,x?) = 1;
	id	num(x?number_) = x;
	id	den(x?number_) = 1/x;
	id	num(x?)*den(x?) = 1;
	id	num(x?) = rat(x,1);
	id	den(x?) = rat(1,x);
	id	ftriangle(n?,n0?,n3?,x1?,n4?,x2?,n1?,n2?) =
		ep`pa'^x1*ep`pb'^x2/`p'.`p'^n0/`p1'.`p1'^n1/`p2'.`p2'^n2/`pa'.`pa'^n3/`pb'.`pb'^n4;
endif;
id	xpower = 1;
*
#endprocedure
*
*--#] ntriangle : 
*--#[ symtopo :
#procedure symtopo(TOPO)
#switch `TOPO'
*--#[ la :
#case la
*
if ( count([P+p1].[P+p1],1,[P+p2].[P+p2],1,[P+p3].[P+p3],1,
	[P-p1].[P-p1],1,[P-p2].[P-p2],1,[P-p3].[P-p3],1) >
	count([P+p4].[P+p4],1,[P+p5].[P+p5],1,[P+p6].[P+p6],1,
	[P-p4].[P-p4],1,[P-p5].[P-p5],1,[P-p6].[P-p6],1) );
	multiply,replace_(
		 [P-p1],[P+p6],[P+p1],[P-p6],[P+p6],[P-p1],[P-p6],[P+p1]
		,[P-p2],[P+p5],[P+p2],[P-p5],[P+p5],[P-p2],[P-p5],[P+p2]
		,[P-p3],[P+p4],[P+p3],[P-p4],[P+p4],[P-p3],[P-p4],[P+p3]);
	multiply,replace_(p1,-p6,p6,-p1,p2,-p5,p5,-p2,p3,-p4,p4,-p3,p7,-p7,p8,-p8,
	[P+p7],[P-p7],[P-p7],[P+p7],[P+p8],[P-p8],[P-p8],[P+p8]);
endif;
if ( count([P+p1].[P+p1],1,[P+p6].[P+p6],1,
	[P-p1].[P-p1],1,[P-p6].[P-p6],1) >
	count([P+p3].[P+p3],1,[P+p4].[P+p4],1,
	[P-p3].[P-p3],1,[P-p4].[P-p4],1) );
	multiply,replace_(
		 [P-p1],[P+p3],[P+p1],[P-p3],[P-p4],[P+p6],[P+p4],[P-p6]
		,[P-p3],[P+p1],[P+p3],[P-p1],[P-p6],[P+p4],[P+p6],[P-p4]
		,[P-p2],[P+p2],[P+p2],[P-p2],[P-p5],[P+p5],[P+p5],[P-p5]
		,[P-p7],[P+p8],[P+p7],[P-p8],[P-p8],[P+p7],[P+p8],[P-p7]
		,p1,-p3,p3,-p1,p4,-p6,p6,-p4,p2,-p2,p5,-p5,p7,-p8,p8,-p7,Q,-Q
		,[P+Q],[P-Q],[P-Q],[P+Q]);
endif;
*
#break
*--#] la : 
*--#[ be :
#case be
*
#break
*--#] be : 
*--#[ no :
#case no
*
if ( count([P+p1].[P+p1],1,[P+p2].[P+p2],1,[P+p3].[P+p3],1,
	[P-p1].[P-p1],1,[P-p2].[P-p2],1,[P-p3].[P-p3],1) >
	count([P+p4].[P+p4],1,[P+p5].[P+p5],1,[P+p6].[P+p6],1,
	[P-p4].[P-p4],1,[P-p5].[P-p5],1,[P-p6].[P-p6],1) );
	multiply,replace_([P-p1],[P+p6],[P+p1],[P-p6],[P+p6],[P-p1],[P-p6],[P+p1]
		,[P-p2],[P+p5],[P+p2],[P-p5],[P+p5],[P-p2],[P-p5],[P+p2]
		,[P-p3],[P+p4],[P+p3],[P-p4],[P+p4],[P-p3],[P-p4],[P+p3]);
	multiply,replace_(p1,-p6,p6,-p1,p2,-p5,p5,-p2,p3,-p4,p4,-p3,p7,p8,p8,p7
		,[P+p8],[P+p7],[P+p7],[P+p8],[P-p8],[P-p7],[P-p7],[P-p8]);
endif;
if ( count([P+p2].[P+p2],1,[P+p3].[P+p3],1,
	[P-p2].[P-p2],1,[P-p3].[P-p3],1) >
	count([P+p4].[P+p4],1,[P+p7].[P+p7],1,
	[P-p4].[P-p4],1,[P-p7].[P-p7],1) );
	multiply,replace_([P-p3],[P+p4],[P+p3],[P-p4],[P+p4],[P-p3],[P-p4],[P+p3]
		,[P-p2],[P+p7],[P+p2],[P-p7],[P+p7],[P-p2],[P-p7],[P+p2]
		,[P+p5],[P+p8],[P-p5],[P-p8],[P+p8],[P+p5],[P-p8],[P-p5]);
	multiply,replace_(p2,-p7,p7,-p2,p8,p5,p5,p8,p3,-p4,p4,-p3);
endif;
if ( count([P+p2].[P+p2],1,[P+p1].[P+p1],1,
	[P-p2].[P-p2],1,[P-p1].[P-p1],1) >
	count([P+p6].[P+p6],1,[P+p8].[P+p8],1,
	[P-p6].[P-p6],1,[P-p8].[P-p8],1) );
	multiply,replace_([P-p1],[P+p6],[P+p1],[P-p6],[P+p6],[P-p1],[P-p6],[P+p1]
		,[P-p2],[P+p8],[P+p2],[P-p8],[P+p8],[P-p2],[P-p8],[P+p2]
		,[P+p5],[P+p7],[P-p5],[P-p7],[P+p7],[P+p5],[P-p7],[P-p5]);
	multiply,replace_(p2,-p8,p8,-p2,p7,p5,p5,p7,p1,-p6,p6,-p1);
endif;
*
#break
*--#] no : 
*--#[ fa :
#case fa
*
#break
*--#] fa : 
*--#[ bu :
#case bu
*
*
#break
*--#] bu : 
*--#[ o1 :
#case o1
*
if ( count([P+p6].[P+p6],1,[P-p6].[P-p6],1) >
	count([P+p7].[P+p7],1,[P-p7].[P-p7],1) );
	multiply,replace_([P+p6],[P+p7],[P+p7],[P+p6],[P-p6],[P-p7],[P-p7],[P-p6]
	p6,p7,p7,p6);
endif;
if ( count([P+p1].[P+p1],1,[P+p2].[P+p2],1,
	[P-p1].[P-p1],1,[P-p2].[P-p2],1) >
	count([P+p3].[P+p3],1,[P+p4].[P+p4],1,
	[P-p3].[P-p3],1,[P-p4].[P-p4],1) );
	multiply,replace_([P-p1],[P+p4],[P+p1],[P-p4],[P+p4],[P-p1],[P-p4],[P+p1]
		,[P-p2],[P+p3],[P+p2],[P-p3],[P+p3],[P-p2],[P-p3],[P+p2]
		,[P-p5],[P+p5],[P+p5],[P-p5],[P-p6],[P+p6],[P+p6],[P-p6]
		,[P-p7],[P+p7],[P+p7],[P-p7]);
	multiply,replace_(p1,-p4,p4,-p1,p2,-p3,p3,-p2,p5,-p5,p6,-p6,p7,-p7);
endif;
*
#break
*--#] o1 : 
*--#[ o2 :
#case o2
*
if ( count([P+p6].[P+p6],1,[P-p6].[P-p6],1) >
	count([P+p7].[P+p7],1,[P-p7].[P-p7],1) );
	multiply,replace_([P+p6],[P+p7],[P+p7],[P+p6],[P-p6],[P-p7],[P-p7],[P-p6]
	p6,p7,p7,p6);
endif;
*
#break
*--#] o2 : 
*--#[ o3 :
#case o3
*
if ( count([P+p6].[P+p6],1,[P-p6].[P-p6],1) >
	count([P+p7].[P+p7],1,[P-p7].[P-p7],1) );
	multiply,replace_([P+p6],[P+p7],[P+p7],[P+p6],[P-p6],[P-p7],[P-p7],[P-p6]
	,p6,p7,p7,p6);
endif;
if ( count([P+p1].[P+p1],1,[P+p2].[P+p2],1,
	[P-p1].[P-p1],1,[P-p2].[P-p2],1) >
	count([P+p3].[P+p3],1,[P+p4].[P+p4],1,
	[P-p3].[P-p3],1,[P-p4].[P-p4],1) );
	multiply,replace_([P-p1],[P+p4],[P+p1],[P-p4],[P+p4],[P-p1],[P-p4],[P+p1]
		,[P-p2],[P+p3],[P+p2],[P-p3],[P+p3],[P-p2],[P-p3],[P+p2]
		,[P-p5],[P+p5],[P+p5],[P-p5]);
	multiply,replace_(p1,-p4,p4,-p1,p2,-p3,p3,-p2);
	id	p5 = -p5;
endif;
*
#break
*--#] o3 : 
*--#[ o4 :
#case o4
*
if ( count([P+p1].[P+p1],1,[P+p2].[P+p2],1,
	[P-p1].[P-p1],1,[P-p2].[P-p2],1) >
	count([P+p4].[P+p4],1,[P+p3].[P+p3],1,
	[P-p4].[P-p4],1,[P-p3].[P-p3],1) );
	multiply,replace_([P-p1],[P+p4],[P+p1],[P-p4],[P+p4],[P-p1],[P-p4],[P+p1]
		,[P-p2],[P+p3],[P+p2],[P-p3],[P+p3],[P-p2],[P-p3],[P+p2]
		,[P-p5],[P+p5],[P+p5],[P-p5]);
	multiply,replace_(p1,-p4,p4,-p1,p2,-p3,p3,-p2);
	id	p5 = -p5;
endif;
*
#break
*--#] o4 : 
*--#[ o5 :
#case o5
*
if ( count([P+p6].[P+p6],1,[P-p6].[P-p6],1) >
	count([P+p7].[P+p7],1,[P-p7].[P-p7],1) );
	multiply,replace_([P+p6],[P+p7],[P+p7],[P+p6],[P-p6],[P-p7],[P-p7],[P-p6]
	p6,p7,p7,p6);
endif;
*
#break
*--#] o5 : 
*--#[ o6 :
#case o6
*
if ( count([P+p6].[P+p6],1,[P-p6].[P-p6],1) >
	count([P+p7].[P+p7],1,[P-p7].[P-p7],1) );
	multiply,replace_([P+p6],[P+p7],[P+p7],[P+p6],[P-p6],[P-p7],[P-p7],[P-p6]
	,p6,p7,p7,p6);
endif;
if ( count([P+p1].[P+p1],1,[P+p2].[P+p2],1,
	[P-p1].[P-p1],1,[P-p2].[P-p2],1) >
	count([P+p3].[P+p3],1,[P+p4].[P+p4],1,
	[P-p3].[P-p3],1,[P-p4].[P-p4],1) );
	multiply,replace_([P-p1],[P+p4],[P+p1],[P-p4],[P+p4],[P-p1],[P-p4],[P+p1]
		,[P-p2],[P+p3],[P+p2],[P-p3],[P+p3],[P-p2],[P-p3],[P+p2]
		,[P-p5],[P+p5],[P+p5],[P-p5]);
	multiply,replace_(p1,-p4,p4,-p1,p2,-p3,p3,-p2);
	id	p5 = -p5;
endif;
*
#break
*--#] o6 : 
*--#[ y1 :
#case y1
*
if ( count([P+p6].[P+p6],1,[P-p6].[P-p6],1) <
	count([P+p5].[P+p5],1,[P-p5].[P-p5],1) );
	multiply,replace_([P+p6],[P+p5],[P+p5],[P+p6],[P-p6],[P-p5],[P-p5],[P-p6]
	p6,p5,p5,p6);
endif;
if ( count([P+p4].[P+p4],1,[P-p4].[P-p4],1) <
	count([P+p3].[P+p3],1,[P-p3].[P-p3],1) );
	multiply,replace_([P+p4],[P+p3],[P+p3],[P+p4],[P-p4],[P-p3],[P-p3],[P-p4]
	p4,p3,p3,p4);
endif;
*
#break
*--#] y1 : 
*--#[ y2 :
#case y2
*
if ( count([P+p6].[P+p6],1,[P-p6].[P-p6],1) <
	count([P+p5].[P+p5],1,[P-p5].[P-p5],1) );
	multiply,replace_([P+p6],[P+p5],[P+p5],[P+p6],[P-p6],[P-p5],[P-p5],[P-p6]
	p6,p5,p5,p6);
endif;
if ( count([P+p4].[P+p4],1,[P-p4].[P-p4],1) <
	count([P+p3].[P+p3],1,[P-p3].[P-p3],1) );
	multiply,replace_([P+p4],[P+p3],[P+p3],[P+p4],[P-p4],[P-p3],[P-p3],[P-p4]
	p4,p3,p3,p4);
endif;
*
#break
*--#] y2 : 
*--#[ y3 :
#case y3
*
if ( count([P+p6].[P+p6],1,[P-p6].[P-p6],1) <
	count([P+p5].[P+p5],1,[P-p5].[P-p5],1) );
	multiply,replace_([P+p6],[P+p5],[P+p5],[P+p6],[P-p6],[P-p5],[P-p5],[P-p6]
	p6,p5,p5,p6);
endif;
*
#break
*--#] y3 : 
*--#[ y4 :
#case y4
*
if ( count([P+p6].[P+p6],1,[P-p6].[P-p6],1) <
	count([P+p5].[P+p5],1,[P-p5].[P-p5],1) );
	multiply,replace_([P+p6],[P+p5],[P+p5],[P+p6],[P-p6],[P-p5],[P-p5],[P-p6]
	p6,p5,p5,p6);
endif;
if ( count([P+p4].[P+p4],1,[P-p4].[P-p4],1) <
	count([P+p3].[P+p3],1,[P-p3].[P-p3],1) );
	multiply,replace_([P+p4],[P+p3],[P+p3],[P+p4],[P-p4],[P-p3],[P-p3],[P-p4]
	p4,p3,p3,p4);
endif;
*
#break
*--#] y4 : 
*--#[ y5 :
#case y5
*
if ( count([P+p6].[P+p6],1,[P-p6].[P-p6],1) <
	count([P+p5].[P+p5],1,[P-p5].[P-p5],1) );
	multiply,replace_([P+p6],[P+p5],[P+p5],[P+p6],[P-p6],[P-p5],[P-p5],[P-p6]
	p6,p5,p5,p6);
endif;
if ( count([P+p4].[P+p4],1,[P-p4].[P-p4],1) <
	count([P+p3].[P+p3],1,[P-p3].[P-p3],1) );
	multiply,replace_([P+p4],[P+p3],[P+p3],[P+p4],[P-p4],[P-p3],[P-p3],[P-p4]
	p4,p3,p3,p4);
endif;
if ( count([P+p2].[P+p2],1,[P-p2].[P-p2],1) <
	count([P+p1].[P+p1],1,[P-p1].[P-p1],1) );
	multiply,replace_([P+p2],[P+p1],[P+p1],[P+p2],[P-p2],[P-p1],[P-p1],[P-p2]
	p2,p1,p1,p2);
endif;
*
#break
*--#] y5 : 
*--#[ y6 :
#case y6
*
if ( count([P+p6].[P+p6],1,[P-p6].[P-p6],1) <
	count([P+p5].[P+p5],1,[P-p5].[P-p5],1) );
	multiply,replace_([P+p6],[P+p5],[P+p5],[P+p6],[P-p6],[P-p5],[P-p5],[P-p6]
	p6,p5,p5,p6);
endif;
if ( count([P+p4].[P+p4],1,[P-p4].[P-p4],1) <
	count([P+p3].[P+p3],1,[P-p3].[P-p3],1) );
	multiply,replace_([P+p4],[P+p3],[P+p3],[P+p4],[P-p4],[P-p3],[P-p3],[P-p4]
	p4,p3,p3,p4);
endif;
*
#break
*--#] y6 : 
*--#[ t1 :
#case t1
*
if ( count([P+p1].[P+p1],1,[P+p2].[P+p2],1,
	[P-p1].[P-p1],1,[P-p2].[P-p2],1) >
	count([P+p4].[P+p4],1,[P+p3].[P+p3],1,
	[P-p4].[P-p4],1,[P-p3].[P-p3],1) );
	multiply,replace_([P-p1],[P+p4],[P+p1],[P-p4],[P+p4],[P-p1],[P-p4],[P+p1]
		,[P-p2],[P+p3],[P+p2],[P-p3],[P+p3],[P-p2],[P-p3],[P+p2]
		,[P-p5],[P+p5],[P+p5],[P-p5]);
	multiply,replace_(p1,-p4,p4,-p1,p2,-p3,p3,-p2,p5,-p5
		,epp1,epp4,epp4,epp1,epp2,epp3,epp3,epp2);
endif;
*
#break
*--#] t1 : 
*--#[ t2 :
#case t2
*
if ( count([P+p4].[P+p4],1,[P-p4].[P-p4],1) <
	count([P+p3].[P+p3],1,[P-p3].[P-p3],1) );
	multiply,replace_([P+p4],[P+p3],[P+p3],[P+p4],[P-p4],[P-p3],[P-p3],[P-p4]
	p4,p3,p3,p4,epp3,epp4,epp4,epp3);
endif;
*
#break
*--#] t2 : 
*--#[ t3 :
#case t3
*
if ( count([P+p4].[P+p4],1,[P-p4].[P-p4],1) <
	count([P+p3].[P+p3],1,[P-p3].[P-p3],1) );
	multiply,replace_([P+p4],[P+p3],[P+p3],[P+p4],[P-p4],[P-p3],[P-p3],[P-p4]
	p4,p3,p3,p4,epp3,epp4,epp4,epp3);
endif;
if ( count([P+p2].[P+p2],1,[P-p2].[P-p2],1) <
	count([P+p1].[P+p1],1,[P-p1].[P-p1],1) );
	multiply,replace_([P+p2],[P+p1],[P+p1],[P+p2],[P-p2],[P-p1],[P-p1],[P-p2]
	p2,p1,p1,p2,epp1,epp2,epp2,epp1);
endif;
*
#break
*--#] t3 : 
*--#[ l1 :
#case l1
*
*
#break
*--#] l1 : 
*--#[ l2 :
#case l2
*
*
#break
*--#] l2 : 
*--#[ l3 :
#case l3
*
*
#break
*--#] l3 : 
*--#[ tr :
#case tr
*
*
#break
*--#] tr : 
#endswitch
#endprocedure

*--#] symtopo : 
*--#[ momsubs :
#procedure momsubs(TOPO)
#switch `TOPO'
*--#[ la :
#case la
*
id	p5.p?!{p5} = p2.p-Q.p;
id	p4.p?!{p4} = p3.p-Q.p;
.sort:momsubs1;
id	p6.p?!{p6} = p1.p-Q.p;
id	p8.p?!{p8} = p3.p-p2.p;
.sort:momsubs2;
id	p7.p?!{p7} = p1.p-p2.p;
*
#break
*--#] la : 
*--#[ be :
#case be
*
id	p6.p7 = p6.p6/2+p7.p7/2-p8.p8/2;
id	p6.p8 = p6.p6/2+p8.p8/2-p7.p7/2;
id	p7.p8 = p6.p6/2-p7.p7/2-p8.p8/2;
*
id	p4.p5 = p4.p4/2+p5.p5/2-p8.p8/2;
id	p4.p8 = p4.p4/2+p8.p8/2-p5.p5/2;
id	p5.p8 = p4.p4/2-p5.p5/2-p8.p8/2;

id	p6.p?!{p6} = p2.p-p1.p;
id	p7.p?!{p7} = p2.p-p3.p;
id	p8.p?!{p8} = p3.p-p1.p;
.sort:momsubs1;
id	p4.p?!{p4} = p3.p-Q.p;
id	p5.p?!{p5} = p1.p-Q.p;
*
#break
*--#] be : 
*--#[ no :
#case no
*
id	p5.p?!{p5} = p6.p-p8.p;
id	p4.p?!{p4} = p3.p-Q.p;
.sort:momsubs1;
id	p6.p?!{p6} = p1.p-Q.p;
id	p7.p?!{p7} = p2.p-p1.p;
.sort:subs2;
id	p8.p?!{p8} = p2.p-p3.p;
*
#break
*--#] no : 
*--#[ fa :
#case fa
*
id	p6.p?!{p6} = p2.p-p1.p;
id	p7.p?!{p7} = p2.p-p3.p;
id	p8.p?!{p8} = p3.p-p1.p;
.sort:momsubs1;
id	p4.p?!{p4} = p3.p-Q.p;
id	p5.p?!{p5} = p1.p-Q.p;
*
#break
*--#] fa : 
*--#[ bu :
#case bu
*
id	p2.p?!{p2} = p1.p-p8.p;
id	p4.p?!{p4} = p1.p-p6.p;
id	p5.p?!{p5} = p6.p-p8.p;
.sort:momsubs1;
id	p7.p?!{p7} = p6.p-Q.p;
id	p3.p?!{p3} = p8.p-Q.p;
*
#break
*--#] bu : 
*--#[ o1 :
#case o1
*
id p7.p?!{p7} = p5.p-p6.p;
id p3.p?!{p3} = p2.p-Q.p;
.sort:momsubs1;
id p4.p?!{p4} = p1.p-Q.p;
id p5.p?!{p5} = p1.p-p2.p;
*
#break
*--#] o1 : 
*--#[ o2 :
#case o2
*
id	p7.p?!{p7} = p4.p-p6.p;
id	p2.p?!{p2} = p3.p+Q.p;
.sort:momsubs1;
id	p1.p?!{p1} = p4.p+Q.p;
id	p5.p?!{p5} = p4.p-p3.p;
*
#break
*--#] o2 : 
*--#[ o3 :
#case o3
*
id	p7.p?!{p7} = Q.p-p6.p;
id	p4.p?!{p4} = p1.p-Q.p;
.sort:momsubs1;
id	p5.p?!{p5} = p1.p-p2.p;
id	p3.p?!{p3} = p2.p-Q.p;
*
#break
*--#] o3 : 
*--#[ o4 :
#case o4
*
id	p7.p?!{p7} = Q.p-p6.p;
id	p5.p?!{p5} = p1.p-p2.p;
.sort:momsubs1;
id	p4.p?!{p4} = p1.p-p6.p;
id	p3.p?!{p3} = p2.p-p6.p;
*
#break
*--#] o4 : 
*--#[ o5 :
#case o5
*
id	p7.p?!{p7} = p3.p-p6.p;
id	p2.p?!{p2} = p3.p+Q.p;
.sort:momsubs1;
id	p1.p?!{p1} = p4.p+Q.p;
id	p5.p?!{p5} = p4.p-p3.p;
*
#break
*--#] o5 : 
*--#[ o6 :
#case o6
*
id	p7.p?!{p7} = Q.p-p6.p;
id	p4.p?!{p4} = p1.p-Q.p;
.sort:momsubs1;
id	p5.p?!{p5} = p1.p-p2.p;
id	p3.p?!{p3} = p2.p-Q.p;
*
#break
*--#] o6 : 
*--#[ y1 :
#case y1
*
id	p4.p?!{p4} = p1.p-p3.p;
id	p6.p?!{p6} = p2.p-p5.p;
id	p2.p?!{p2} = Q.p-p1.p;
*
#break
*--#] y1 : 
*--#[ y2 :
#case y2
*
id	p4.p?!{p4} = p1.p-p3.p;
id	p6.p?!{p6} = p1.p-p5.p;
id	p2.p?!{p2} = Q.p-p1.p;
*
#break
*--#] y2 : 
*--#[ y3 :
#case y3
*
id	p4.p?!{p4} = p1.p-p3.p;
id	p6.p?!{p6} = p3.p-p5.p;
id	p2.p?!{p2} = Q.p-p1.p;
*
#break
*--#] y3 : 
*--#[ y4 :
#case y4
*
id	p4.p?!{p4} = p1.p-p3.p;
id	p6.p?!{p6} = Q.p-p5.p;
id	p2.p?!{p2} = Q.p-p1.p;
*
#break
*--#] y4 : 
*--#[ y5 :
#case y5
*
id	p2.p?!{p2} = Q.p-p1.p;
id	p4.p?!{p4} = Q.p-p3.p;
id	p6.p?!{p6} = Q.p-p5.p;
*
#break
*--#] y5 : 
*--#[ y6 :
#case y6
*
id	p4.p?!{p4} = p1.p-p3.p;
id	p6.p?!{p6} = Q.p-p5.p;
id	p2.p?!{p2} = Q.p-p1.p;
*
#break
*--#] y6 : 
*--#[ t1 :
#case t1
*
id	p4.p?!{p4} = p1.p-Q.p;
.sort:momsubs1;
id	p3.p?!{p3} = p2.p-Q.p;
.sort:momsubs2;
id	p5.p?!{p5} = p1.p-p2.p;
*
#break
*--#] t1 : 
*--#[ t2 :
#case t2
*
id	p2.p?!{p2} = Q.p-p1.p;
.sort:momsubs1;
id	p4.p?!{p4} = p1.p-p3.p;
*
#break
*--#] t2 : 
*--#[ t3 :
#case t3
*
id	p2.p?!{p2} = Q.p-p1.p;
.sort:momsubs1;
id	p4.p?!{p4} = Q.p-p3.p;
*
#break
*--#] t3 : 
*--#[ l1 :
#case l1
*
*
#break
*--#] l1 : 
*--#[ l2 :
#case l2
*
*
#break
*--#] l2 : 
*--#[ l3 :
#case l3
*
*
#break
*--#] l3 : 
*--#[ tr :
#case tr
*
*
#break
*--#] tr : 
#default
#message Unknown case `TOPO' in procedure momsubs
#break
#endswitch
#endprocedure
*--#] momsubs : 
*--#[ scalars :
#procedure scalars(TOPO)
#switch `TOPO'
*--#[ la :
#case la
*
  AB+ Q.p1,p1.p1,p6.p6,Q.Q;
  .sort:Ladder rewrite 0;
    id  Q.p1 = p1.p1/2-p6.p6/2+Q.Q/2;
  AB+ Q.p3,p3.p3,p4.p4,Q.Q;
  .sort:Ladder rewrite 1;
    id  Q.p3 = p3.p3/2-p4.p4/2+Q.Q/2;
  AB+ Q.p2,p2.p2,Q.Q,p5.p5;
  .sort:Ladder rewrite 2;
    id  Q.p2 = p2.p2/2+Q.Q/2-p5.p5/2;
  AB+ p1.p2,p1.p1,p2.p2,p7.p7;
  .sort:Ladder rewrite 3;
    id  p1.p2 = p1.p1/2+p2.p2/2-p7.p7/2;
  AB+ p2.p3,p3.p3,p2.p2,p8.p8;
  .sort:Ladder rewrite 4;
    id  p2.p3 = p3.p3/2+p2.p2/2-p8.p8/2;
  .sort:Ladder rewrite 5;
*
#break
*--#] la : 
*--#[ be :
#case be
*
AB+ p1.p3,p1.p1,p3.p3,p8.p8;
.sort:Benz rewrite 0;
  id  p1.p3 = p1.p1/2+p3.p3/2-p8.p8/2;
AB+ p2.p3,p2.p2,p3.p3,p7.p7;
.sort:Benz rewrite 1;
  id  p2.p3 = p2.p2/2+p3.p3/2-p7.p7/2;
AB+ p1.p2,p1.p1,p2.p2,p6.p6;
.sort:Benz rewrite 2;
  id  p1.p2 = p1.p1/2+p2.p2/2-p6.p6/2;
AB+ Q.p1,p1.p1,Q.Q,p5.p5;
.sort:Benz rewrite 3;
  id  Q.p1 = p1.p1/2+Q.Q/2-p5.p5/2;
AB+ Q.p3,p3.p3,Q.Q,p4.p4;
.sort:Benz rewrite 4;
  id  Q.p3 = p3.p3/2+Q.Q/2-p4.p4/2;
.sort:Benz rewrite 5;
*
#break
*--#] be : 
*--#[ no :
#case no
*
AB+ p1.Q,p1.p1,Q.Q,p6.p6;
.sort:no rewrite 0;
  id  p1.Q = p1.p1/2+Q.Q/2-p6.p6/2;
AB+ p3.Q,p3.p3,Q.Q,p4.p4;
.sort:no rewrite 1;
  id  p3.Q = p3.p3/2+Q.Q/2-p4.p4/2;
AB+ p1.p2,p1.p1,p2.p2,p7.p7;
.sort:no rewrite 2;
  id  p1.p2 = p1.p1/2+p2.p2/2-p7.p7/2;
AB+ p2.p3,p3.p3,p2.p2,p8.p8;
.sort:no rewrite 3;
  id  p3.p2 = p3.p3/2+p2.p2/2-p8.p8/2;
.sort:no rewrite 4;
    id p1.p3 = -p2.Q+p1.p1/2+p2.p2/2+p3.p3/2+p5.p5/2
                 +Q.Q/2-p4.p4/2-p6.p6/2-p7.p7/2-p8.p8/2;
.sort:no rewrite 5;
*
#break
*--#] no : 
*--#[ fa :
#case fa
*
*
#break
*--#] fa : 
*--#[ bu :
#case bu
*
*
#break
*--#] bu : 
*--#[ o1 :
#case o1
*
id  p1.p2 = p1.p1/2+p2.p2/2-p5.p5/2;
.sort:o1 rewite 1;
id  Q.p1 = p1.p1/2+Q.Q/2-p4.p4/2;
id  Q.p2 = p2.p2/2+Q.Q/2-p3.p3/2;
.sort:o1 rewite 2;
*
#break
*--#] o1 : 
*--#[ o2 :
#case o2
*
id  p4.p6 = p4.p4/2+p6.p6/2-p7.p7/2;
id  p3.p4 = p3.p3/2+p4.p4/2-p5.p5/2;
.sort:o2 rewrite 1;
id  Q.p3 = p2.p2/2-Q.Q/2-p3.p3/2;
id  Q.p4 = p1.p1/2-Q.Q/2-p4.p4/2;
.sort:o2 rewrite 2;
*
#break
*--#] o2 : 
*--#[ o3 :
#case o3
*
id  Q.p6 = p6.p6/2+Q.Q/2-p7.p7/2;
id  p1.p2 = p1.p1/2+p2.p2/2-p5.p5/2;
.sort:o3 rewrite 1;
id  Q.p1 = p1.p1/2+Q.Q/2-p4.p4/2;
id  Q.p2 = p2.p2/2+Q.Q/2-p3.p3/2;
.sort:o3 rewrite 2;
*
#break
*--#] o3 : 
*--#[ o4 :
#case o4
*
id  Q.p6 = p6.p6/2+Q.Q/2-p7.p7/2;
id  p1.p2 = p1.p1/2+p2.p2/2-p5.p5/2;
.sort:o4 rewrite 1;
id  p1.p6 = p1.p1/2+p6.p6/2-p4.p4/2;
id  p2.p6 = p2.p2/2+p6.p6/2-p3.p3/2;
.sort:o4 rewrite 2;
*
#break
*--#] o4 : 
*--#[ o5 :
#case o5
*
id  p3.p6 = p3.p3/2+p6.p6/2-p7.p7/2;
id  p3.p4 = p3.p3/2+p4.p4/2-p5.p5/2;
.sort:o5 rewrite 1;
id  Q.p3 = p2.p2/2-Q.Q/2-p3.p3/2;
id  Q.p4 = p1.p1/2-Q.Q/2-p4.p4/2;
.sort:o5 rewrite 2;
*
#break
*--#] o5 : 
*--#[ o6 :
#case o6
*
id  Q.p6 = p6.p6/2+Q.Q/2-p7.p7/2;
id  p1.p2 = p1.p1/2+p2.p2/2-p5.p5/2;
.sort:o3 rewrite 1;
id  Q.p1 = p1.p1/2+Q.Q/2-p4.p4/2;
id  Q.p2 = p2.p2/2+Q.Q/2-p3.p3/2;
.sort:o3 rewrite 2;
*
#break
*--#] o6 : 
*--#[ y1 :
#case y1
*
id  p1.p3 = p1.p1/2+p3.p3/2-p4.p4/2;
id  Q.p1 = p1.p1/2+Q.Q/2-p2.p2/2;
.sort:y1 rewrite;
*
#break
*--#] y1 : 
*--#[ y2 :
#case y2
*
id  p1.p3 = p1.p1/2+p3.p3/2-p4.p4/2;
.sort:y2 rewrite 1;
id  p1.p5 = p1.p1/2+p5.p5/2-p6.p6/2;
.sort:y2 rewrite 2;
id  Q.p1 = p1.p1/2+Q.Q/2-p2.p2/2;
.sort:y2 rewrite 3;
*
#break
*--#] y2 : 
*--#[ y3 :
#case y3
*
id  p1.p3 = p1.p1/2+p3.p3/2-p4.p4/2;
.sort:y3 rewrite 1;
id  p3.p5 = p3.p3/2+p5.p5/2-p6.p6/2;
.sort:y3 rewrite 2;
id  Q.p1 = p1.p1/2+Q.Q/2-p2.p2/2;
.sort:y3 rewrite 3;
*
#break
*--#] y3 : 
*--#[ y4 :
#case y4
*
id  Q.p5 = p5.p5/2+Q.Q/2-p6.p6/2;
.sort:y4 rewrite 1;
id  p1.p3 = p1.p1/2+p3.p3/2-p4.p4/2;
.sort:y4 rewrite 2;
id  Q.p1 = p1.p1/2+Q.Q/2-p2.p2/2;
.sort:y4 rewrite 3;
*
#break
*--#] y4 : 
*--#[ y5 :
#case y5
*
id  Q.p5 = p5.p5/2+Q.Q/2-p6.p6/2;
.sort:y5 rewrite 1;
id  Q.p3 = p3.p3/2+Q.Q/2-p4.p4/2;
.sort:y5 rewrite 2;
id  Q.p1 = p1.p1/2+Q.Q/2-p2.p2/2;
.sort:y5 rewrite 3;
*
#break
*--#] y5 : 
*--#[ y6 :
#case y6
*
id  Q.p5 = p5.p5/2+Q.Q/2-p6.p6/2;
.sort:y4 rewrite 1;
id  p1.p3 = p1.p1/2+p3.p3/2-p4.p4/2;
.sort:y4 rewrite 2;
id  Q.p1 = p1.p1/2+Q.Q/2-p2.p2/2;
.sort:y4 rewrite 3;
*
#break
*--#] y6 : 
*--#[ t1 :
#case t1
*
id  p1.p2 = p1.p1/2+p2.p2/2-p5.p5/2;
.sort:t1 rewrite 1;
id  Q.p1 = p1.p1/2+Q.Q/2-p4.p4/2;
.sort:t1 rewrite 2;
id  Q.p2 = p2.p2/2+Q.Q/2-p3.p3/2;
.sort:t1 rewrite 3;
*
#break
*--#] t1 : 
*--#[ t2 :
#case t2
*
id  p1.p3 = p1.p1/2+p3.p3/2-p4.p4/2;
.sort:t2 rewrite 1;
id  Q.p1 = p1.p1/2+Q.Q/2-p2.p2/2;
.sort:t2 rewrite 2;
*
#break
*--#] t2 : 
*--#[ t3 :
#case t3
*
id  Q.p3 = p3.p3/2+Q.Q/2-p4.p4/2;
.sort:t3 rewrite 1;
id  Q.p1 = p1.p1/2+Q.Q/2-p2.p2/2;
.sort:t3 rewrite 2;
*
#break
*--#] t3 : 
*--#[ l1 :
#case l1
*
*
#break
*--#] l1 : 
*--#[ l2 :
#case l2
*
*
#break
*--#] l2 : 
*--#[ l3 :
#case l3
*
*
#break
*--#] l3 : 
*--#[ tr :
#case tr
*
*
#break
*--#] tr : 
#endswitch
#endprocedure
*--#] scalars : 
*--#[ harmproj :
*
#procedure harmproj(P,Q,T)
*
id	`P'.`Q' = `Q'.`Q';
id	`P'.`P' = 0;
ToTensor,nosquare,`T',`P';
id	`T'(?a) = sum_(j,0,nargs_(?a),2,`Q'.`Q'^(j/2)*hfac(nargs_(?a),j)*
				distrib_(1,j,dd,`T',?a));
ToVector,`T',`Q';
id	hfac(x1?,x2?) =
		PochhammerINV(x1,2-2*ep)*Pochhammer(x1-x2/2,1-ep)*2^x1/2^(x2/2)*sign_(x2/2);
repeat id Pochhammer(n?pos_,x?) = Pochhammer(n-1,x)*num(n-1+x);
repeat id PochhammerINV(n?pos_,x?) = PochhammerINV(n-1,x)*den(n-1+x);
id	Pochhammer(0,x?) = 1;
id	PochhammerINV(0,x?) = 1;
id	num(x?) = rat(x,1);
id	den(x?) = rat(1,x);
id	dd(?a) = dd_(?a);
*
#endprocedure
*
*--#] harmproj : 
*--#[ IntOne :
*
#procedure IntOne(p3,p4,Q,in,out)
*
if ( count(int`in',1) );
  if ( ( count(ep`p3',1) == 0 ) && ( count(`p3'.`p3',1) >= 0 ) ) Discard;
  if ( ( count(ep`p4',1) == 0 ) && ( count(`p4'.`p4',1) >= 0 ) ) Discard;
  ToTensor,nosquare,ftensor,`p3';
  if ( count(ftensor,1) == 0 );
	id	int`in'*ep`p3'^x3?*ep`p4'^x4?/`p3'.`p3'^n3?/`p4'.`p4'^n4? =
			int`out'*G(n3,x3,n4,x4,0,0)*`Q'.`Q'^2/`Q'.`Q'^n3/`Q'.`Q'^n4*ep`Q'^x3*ep`Q'^x4*ep`Q';
  elseif ( match(ftensor(i1?)) );
	id	int`in'*ep`p3'^x3?*ep`p4'^x4?/`p3'.`p3'^n3?/`p4'.`p4'^n4?*ftensor(i1?) = int`out'*`Q'(i1)
			*G(n3,x3,n4,x4,1,0)*`Q'.`Q'^2/`Q'.`Q'^n3/`Q'.`Q'^n4*ep`Q'^x3*ep`Q'^x4*ep`Q';
  elseif ( match(ftensor(i1?,i2?)) );
	id	int`in'*ep`p3'^x3?*ep`p4'^x4?/`p3'.`p3'^n3?/`p4'.`p4'^n4?*ftensor(i1?,i2?) =
				int`out'*`Q'.`Q'^2*ep`Q'*ep`Q'^x3*ep`Q'^x4/`Q'.`Q'^n3/`Q'.`Q'^n4*(
			+G(n3,x3,n4,x4,2,0)*`Q'(i1)*`Q'(i2)
			+G(n3,x3,n4,x4,2,1)*d_(i1,i2)*`Q'.`Q'/2);
  else;
	id	int`in'*ep`p3'^x3?*ep`p4'^x4?/`p3'.`p3'^n3?/`p4'.`p4'^n4?*ftensor(?a) = int`out'*ftensor(?a)
			*sum_(isum2,0,integer_(nargs_(?a)/2),G(n3,x3,n4,x4,nargs_(?a),isum2)
				*y^isum2*`Q'.`Q'^isum2/2^isum2)*`Q'.`Q'^2
				*ep`Q'*ep`Q'^x3*ep`Q'^x4/`Q'.`Q'^n3/`Q'.`Q'^n4;
    id  y^isum2?*ftensor(?a) = distrib_(1,2*isum2,del,ftensor,?a);
    tovector,ftensor,`Q';
    id  del(?a) = dd_(?a);
  endif;
  id  P.P = 0;
endif;
*
.sort:IntOne-`in'-1;
*
#call DoG
*
.sort:IntOne-`in'-2;
*
#endprocedure
*
*--#] IntOne : 
*--#[ integl1 :
*
#procedure integl1
*
*	Formula:  P.p1^N/p1.p1^n1/p2.p2^n2 =
*				G(n1,n2,N,0)*P.Q^N/Q.Q^(n1+n2-2+ep)
*
*	First go to a minimal set of variables
*
if ( count(intl1,1) );
  id  p2.p?!{p2} = Q.p-p1.p;
endif;
.sort:integl1-1;
if ( count(intl1,1) );
  id  Q.p1 = p1.p1/2+Q.Q/2-p2.p2/2;
endif;
.sort:integl1-2;
#call IntOne(p1,p2,Q,l1,0)
#endprocedure
*
*--#] integl1 : 
*--#[ rewiret1 :
*
#procedure rewiret1
*
if ( count(intt1,1) );
  if ( ( count(epp5,1) == 0 ) && ( count(p5.p5,1) >= 0 ) );
	Multiply replace_(p2,p3,p3,-p4,p4,-p2,
						epp2,epp3,epp3,epp4,epp4,epp2,intt1,intt3);
	id	p5.p5 = p1.p1-2*p1.p3+p3.p3;
	id	p5 = p1-p3;
  endif;
endif;
if ( count(intt1,1) );
  if ( ( count(epp1,1) == 0 ) && ( count(p1.p1,1) >= 0 ) );
	Multiply replace_(p3,-p1,p5,p4,p4,-p3,p1,p5,
						epp3,epp1,epp5,epp4,epp4,epp3,intt1,intt2);
	id	p5.p5 = Q.Q-2*Q.p3+p3.p3;
	id	p5 = Q-p3;
  endif;
endif;
if ( count(intt1,1) );
  if ( ( count(epp2,1) == 0 ) && ( count(p2.p2,1) >= 0 ) );
	Multiply replace_(p1,p2,p4,-p1,p3,-p3,p5,-p4,p2,p5,
						epp1,epp2,epp4,epp1,epp5,epp4,intt1,intt2);
	id	p5.p5 = Q.Q-2*Q.p3+p3.p3;
	id	p5 = Q-p3;
  endif;
endif;
if ( count(intt1,1) );
  if ( ( count(epp3,1) == 0 ) && ( count(p3.p3,1) >= 0 ) );
	Multiply replace_(p2,p3,p5,p4,p4,-p2,p3,-p5,
						epp2,epp3,epp5,epp4,epp4,epp2,intt1,intt2);
	id	p5.p5 = Q.Q-2*Q.p3+p3.p3;
	id	p5 = Q-p3;
  endif;
endif;
if ( count(intt1,1) );
  if ( ( count(epp4,1) == 0 ) && ( count(p4.p4,1) >= 0 ) );
	Multiply replace_(p2,p1,p3,-p2,p1,p3,p5,-p4,p4,-p5,
						epp2,epp1,epp3,epp2,epp1,epp3,epp5,epp4,intt1,intt2);
	id	p5.p5 = Q.Q-2*Q.p3+p3.p3;
	id	p5 = Q-p3;
  endif;
endif;
*
#endprocedure
*
*--#] rewiret1 : 
*--#[ rewireo4 :
*
#procedure rewireo4
*
if ( count(into4,1) );
	if ( ( count(epp1,1) == 0 ) && ( count(p1.p1,1) >= 0 ) );
		Multiply replace_(p4,-p5,p5,p6,p3,-p3,p2,p4,p6,p1,p7,p2,p1,p9,
			epp4,epp5,epp5,epp6,epp2,epp4,epp6,epp1,epp7,epp2,into4,inty3);
		id	p9 = p1-p5;
	elseif ( ( count(epp2,1) == 0 ) && ( count(p2.p2,1) >= 0 ) );
		Multiply replace_(p3,-p5,p5,-p6,p4,-p3,p1,p4,p6,p1,p7,p2,p2,p9,
			epp3,epp5,epp5,epp6,epp4,epp3,epp1,epp4,epp6,epp1,epp7,epp2
			,into4,inty3);
		id	p9 = p1-p5;
	elseif ( ( count(epp3,1) == 0 ) && ( count(p3.p3,1) >= 0 ) );
		Multiply replace_(p1,-p4,p4,-p1,p2,-p3,p3,-p2,p5,-p5,
			epp1,epp4,epp4,epp1,epp2,epp3,epp3,epp2);
		Multiply replace_(p3,-p5,p5,-p6,p4,-p3,p1,p4,p6,p1,p7,p2,p2,p9,
			epp3,epp5,epp5,epp6,epp4,epp3,epp1,epp4,epp6,epp1,epp7,epp2
			,into4,inty3);
		id	p9 = p1-p5;
*		Multiply replace_(p2,p5,p5,p6,p1,p3,p4,-p4,p6,p1,p7,p2,p3,p9,
*			epp2,epp5,epp5,epp6,epp1,epp3,epp6,epp1,epp7,epp2,into4,inty3);
*		id	p9 = p5-p1;
	elseif ( ( count(epp4,1) == 0 ) && ( count(p4.p4,1) >= 0 ) );
		Multiply replace_(p1,-p4,p4,-p1,p2,-p3,p3,-p2,p5,-p5,
			epp1,epp4,epp4,epp1,epp2,epp3,epp3,epp2);
		Multiply replace_(p4,-p5,p5,p6,p3,-p3,p2,p4,p6,p1,p7,p2,p1,p9,
			epp4,epp5,epp5,epp6,epp2,epp4,epp6,epp1,epp7,epp2,into4,inty3);
		id	p9 = p1-p5;
*		Multiply replace_(p1,p5,p5,-p6,p2,p3,p3,-p4,p6,p1,p7,p2,p4,p9,
*			epp1,epp5,epp5,epp6,epp2,epp3,epp3,epp4,epp6,epp1,epp7,epp2
*			,into4,inty3);
*		id	p9 = p5-p1;
	elseif ( ( count(epp5,1) == 0 ) && ( count(p5.p5,1) >= 0 ) );
		Multiply replace_(p1,p3,p4,-p4,p2,p5,p3,-p6,p6,p1,p7,p2,p5,p9,
			epp1,epp3,epp2,epp5,epp3,epp6,epp6,epp1,epp7,epp2,into4,inty2);
		id	p9 = p3-p5;
	elseif ( ( count(epp7,1) == 0 ) && ( count(p7.p7,1) >= 0 ) );
		Discard;
	elseif ( ( count(epp6,1) == 0 ) && ( count(p6.p6,1) >= 0 ) );
*		This case doesn't help
	endif;
endif;
*
#endprocedure
*
*--#] rewireo4 : 
*--#[ rewirela :
*
#procedure rewirela
*
if ( count(intla,1) );
  if ( ( count(epp8,1) == 0 ) && ( count(p8.p8,1) >= 0 ) );
	Multiply replace_(p5,p3,p6,p4,p7,p5,p3,p6,p4,-p7,p8,p9,
		epp5,epp3,epp6,epp4,epp7,epp5,epp3,epp6,epp4,epp7,intla,into3);
	id	p9 = p6-p2;
  endif;
endif;
if ( count(intla,1) );
  if ( ( count(epp7,1) == 0 ) && ( count(p7.p7,1) >= 0 ) );
	Multiply replace_(p1,-p3,p3,-p1,p2,-p2,p4,-p6,p6,-p4,p5,-p5,p7,-p8,p8,-p7,
		epp1,epp3,epp3,epp1,epp4,epp6,epp6,epp4,epp7,epp8,epp8,epp7,Q,-Q);
	Multiply replace_(p5,p3,p6,p4,p7,p5,p3,p6,p4,-p7,p8,p9,
		epp5,epp3,epp6,epp4,epp7,epp5,epp3,epp6,epp4,epp7,intla,into3);
	id	p9 = p6-p2;
  endif;
endif;
if ( count(intla,1) );
  if ( ( count(epp1,1) == 0 ) && ( count(p1.p1,1) >= 0 ) );
	Multiply replace_(p2,p1,p3,p2,p4,p3,p5,p4,p8,-p5,p6,p6,p7,-p7,p1,p9
		epp2,epp1,epp3,epp2,epp4,epp3,epp5,epp4,epp8,epp5,intla,into2);
	id	p9 = Q+p6;
  endif;
endif;
if ( count(intla,1) );
  if ( ( count(epp3,1) == 0 ) && ( count(p3.p3,1) >= 0 ) );
	Multiply replace_(p1,-p3,p3,-p1,p2,-p2,p4,-p6,p6,-p4,p5,-p5,p7,-p8,p8,-p7,
		epp1,epp3,epp3,epp1,epp4,epp6,epp6,epp4,epp7,epp8,epp8,epp7,Q,-Q);
	Multiply replace_(p2,p1,p3,p2,p4,p3,p5,p4,p8,-p5,p6,p6,p7,-p7,p1,p9
		epp2,epp1,epp3,epp2,epp4,epp3,epp5,epp4,epp8,epp5,intla,into2);
	id	p9 = Q+p6;
  endif;
endif;
if ( count(intla,1) );
  if ( ( count(epp6,1) == 0 ) && ( count(p6.p6,1) >= 0 ) );
	Multiply replace_(p1,-p6,p6,-p1,p3,-p4,p4,-p3,p7,-p7,p8,-p8,p2,-p5,p5,-p2,
		epp1,epp6,epp6,epp1,epp3,epp4,epp4,epp3,epp2,epp5,epp5,epp2);
	Multiply replace_(p2,p1,p3,p2,p4,p3,p5,p4,p8,-p5,p6,p6,p7,-p7,p1,p9
		epp2,epp1,epp3,epp2,epp4,epp3,epp5,epp4,epp8,epp5,intla,into2);
	id	p9 = Q+p6;
  endif;
endif;
if ( count(intla,1) );
  if ( ( count(epp4,1) == 0 ) && ( count(p4.p4,1) >= 0 ) );
	Multiply replace_(p1,p4,p4,p1,p2,p5,p5,p2,p3,p6,p6,p3,p7,p8,p8,p7,Q,-Q,
		epp1,epp4,epp4,epp1,epp2,epp5,epp5,epp2,epp3,epp6,epp6,epp3,
		epp7,epp8,epp8,epp7);
	Multiply replace_(p2,p1,p3,p2,p4,p3,p5,p4,p8,-p5,p6,p6,p7,-p7,p1,p9
		epp2,epp1,epp3,epp2,epp4,epp3,epp5,epp4,epp8,epp5,intla,into2);
	id	p9 = Q+p6;
  endif;
endif;
if ( count(intla,1) );
  if ( ( count(epp5,1) == 0 ) && ( count(p5.p5,1) >= 0 ) );
	Multiply replace_(p6,p5,p7,-p6,p8,-p7,p5,p9,
		epp6,epp5,epp7,epp6,epp8,epp7,intla,intfa);
	id	p9 = p2-Q;
  endif;
endif;
if ( count(intla,1) );
  if ( ( count(epp2,1) == 0 ) && ( count(p2.p2,1) >= 0 ) );
	Multiply replace_(p1,-p6,p6,-p1,p3,-p4,p4,-p3,p7,-p7,p8,-p8,p2,-p5,p5,-p2,
		epp1,epp6,epp6,epp1,epp3,epp4,epp4,epp3,epp2,epp5,epp5,epp2);
	Multiply replace_(p6,p5,p7,-p6,p8,-p7,p5,p9,
		epp6,epp5,epp7,epp6,epp8,epp7,intla,intfa);
	id	p9 = p2-Q;
  endif;
endif;
*
#endprocedure
*
*--#] rewirela : 
*--#[ rewirebe :
*
#procedure rewirebe
*
if ( count(intbe,1) );
  if ( ( count(epp3,1) == 0 ) && ( count(p3.p3,1) >= 0 ) );
	Multiply replace_(p1,-p3,p3,-p1,p2,-p2,p4,-p5,p5,-p4,p6,-p7,p7,-p6,Q,-Q,
		epp1,epp3,epp3,epp1,epp4,epp5,epp5,epp4,epp6,epp7,epp7,epp6);
	Multiply replace_(p2,p1,p3,p6,p4,p7,p5,p3,p6,p2,p7,p4,p8,p5,p1,p9,
		epp2,epp1,epp3,epp6,epp4,epp7,epp5,epp3,epp6,epp2,epp7,epp4,epp8,epp5,
		intbe,intbu);
	id	p9 = Q+p3;
  elseif ( ( count(epp1,1) == 0 ) && ( count(p1.p1,1) >= 0 ) );
	Multiply replace_(p2,p1,p3,p6,p4,p7,p5,p3,p6,p2,p7,p4,p8,p5,p1,p9,
		epp2,epp1,epp3,epp6,epp4,epp7,epp5,epp3,epp6,epp2,epp7,epp4,epp8,epp5,
		intbe,intbu);
	id	p9 = Q+p3;
  elseif ( ( count(epp8,1) == 0 ) && ( count(p8.p8,1) >= 0 ) );
	Multiply replace_(intbe,intfa);
	id	p8 = p6-p7;
  elseif ( ( count(epp2,1) == 0 ) && ( count(p2.p2,1) >= 0 ) );
	Multiply replace_(p3,p2,p4,p3,p5,p4,p8,-p5,p6,-p6,p7,-p7,p2,p9,
		epp3,epp2,epp4,epp3,epp5,epp4,epp8,epp5,intbe,into1);
	id	p9 = p1-p6;
  elseif ( ( count(epp5,1) == 0 ) && ( count(p5.p5,1) >= 0 ) );
	Multiply replace_(p3,p6,p7,p3,p6,-p5,p8,-p4,p4,-p7,p5,p9,
		epp3,epp6,epp7,epp3,epp6,epp5,epp8,epp4,epp4,epp7,intbe,into4);
	id	p9 = p1-Q;
  elseif ( ( count(epp4,1) == 0 ) && ( count(p4.p4,1) >= 0 ) );
	Multiply replace_(p1,p6,p2,p1,p3,p2,p8,p3,p6,p4,p7,p5,p5,-p7,p4,p9,
		epp1,epp6,epp2,epp1,epp3,epp2,epp8,epp3,epp6,epp4,epp7,epp5,epp5,epp7,
		intbe,into4);
	id	p9 = p2-Q;
  elseif ( ( count(epp6,1) == 0 ) && ( count(p6.p6,1) >= 0 ) );
	Multiply replace_(p4,p1,p5,p2,p1,p3,p3,p4,p8,p5,p2,p6,p7,-p7,p6,p9,Q,-Q,
		epp4,epp1,epp5,epp2,epp1,epp3,epp3,epp4,epp8,epp5,epp2,epp6,intbe,into2);
	id	p9 = p5-p7;
  elseif ( ( count(epp7,1) == 0 ) && ( count(p7.p7,1) >= 0 ) );
	Multiply replace_(p5,-p1,p4,-p2,p3,-p3,p1,-p4,p8,p5,p2,-p6,p6,p7,p7,p9,
		epp5,epp1,epp4,epp2,epp1,epp4,epp8,epp5,epp2,epp6,epp6,epp7,intbe,into2);
	id	p9 = p7-p5;
  endif;
endif;
*
#endprocedure
*
*--#] rewirebe : 
*--#[ rewirefa :
*
#procedure rewirefa
*
if ( count(intfa,1) );
	if ( ( count(epp1,1) == 0 ) && ( count(p1.p1,1) >= 0 ) );
		Multiply replace_(p2,p1,p3,p2,p4,p3,p5,p6,p6,p7,p7,p5,p1,p9,
			epp2,epp1,epp3,epp2,epp4,epp3,epp5,epp6,epp6,epp7,epp7,epp5,
			intfa,into2);
		id	p9 = Q+p6;
	elseif ( ( count(epp3,1) == 0 ) && ( count(p3.p3,1) >= 0 ) );
		Multiply replace_(p1,-p3,p3,-p1,p2,-p2,p4,-p5,p5,-p4,p6,-p7,p7,-p6,Q,-Q,
			epp1,epp3,epp3,epp1,epp4,epp5,epp5,epp4,epp6,epp7,epp7,epp6);
		Multiply replace_(p2,p1,p3,p2,p4,p3,p5,p6,p6,p7,p7,p5,p1,p9,
			epp2,epp1,epp3,epp2,epp4,epp3,epp5,epp6,epp6,epp7,epp7,epp5,
			intfa,into2);
		id	p9 = Q+p6;
	elseif ( ( count(epp2,1) == 0 ) && ( count(p2.p2,1) >= 0 ) );
		Multiply replace_(p3,p2,p4,p3,p5,p4,p6,-p6,p2,p9,
			epp3,epp2,epp4,epp3,epp5,epp4,intfa,into1);
		id	p9 = p1-p6;
	elseif ( ( count(epp6,1) == 0 ) && ( count(p6.p6,1) >= 0 ) );
		Multiply replace_(p1,p5,p5,-p6,p2,p3,p7,-p4,p3,p1,p4,-p2,p6,p9,
			epp1,epp5,epp5,epp6,epp2,epp3,epp7,epp4,epp3,epp1,epp4,epp2
			,intfa,inty4);
		id	p9 = p3-p5;
	elseif ( ( count(epp7,1) == 0 ) && ( count(p7.p7,1) >= 0 ) );
		Multiply replace_(p3,p5,p4,-p6,p5,-p2,p2,p3,p6,-p4,p7,p9,
			epp3,epp5,epp4,epp6,epp5,epp2,epp2,epp3,epp6,epp4,intfa,inty4);
		id	p9 = p3-p5;
	elseif ( ( count(epp4,1) == 0 ) && ( count(p4.p4,1) >= 0 ) );
		Multiply replace_(p3,p5,p7,p6,p2,p3,p6,-p4,p5,-p2,p4,p9,
			epp3,epp5,epp7,epp6,epp2,epp3,epp6,epp4,epp5,epp2,intfa,inty3);
		id	p9 = p5-Q;
	elseif ( ( count(epp5,1) == 0 ) && ( count(p5.p5,1) >= 0 ) );
		Multiply replace_(p1,p5,p2,p3,p7,-p4,p3,p1,p4,-p2,p5,p9,
			epp1,epp5,epp2,epp3,epp7,epp4,epp3,epp1,epp4,epp2,intfa,inty3);
		id	p9 = p5-Q;
	endif;
endif;
*
#endprocedure
*
*--#] rewirefa : 
*--#[ rewirebu :
*
#procedure rewirebu
*
if ( count(intbu,1) );
	if ( ( count(epp1,1) == 0 ) && ( count(p1.p1,1) >= 0 ) );
		Multiply replace_(p4,p5,p2,-p6,p5,-p3,p3,-p4,p7,-p1,p6,p2,p1,p9,
			epp4,epp5,epp2,epp6,epp5,epp3,epp3,epp4,epp7,epp1,epp6,epp2
			,intbu,inty3);
		id	p9 = p2+p5;
	elseif ( ( count(epp2,1) == 0 ) && ( count(p2.p2,1) >= 0 ) );
		Multiply replace_(p1,p4,p4,-p3,p6,p1,p5,-p5,p3,-p6,p7,-p2,p2,p9,
			epp1,epp4,epp4,epp3,epp6,epp1,epp3,epp6,epp7,epp2,intbu,inty1);
		id	p9 =-p3-p5;
	elseif ( ( count(epp3,1) == 0 ) && ( count(p3.p3,1) >= 0 ) );
		Multiply replace_(p1,-p3,p3,-p1,p4,p5,p5,p4,p6,-p7,p7,-p6,
			epp1,epp3,epp3,epp1,epp4,epp5,epp5,epp4,epp6,epp7,epp7,epp6);
		Multiply replace_(p4,p5,p2,-p6,p5,-p3,p3,-p4,p7,-p1,p6,p2,p1,p9,
			epp4,epp5,epp2,epp6,epp5,epp3,epp3,epp4,epp7,epp1,epp6,epp2
			,intbu,inty3);
		id	p9 = p2+p5;
	elseif ( ( count(epp4,1) == 0 ) && ( count(p4.p4,1) >= 0 ) );
		Multiply replace_(p1,-p3,p3,-p1,p4,p5,p5,p4,p6,-p7,p7,-p6,
			epp1,epp3,epp3,epp1,epp4,epp5,epp5,epp4,epp6,epp7,epp7,epp6);
		Multiply replace_(p6,p2,p7,p3,p2,p6,p3,p7,p4,p5,p5,p9,
			epp6,epp2,epp7,epp3,epp2,epp6,epp3,epp7,epp4,epp5,intbu,into2);
		id	p9 = p6-p5;
	elseif ( ( count(epp5,1) == 0 ) && ( count(p5.p5,1) >= 0 ) );
		Multiply replace_(p6,p2,p7,p3,p2,p6,p3,p7,p4,p5,p5,p9,
			epp6,epp2,epp7,epp3,epp2,epp6,epp3,epp7,epp4,epp5,intbu,into2);
		id	p9 = p6-p5;
	elseif ( ( count(epp6,1) == 0 ) && ( count(p6.p6,1) >= 0 ) );
		Multiply replace_(p1,-p3,p3,-p1,p4,p5,p5,p4,p6,-p7,p7,-p6,
			epp1,epp3,epp3,epp1,epp4,epp5,epp5,epp4,epp6,epp7,epp7,epp6);
		Multiply replace_(p6,p2,p5,p3,p2,p4,p4,p5,p3,-p7,p7,p9,
			epp6,epp2,epp5,epp3,epp2,epp4,epp4,epp5,epp3,epp7,intbu,into4);
		id	p9 = p2-Q;
	elseif ( ( count(epp7,1) == 0 ) && ( count(p7.p7,1) >= 0 ) );
		Multiply replace_(p6,p2,p5,p3,p2,p4,p4,p5,p3,-p7,p7,p9,
			epp6,epp2,epp5,epp3,epp2,epp4,epp4,epp5,epp3,epp7,intbu,into4);
		id	p9 = p2-Q;
	endif;
endif;
*
#endprocedure
*
*--#] rewirebu : 
*--#[ rewireno :
*
#procedure rewireno
*
if ( count(intno,1) );
	if ( ( count(epp1,1) == 0 ) && ( count(p1.p1,1) >= 0 ) );
		Multiply replace_(p2,p1,p3,p6,p4,p7,p7,p3,p6,p2,p8,p4,p1,p9,
			epp2,epp1,epp3,epp6,epp4,epp7,epp7,epp3,epp6,epp2,epp8,epp4
			,intno,intbu);
		id	p9 = Q+p2;
	elseif ( ( count(epp2,1) == 0 ) && ( count(p2.p2,1) >= 0 ) );
		Multiply replace_(p1,-p6,p6,-p1,p3,-p4,p4,-p3,p2,-p5,p5,-p2,p7,p8,p8,p7,
			epp1,epp6,epp6,epp1,epp3,epp4,epp4,epp3,epp2,epp5,epp5,epp2,epp7,epp8,epp8,epp7);
		Multiply replace_(p6,p5,p7,p6,p8,p7,p5,p9,
			epp6,epp5,epp7,epp6,epp8,epp7,intno,intfa);
		id	p9 = p4-p6;
	elseif ( ( count(epp3,1) == 0 ) && ( count(p3.p3,1) >= 0 ) );
		Multiply replace_(p1,-p3,p3,-p1,p4,-p6,p6,-p4,p2,-p2,p5,-p5,p7,-p8,p8,-p7,
			epp1,epp3,epp3,epp1,epp4,epp6,epp6,epp4,epp7,epp8,epp8,epp7,Q,-Q);
		Multiply replace_(p2,p1,p3,p6,p4,p7,p7,p3,p6,p2,p8,p4,p1,p9,
			epp2,epp1,epp3,epp6,epp4,epp7,epp7,epp3,epp6,epp2,epp8,epp4
			,intno,intbu);
		id	p9 = Q+p2;
	elseif ( ( count(epp4,1) == 0 ) && ( count(p4.p4,1) >= 0 ) );
		Multiply replace_(p1,p4,p4,p1,p3,p6,p6,p3,p2,p5,p5,p2,p7,-p7,p8,-p8,Q,-Q,
			epp1,epp4,epp4,epp1,epp3,epp6,epp6,epp3,epp2,epp5,epp5,epp2);
		Multiply replace_(p2,p1,p3,p6,p4,p7,p7,p3,p6,p2,p8,p4,p1,p9,
			epp2,epp1,epp3,epp6,epp4,epp7,epp7,epp3,epp6,epp2,epp8,epp4
			,intno,intbu);
		id	p9 = Q+p2;
	elseif ( ( count(epp5,1) == 0 ) && ( count(p5.p5,1) >= 0 ) );
		Multiply replace_(p6,p5,p7,p6,p8,p7,p5,p9,
			epp6,epp5,epp7,epp6,epp8,epp7,intno,intfa);
		id	p9 = p4-p6;
	elseif ( ( count(epp6,1) == 0 ) && ( count(p6.p6,1) >= 0 ) );
		Multiply replace_(p1,-p6,p6,-p1,p5,p7,p7,p5,p2,-p8,p8,-p2,
			epp1,epp6,epp6,epp1,epp5,epp7,epp7,epp5,epp2,epp8,epp8,epp2);
		Multiply replace_(p2,p1,p3,p6,p4,p7,p7,p3,p6,p2,p8,p4,p1,p9,
			epp2,epp1,epp3,epp6,epp4,epp7,epp7,epp3,epp6,epp2,epp8,epp4
			,intno,intbu);
		id	p9 = Q+p2;
	elseif ( ( count(epp7,1) == 0 ) && ( count(p7.p7,1) >= 0 ) );
		Multiply replace_(p1,-p6,p6,-p1,p5,p7,p7,p5,p2,-p8,p8,-p2,
			epp1,epp6,epp6,epp1,epp5,epp7,epp7,epp5,epp2,epp8,epp8,epp2);
		Multiply replace_(p6,p5,p7,p6,p8,p7,p5,p9,
			epp6,epp5,epp7,epp6,epp8,epp7,intno,intfa);
		id	p9 = p4-p6;
	elseif ( ( count(epp8,1) == 0 ) && ( count(p8.p8,1) >= 0 ) );
		Multiply replace_(p3,-p4,p4,-p3,p5,p8,p8,p5,p2,-p7,p7,-p2,
			epp3,epp4,epp4,epp3,epp5,epp8,epp8,epp5,epp2,epp7,epp7,epp2);
		Multiply replace_(p6,p5,p7,p6,p8,p7,p5,p9,
			epp6,epp5,epp7,epp6,epp8,epp7,intno,intfa);
		id	p9 = p4-p6;
	endif;
endif;
*
#endprocedure
*
*--#] rewireno : 
*--#[ values :
*
*	Here are the substitutions of the master constants
*	We still have to check the NO integral etc as they may not be correct.
*	(correct scheme?)
*
#procedure subvalues
*
id	BasicNOIntegral = GschemeConstants(0,0)^3*ep^3*
		(20*z5+50*z6*ep+68*z3^2*ep+450*z7*ep^2+204*z3*z4*ep^2+ep^3*zz5)*(1+2*ep+4*ep^2);
id	BasicT1Integral = GschemeConstants(0,0)^2*
		(1-2*ep)*(6*z3+9*z4*ep+102*z5*ep^2+240*z6*ep^3-186*ep^3*z3^2
				+1413*ep^4*z7-639*ep^4*z3*z4+288*ep^5*z6z2+25701/8*ep^5*z8
				-486*ep^5*z4^2-5880*ep^5*z3*z5);
id	GschemeConstants(2,0) = GschemeConstants(0,0)*(
		1
      +ep*(2)
      +ep^2*(8)
      +ep^3*(32-16*z3)
      +ep^4*(128-24*z4-32*z3)
      +ep^5*(512-192*z5-48*z4-128*z3)
      +ep^6*(2048-440*z6-384*z5-192*z4-512*z3+128*z3^2)
      +ep^7*(8192-2304*z7-880*z6-1536*z5-768*z4-2048*z3+384*z3*z4+256*z3^2
		));
id	GschemeConstants(1,0) = GschemeConstants(0,0)*(
		1
      +ep*(1)
      +ep^2*(3)
      +ep^3*(9-6*z3)
      +ep^4*(27-9*z4-6*z3)
      +ep^5*(81-42*z5-9*z4-18*z3)
      +ep^6*(243-90*z6-42*z5-27*z4-54*z3+18*z3^2)
      +ep^7*(729-294*z7-90*z6-126*z5-81*z4-162*z3+54*z3*z4+18*z3^2
		));
#ifdef `MSBAR'
#message Answer in MS-bar
id	GschemeConstants(0,0)^3 = epp^3*(1
      +ep*(6)
      +ep^2*(24)
      +ep^3*(80-7*z3)
      +ep^4*(240-39/4*z4-42*z3)
      +ep^5*(672-93/5*z5-117/2*z4-168*z3)
      +ep^6*(1792-61/2*z6-558/5*z5-234*z4-560*z3+49/2*z3^2)
      +ep^7*(4608-381/7*z7-183*z6-2232/5*z5-780*z4-1680*z3+273/4*z3*z4+
         147*z3^2));
id	GschemeConstants(0,0)^2 = epp^2*(1
      +ep*(4)
      +ep^2*(12)
      +ep^3*(32-14/3*z3)
      +ep^4*(80-13/2*z4-56/3*z3)
      +ep^5*(192-62/5*z5-26*z4-56*z3)
      +ep^6*(448-61/3*z6-248/5*z5-78*z4-448/3*z3+98/9*z3^2)
      +ep^7*(1024-254/7*z7-244/3*z6-744/5*z5-208*z4-1120/3*z3+91/3*z3*
         z4+392/9*z3^2));
id	GschemeConstants(0,0) = epp*(1
      +ep*(2)
      +ep^2*(4)
      +ep^3*(8-7/3*z3)
      +ep^4*(16-13/4*z4-14/3*z3)
      +ep^5*(32-31/5*z5-13/2*z4-28/3*z3)
      +ep^6*(64-61/6*z6-62/5*z5-13*z4-56/3*z3+49/18*z3^2)
      +ep^7*(128-127/7*z7-61/3*z6-124/5*z5-26*z4-112/3*z3+91/12*z3*z4+
         49/9*z3^2));
#else
#message Answer in the Gscheme
id	GschemeConstants(0,0) = epp;
#endif
id	epp = 1/ep;
*
#endprocedure
*
*--#] values : 
*--#[ expansion :
*
#procedure expansion(maxeppow)
*
*	Expands the PolyRatFun to sufficient powers in ep.
*
.sort:expansion-1;
PolyRatFun;
id	rat(x1?,x2?) = num(x1)*den(x2);
SplitArg,den;
id	den(?a,x1?) = den(x1,?a);
repeat id den(x1?,x2?,x3?,?a) = den(x1,x2+x3,?a);
id	den(x1?,x2?) = den(1,x2/x1)/x1;
id	den(x1?) = 1/x1;
.sort:expansion-2;
id	num(x1?) = x1;
if ( count(ep,1) > `maxeppow' ) discard;
repeat;
	id den(1,x?) = 1-x*den(1,x);
	if ( count(ep,1) > `maxeppow' ) discard;
endrepeat;
.sort:expansion-3;
Symbol ep(:`maxeppow');
#call subvalues
*
#endprocedure
*
*--#] expansion : 
*--#[ propagators :
*
*	The prefabricated one-, two- and threeloop propagators for the fermion,
*	the ghost and the gluon. This makes some calculations much faster.
*	We include the full powers of the gauge parameter as defined by the
*	gluon propagator  -(d_(mu,nu)-xi*q(mu)*q(nu)/q.q)/q.q
*	Note that sometimes people use (1-xi). We don't.
*
*	The multiloop propagators contain the one loop reducible parts as in
*	gluon3 = gluon3(1pir)+gluon1^3+gluon2(1pir)*gluon1
*	       = gluon3(1pir)-gluon1^3+gluon2(red)*gluon1
*
#procedure propagators
*
*	The three loop fermion propagator
*
id	quark3 =
      +cf*nf^2*(
         +GschemeConstants(0,0)^2*GschemeConstants(2,0)*rat(4*ep^4-12*
         ep^3+12*ep^2-4*ep,24*ep^3-36*ep^2-6*ep+9)
         )
      +cf*ca*nf*(
         +GschemeConstants(0,0)*BasicT1Integral*rat(8*ep^6-10*ep^5+5*
         ep^4-6*ep^3+4*ep^2,12*ep^3-16*ep^2-5*ep+3)
         +GschemeConstants(0,0)*xi*BasicT1Integral*rat(-ep^4+2*ep^3-
         ep^2,2*ep-3)
         +GschemeConstants(0,0)^2*GschemeConstants(1,0)*rat(-8*ep^6+4*
         ep^5+14*ep^4-7*ep^3-6*ep^2-6*ep+7,8*ep^4-14*ep^2-6*ep)
         +GschemeConstants(0,0)^2*GschemeConstants(2,0)*rat(4*ep^6-40*
         ep^5+119*ep^4-143*ep^3+86*ep^2-31*ep+7,24*ep^4-36*ep^3-6*ep^2+
         9*ep)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*GschemeConstants(
         2,0)*xi*rat(12*ep^5-25*ep^4+13*ep^3-2*ep^2+5*ep-3,36*ep^4-24*
         ep^3-63*ep^2+15*ep+18)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*GschemeConstants(
         2,0)*rat(-48*ep^9+400*ep^8-1224*ep^7+1420*ep^6-549*ep^5+143*
         ep^4-446*ep^3+419*ep^2-137*ep+14,432*ep^7-648*ep^6-444*ep^5+
         762*ep^4-60*ep^3-150*ep^2+36*ep)
         )
      +cf*ca^2*(
         +BasicNOIntegral*rat(-ep^4-ep^3+2*ep,8*ep-2)
         +GschemeConstants(0,0)*BasicT1Integral*rat(352*ep^9-112*ep^8-
         1688*ep^7+1820*ep^6-236*ep^5-24*ep^4-65*ep^3-74*ep^2+27*ep,192
         *ep^4-304*ep^3-16*ep^2+68*ep-12)
         +GschemeConstants(0,0)*xi*BasicT1Integral*rat(24*ep^7-4*ep^6-
         80*ep^5-2*ep^4+87*ep^3-25*ep^2,48*ep^3-64*ep^2-20*ep+12)
         +GschemeConstants(0,0)*xi^2*BasicT1Integral*rat(-2*ep^4+ep^3+2
         *ep^2-ep,32*ep+16)
         +GschemeConstants(0,0)^3*xi*rat(-3*ep^3+7*ep^2-5*ep+1,4*ep^2)
         +GschemeConstants(0,0)^3*rat(4*ep^5+16*ep^4-5*ep^3-33*ep^2+22*
         ep-4,4*ep^2)
         +GschemeConstants(0,0)^2*GschemeConstants(1,0)*xi*rat(32*ep^7-
         48*ep^6-128*ep^5+148*ep^4-4*ep^3+17*ep^2-20*ep+3,64*ep^5+64*
         ep^4-16*ep^3-16*ep^2)
         +GschemeConstants(0,0)^2*GschemeConstants(1,0)*xi^2*rat(20*
         ep^6-8*ep^5-19*ep^4+5*ep^3+6*ep^2-5*ep+1,64*ep^4+96*ep^3+32*
         ep^2)
         +GschemeConstants(0,0)^2*GschemeConstants(1,0)*rat(1088*ep^10-
         1536*ep^9-3904*ep^8+6224*ep^7+1860*ep^6-5472*ep^5+2214*ep^4-
         437*ep^3-247*ep^2+261*ep-51,256*ep^7-192*ep^6-416*ep^5+144*
         ep^4+88*ep^3-24*ep^2)
         +GschemeConstants(0,0)^2*GschemeConstants(2,0)*xi*rat(-56*ep^6
         +508*ep^5-842*ep^4+491*ep^3-83*ep^2-28*ep+10,96*ep^4-24*ep^2)
         +GschemeConstants(0,0)^2*GschemeConstants(2,0)*xi^2*rat(-124*
         ep^5+168*ep^4+2*ep^3-66*ep^2+21*ep-1,96*ep^3+48*ep^2)
         +GschemeConstants(0,0)^2*GschemeConstants(2,0)*xi^3*rat(4*ep^4
         -6*ep^3+ep^2+ep,96*ep+48)
         +GschemeConstants(0,0)^2*GschemeConstants(2,0)*rat(-704*ep^8+
         800*ep^7+1276*ep^6-328*ep^5-2320*ep^4+898*ep^3+703*ep^2-334*ep
         +9,96*ep^5-144*ep^4-24*ep^3+36*ep^2)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*GschemeConstants(
         2,0)*xi*rat(-864*ep^11-25056*ep^10+119248*ep^9-196472*ep^8+
         131346*ep^7-5164*ep^6-38882*ep^5+15885*ep^4+2681*ep^3-3651*
         ep^2+1031*ep-102,6912*ep^9-13824*ep^8-1920*ep^7+15744*ep^6-
         7056*ep^5-1920*ep^4+1776*ep^3-288*ep^2)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*GschemeConstants(
         2,0)*xi^2*rat(768*ep^7-1170*ep^6-175*ep^5+891*ep^4-232*ep^3-
         123*ep^2+39*ep+2,576*ep^5+480*ep^4-288*ep^3-192*ep^2)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*GschemeConstants(
         2,0)*xi^3*rat(-16*ep^5+6*ep^4+29*ep^3-16*ep^2-7*ep+4,96*ep^2+
         144*ep+48)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*GschemeConstants(
         2,0)*rat(7680*ep^12-14144*ep^11+18256*ep^10-75768*ep^9+97884*
         ep^8+40894*ep^7-168480*ep^6+124955*ep^5-23674*ep^4-15936*ep^3+
         10536*ep^2-2401*ep+198,3456*ep^9-6912*ep^8-960*ep^7+7872*ep^6-
         3528*ep^5-960*ep^4+888*ep^3-144*ep^2)
         )
      +cf^2*nf*(
         +GschemeConstants(0,0)^2*GschemeConstants(1,0)*rat(-4*ep+16*
         ep^2-20*ep^3+8*ep^4,6-13*ep+6*ep^2)
         +GschemeConstants(0,0)^2*GschemeConstants(2,0)*rat(-8*ep^5+16*
         ep^4-6*ep^3-28*ep^2+50*ep-24,24*ep^3-36*ep^2-6*ep+9)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*GschemeConstants(
         2,0)*xi*rat(3*ep^4-7*ep^3+5*ep^2-ep,3*ep^2+ep-2)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*GschemeConstants(
         2,0)*rat(-20*ep^6+72*ep^5-129*ep^4+133*ep^3-19*ep^2-85*ep+48,
         36*ep^4-24*ep^3-63*ep^2+15*ep+18)
         )
      +cf^2*ca*(
         +BasicNOIntegral*rat(3*ep^4+3*ep^3-6*ep,8*ep-2)
         +GschemeConstants(0,0)*BasicT1Integral*rat(-66*ep^7-53*ep^6+
         160*ep^5+22*ep^4-84*ep^3+21*ep^2,12*ep^2-7*ep+1)
         +GschemeConstants(0,0)*xi*BasicT1Integral*rat(-2*ep^4+3*ep^3-3
         *ep^2+2*ep,2)
         +GschemeConstants(0,0)^3*rat(-3+10*ep+2*ep^2-7*ep^3-2*ep^4,ep)
         +GschemeConstants(0,0)^2*GschemeConstants(1,0)*xi*rat(-2+9*ep-
         21*ep^2+22*ep^3-8*ep^4,4*ep^2)
         +GschemeConstants(0,0)^2*GschemeConstants(1,0)*rat(-156+1124*
         ep-2331*ep^2-368*ep^3+5980*ep^4-4531*ep^5-2450*ep^6+3860*ep^7-
         1128*ep^8,12*ep-98*ep^2+264*ep^3-280*ep^4+96*ep^5)
         +GschemeConstants(0,0)^2*GschemeConstants(2,0)*xi*rat(-18*ep^5
         -14*ep^4+49*ep^3-17*ep^2-2*ep+2,6*ep^2)
         +GschemeConstants(0,0)^2*GschemeConstants(2,0)*xi^2*rat(6*ep^3
         -11*ep^2+6*ep-1,2*ep)
         +GschemeConstants(0,0)^2*GschemeConstants(2,0)*rat(274*ep^6-
         455*ep^5-302*ep^4+398*ep^3+658*ep^2-780*ep+207,12*ep^3-24*ep^2
         +9*ep)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*GschemeConstants(
         2,0)*xi*rat(648*ep^7-1326*ep^6+545*ep^5+637*ep^4-797*ep^3+361*
         ep^2-72*ep+4,72*ep^5-12*ep^4-60*ep^3+24*ep^2)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*GschemeConstants(
         2,0)*xi^2*rat(-6*ep^5-31*ep^4+62*ep^3-17*ep^2-12*ep+4,8*ep^2+8
         *ep)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*GschemeConstants(
         2,0)*xi^3*rat(6*ep^4-5*ep^3-8*ep^2+9*ep-2,8*ep+8)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*GschemeConstants(
         2,0)*rat(-2952*ep^10+6048*ep^9-2960*ep^8+12673*ep^7-32111*ep^6
         +21139*ep^5+9639*ep^4-19916*ep^3+10852*ep^2-2664*ep+252,432*
         ep^7-1080*ep^6+420*ep^5+774*ep^4-828*ep^3+294*ep^2-36*ep)
         )
      +cf^3*(
         +BasicNOIntegral*rat(-ep^4-ep^3+2*ep,4*ep-1)
         +GschemeConstants(0,0)*BasicT1Integral*rat(44*ep^7+46*ep^6-112
         *ep^5-14*ep^4+48*ep^3-12*ep^2,12*ep^2-7*ep+1)
         +GschemeConstants(0,0)^3*rat(-4+3*ep^2+ep^3,1)
         +GschemeConstants(0,0)^2*GschemeConstants(1,0)*rat(-20+142*ep-
         288*ep^2-21*ep^3+522*ep^4-199*ep^5-324*ep^6+188*ep^7,-2*ep+15*
         ep^2-34*ep^3+24*ep^4)
         +GschemeConstants(0,0)^2*GschemeConstants(2,0)*xi*rat(3*ep^3-
         ep^2-3*ep+1,1)
         +GschemeConstants(0,0)^2*GschemeConstants(2,0)*rat(-95*ep^5+26
         *ep^4+110*ep^3+56*ep^2-141*ep+44,6*ep^2-3*ep)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*GschemeConstants(
         2,0)*xi*rat(-6*ep^4+5*ep^3+5*ep^2-5*ep+1,3*ep-2)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*GschemeConstants(
         2,0)*xi^2*rat(6*ep^3-11*ep^2+6*ep-1,2)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*GschemeConstants(
         2,0)*xi^3*rat(-6*ep^3+11*ep^2-6*ep+1,6)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*GschemeConstants(
         2,0)*rat(552*ep^8-1082*ep^7+1338*ep^6-2763*ep^5+4079*ep^4-3242
         *ep^3+1403*ep^2-313*ep+28,108*ep^5-216*ep^4+159*ep^3-51*ep^2+6
         *ep)
         );
*
*	The two loop fermion propagator
*
id	quark2 =
      +cf*nf*(
         +GschemeConstants(0,0)*GschemeConstants(1,0)*rat(-ep^3+2*ep^2-
         ep,3*ep^2+ep-2)
         )
      +cf^2*(
         +GschemeConstants(0,0)^2*rat(1-ep^2,1)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*xi*rat(-2*ep^2+3*
         ep-1,1)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*xi^2*rat(2*ep^2-3
         *ep+1,2)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*rat(2*ep^3-ep^2-2
         *ep+1,3*ep-2)
         )
      +ca*cf*(
         +GschemeConstants(0,0)^2*xi*rat(-2*ep^2+3*ep-1,2*ep)
         +GschemeConstants(0,0)^2*rat(ep^3+ep^2-3*ep+1,ep)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*xi*rat(6*ep^3-7*
         ep^2-ep+2,4*ep^2+4*ep)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*xi^2*rat(-2*ep^3+
         ep^2+3*ep-2,8*ep+8)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*rat(-9*ep^4+6*
         ep^3+13*ep^2-14*ep+4,6*ep^3+2*ep^2-4*ep)
         );
*
*	The one loop fermion propagator
*
id	quark1 =
      +cf*(
		+GschemeConstants(0,0)*xi*rat(-ep+1,1)
		+GschemeConstants(0,0)*rat(ep-1,1)
         );
*
*	The three loop ghost propagator
*
id	ghost3 =
      +ca*nf^2*(
         +GschemeConstants(0,0)^2*GschemeConstants(2,0)*rat(-ep^3+3*
         ep^2-3*ep+1,24*ep^3-36*ep^2-6*ep+9)
         )
      +ca^2*nf*(
         +GschemeConstants(0,0)*BasicT1Integral*rat(8*ep^5+2*ep^4-13*
         ep^3+4*ep^2,48*ep^3-64*ep^2-20*ep+12)
         +GschemeConstants(0,0)*xi*BasicT1Integral*rat(-4*ep^4+5*ep^3-
         ep^2,16*ep-24)
         +GschemeConstants(0,0)^2*GschemeConstants(1,0)*xi*rat(-1+2*ep-
         ep^2,-16+8*ep+24*ep^2)
         +GschemeConstants(0,0)^2*GschemeConstants(1,0)*rat(-10+24*ep-
         31*ep^2+31*ep^3-20*ep^4+4*ep^5,48*ep+40*ep^2-168*ep^3-64*ep^4+
         96*ep^5)
         +GschemeConstants(0,0)^2*GschemeConstants(2,0)*xi*rat(-ep^2+2*
         ep-1,96*ep^2-24)
         +GschemeConstants(0,0)^2*GschemeConstants(2,0)*rat(4*ep^5+12*
         ep^4-79*ep^3+109*ep^2-49*ep+5,96*ep^4-144*ep^3-24*ep^2+36*ep)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*GschemeConstants(
         2,0)*xi*rat(-108*ep^6+572*ep^5-789*ep^4+193*ep^3+287*ep^2-185*
         ep+30,576*ep^5-672*ep^4-816*ep^3+744*ep^2+168*ep-144)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*GschemeConstants(
         2,0)*rat(-24*ep^8+272*ep^7-1046*ep^6+768*ep^5+1145*ep^4-1900*
         ep^3+951*ep^2-184*ep+10,1728*ep^7-2592*ep^6-1776*ep^5+3048*
         ep^4-240*ep^3-600*ep^2+144*ep)
         )
      +ca^3*(
         +GschemeConstants(0,0)*BasicT1Integral*rat(-200*ep^5+264*ep^4+
         176*ep^3-105*ep^2-21*ep,384*ep^3-512*ep^2-160*ep+96)
         +GschemeConstants(0,0)*xi*BasicT1Integral*rat(448*ep^6-576*
         ep^5-512*ep^4+462*ep^3+ep^2-9*ep,768*ep^3-1024*ep^2-320*ep+192
         )
         +GschemeConstants(0,0)*xi^2*BasicT1Integral*rat(-116*ep^6-44*
         ep^5+45*ep^4+69*ep^3-2*ep^2-6*ep,768*ep^2+128*ep-128)
         +GschemeConstants(0,0)*xi^3*BasicT1Integral*rat(12*ep^6-8*ep^5
         -17*ep^4+ep^3+8*ep^2-2*ep,768*ep-256)
         +GschemeConstants(0,0)^3*xi*rat(-1+12*ep^2-24*ep^3,64*ep^2)
         +GschemeConstants(0,0)^3*xi^2*rat(2-4*ep-11*ep^2+24*ep^3,128*
         ep^2)
         +GschemeConstants(0,0)^3*xi^3*rat(2+ep-6*ep^2,256*ep)
         +GschemeConstants(0,0)^3*rat(1-8*ep+12*ep^2,32*ep^2)
         +GschemeConstants(0,0)^2*GschemeConstants(1,0)*xi*rat(14-25*ep
         -344*ep^2+679*ep^3-252*ep^4+1036*ep^5-1296*ep^6-352*ep^7,256*
         ep^2-128*ep^3-1408*ep^4+512*ep^5+1536*ep^6)
         +GschemeConstants(0,0)^2*GschemeConstants(1,0)*xi^2*rat(-22+25
         *ep+254*ep^2-243*ep^3-402*ep^4-24*ep^5+680*ep^6-592*ep^7+576*
         ep^8,512*ep^2-256*ep^3-2816*ep^4+1024*ep^5+3072*ep^6)
         +GschemeConstants(0,0)^2*GschemeConstants(1,0)*xi^3*rat(-1+4*
         ep+5*ep^2-8*ep^3,256*ep^2+256*ep^3)
         +GschemeConstants(0,0)^2*GschemeConstants(1,0)*rat(-18-67*ep+
         137*ep^2+259*ep^3+333*ep^4-1672*ep^5+916*ep^6-32*ep^7,-192*
         ep^2+224*ep^3+992*ep^4-1088*ep^5-896*ep^6+768*ep^7)
         +GschemeConstants(0,0)^2*GschemeConstants(2,0)*xi*rat(-128*
         ep^5-428*ep^4+595*ep^3-214*ep^2+6*ep+4,384*ep^4-96*ep^2)
         +GschemeConstants(0,0)^2*GschemeConstants(2,0)*xi^2*rat(314*
         ep^6-39*ep^5-38*ep^4-117*ep^3+77*ep^2-2,768*ep^4-192*ep^2)
         +GschemeConstants(0,0)^2*GschemeConstants(2,0)*xi^3*rat(48*
         ep^7-248*ep^6+58*ep^5+135*ep^4-55*ep^3-17*ep^2+11*ep-1,1536*
         ep^4-384*ep^2)
         +GschemeConstants(0,0)^2*GschemeConstants(2,0)*rat(-12*ep^6+64
         *ep^5+155*ep^4-543*ep^3+330*ep^2-12*ep-21,384*ep^5-576*ep^4-96
         *ep^3+144*ep^2)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*GschemeConstants(
         2,0)*xi*rat(14304*ep^10-109712*ep^9+214184*ep^8-88116*ep^7-
         121092*ep^6+134338*ep^5-41817*ep^4-1317*ep^3+2743*ep^2-317*ep-
         6,55296*ep^9-110592*ep^8-15360*ep^7+125952*ep^6-56448*ep^5-
         15360*ep^4+14208*ep^3-2304*ep^2)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*GschemeConstants(
         2,0)*xi^2*rat(-15936*ep^10+99088*ep^9-142872*ep^8+65052*ep^7+
         12142*ep^6-17368*ep^5+2681*ep^4+541*ep^3+211*ep^2-181*ep+26,
         55296*ep^8-27648*ep^7-56832*ep^6+40704*ep^5+4608*ep^4-8448*
         ep^3+1536*ep^2)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*GschemeConstants(
         2,0)*xi^3*rat(-1056*ep^9+344*ep^8+236*ep^7+258*ep^6-535*ep^5+
         35*ep^4+120*ep^3-22*ep^2-5*ep+1,9216*ep^6+6144*ep^5-5376*ep^4-
         1536*ep^3+768*ep^2)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*GschemeConstants(
         2,0)*rat(288*ep^10-120*ep^9+3048*ep^8-6098*ep^7-9278*ep^6+
         25313*ep^5-18747*ep^4+5589*ep^3-523*ep^2+12*ep-12,13824*ep^9-
         27648*ep^8-3840*ep^7+31488*ep^6-14112*ep^5-3840*ep^4+3552*ep^3
         -576*ep^2)
         )
      +cf*ca*nf*(
         +GschemeConstants(0,0)^2*GschemeConstants(2,0)*rat(-2*ep^4+5*
         ep^3-6*ep^2+5*ep-2,24*ep^3-6*ep)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*GschemeConstants(
         2,0)*rat(ep^4-4*ep^3+7*ep^2-6*ep+2,18*ep^3-3*ep^2-6*ep)
         );
*
*	The two loop ghost propagator
*
id	ghost2 =
      +ca*nf*(
         +GschemeConstants(0,0)*GschemeConstants(1,0)*rat(ep^2-2*ep+1,6
         *ep^2+2*ep-4)
         )
      +ca^2*(
         +GschemeConstants(0,0)^2*xi*rat(3-8*ep,16)
         +GschemeConstants(0,0)^2*xi^2*rat(-1-ep+4*ep^2,32*ep)
         +GschemeConstants(0,0)^2*rat(-1+4*ep,8*ep)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*xi*rat(-2*ep^3-49
         *ep^2+45*ep-8,48*ep^2+16*ep-32)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*xi^2*rat(8*ep^4+2
         *ep^3-3*ep^2+1,32*ep^2+32*ep)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*rat(-4*ep^3+21*
         ep^2-9*ep-2,24*ep^3+8*ep^2-16*ep)
         );
*
*	The one loop gluon propagator
*
*
*	The one loop ghost propagator
*
id	ghost1 =
      +ca*(
		+GschemeConstants(0,0)*xi*rat(-2*ep+1,4)
		+GschemeConstants(0,0)*rat(1,2)
         );
*
*	The three loop gluon propagator
*
id	gluon3 =
      +nf^3*(
         +GschemeConstants(0,0)^3*rat(8-24*ep+24*ep^2-8*ep^3,-27+54*ep-
         36*ep^2+8*ep^3)
         )
      +ca*nf^2*(
         +GschemeConstants(0,0)*BasicT1Integral*rat(-8*ep^7-12*ep^6+104
         *ep^5-140*ep^4+72*ep^3-12*ep^2,12*ep^4-52*ep^3+79*ep^2-48*ep+9
         )
         +GschemeConstants(0,0)^3*xi*rat(-2+4*ep-2*ep^2,9-12*ep+4*ep^2)
         +GschemeConstants(0,0)^3*rat(24-72*ep+88*ep^2-89*ep^3+96*ep^4-
         64*ep^5+16*ep^6,27*ep-81*ep^2+90*ep^3-44*ep^4+8*ep^5)
         +GschemeConstants(0,0)^2*GschemeConstants(1,0)*rat(-74+302*ep-
         398*ep^2+24*ep^3+418*ep^4-388*ep^5+136*ep^6-16*ep^7,-54+189*ep
         -180*ep^2-65*ep^3+210*ep^4-124*ep^5+24*ep^6)
         +GschemeConstants(0,0)^2*GschemeConstants(2,0)*xi*rat(-32*ep^4
         +58*ep^3-16*ep^2-14*ep+4,8*ep^3-20*ep^2+6*ep+9)
         +GschemeConstants(0,0)^2*GschemeConstants(2,0)*rat(352*ep^7-
         1660*ep^6+2886*ep^5-2022*ep^4+24*ep^3+700*ep^2-334*ep+48,96*
         ep^7-528*ep^6+1056*ep^5-840*ep^4+54*ep^3+243*ep^2-81*ep)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*GschemeConstants(
         2,0)*rat(168*ep^11-604*ep^10+1498*ep^9-5697*ep^8+12933*ep^7-
         12061*ep^6-461*ep^5+10102*ep^4-8682*ep^3+3416*ep^2-652*ep+48,
         432*ep^10-2160*ep^9+3120*ep^8+1020*ep^7-6327*ep^6+4272*ep^5+
         1560*ep^4-2970*ep^3+1215*ep^2-162*ep)
         )
      +ca^2*nf*(
         +BasicNOIntegral*rat(ep^4+3*ep^3-6*ep^2+4*ep-2,8*ep^2-14*ep+3)
         +GschemeConstants(0,0)*BasicT1Integral*rat(-1056*ep^10+912*
         ep^9+11912*ep^8-30064*ep^7+25648*ep^6-4253*ep^5-5868*ep^4+3798
         *ep^3-1008*ep^2+120*ep,576*ep^6-2160*ep^5+2504*ep^4-604*ep^3-
         526*ep^2+282*ep-36)
         +GschemeConstants(0,0)*xi*BasicT1Integral*rat(-96*ep^6+142*
         ep^5-29*ep^4-80*ep^3+31*ep^2,96*ep^4-272*ep^3+152*ep^2+84*ep-
         36)
         +GschemeConstants(0,0)*xi^2*BasicT1Integral*rat(-12*ep^6+2*
         ep^5+18*ep^4-9*ep^3+ep^2,96*ep^3-320*ep^2+312*ep-72)
         +GschemeConstants(0,0)^3*xi*rat(4+4*ep-9*ep^2-4*ep^3+4*ep^4,18
         *ep-24*ep^2+8*ep^3)
         +GschemeConstants(0,0)^3*xi^2*rat(1-7*ep+10*ep^2-4*ep^3,72*ep-
         96*ep^2+32*ep^3)
         +GschemeConstants(0,0)^3*rat(36-75*ep+203*ep^2-308*ep^3+180*
         ep^4-72*ep^5+48*ep^6-16*ep^7,-54*ep^2+108*ep^3-72*ep^4+16*ep^5
         )
         +GschemeConstants(0,0)^2*GschemeConstants(1,0)*xi*rat(46-251*
         ep+610*ep^2-473*ep^3-1556*ep^4+2344*ep^5+1920*ep^6-4048*ep^7+
         1472*ep^8,144*ep-264*ep^2-632*ep^3+1312*ep^4+128*ep^5-1024*
         ep^6+384*ep^7)
         +GschemeConstants(0,0)^2*GschemeConstants(1,0)*xi^2*rat(2-17*
         ep+80*ep^2-91*ep^3-90*ep^4+188*ep^5-72*ep^6,-144*ep+264*ep^2+
         56*ep^3-256*ep^4+96*ep^5)
         +GschemeConstants(0,0)^2*GschemeConstants(1,0)*rat(792-7560*ep
         +26719*ep^2-33233*ep^3-34154*ep^4+166678*ep^5-221140*ep^6+
         62412*ep^7+193400*ep^8-249376*ep^9+101952*ep^10+320*ep^11-6528
         *ep^12,216*ep^2-1404*ep^3+1476*ep^4+5336*ep^5-11520*ep^6+2816*
         ep^7+8256*ep^8-6784*ep^9+1536*ep^10)
         +GschemeConstants(0,0)^2*GschemeConstants(2,0)*xi*rat(768*ep^7
         -880*ep^6-1784*ep^5+1726*ep^4+527*ep^3-146*ep^2-314*ep+75,192*
         ep^5-576*ep^4+384*ep^3+144*ep^2-108*ep)
         +GschemeConstants(0,0)^2*GschemeConstants(2,0)*xi^2*rat(-16*
         ep^3+13*ep^2+5*ep-2,16*ep^2-16*ep-12)
         +GschemeConstants(0,0)^2*GschemeConstants(2,0)*rat(1536*ep^9-
         1440*ep^8-17272*ep^7+48940*ep^6-49826*ep^5+17037*ep^4+6395*
         ep^3-8356*ep^2+3612*ep-648,192*ep^7-864*ep^6+1248*ep^5-432*
         ep^4-324*ep^3+162*ep^2)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*GschemeConstants(
         2,0)*xi*rat(-9216*ep^12+22080*ep^11+91248*ep^10-342248*ep^9+
         307604*ep^8+112682*ep^7-336256*ep^6+171389*ep^5+6816*ep^4-
         34214*ep^3+11850*ep^2-1577*ep+66,6912*ep^10-17280*ep^9-5376*
         ep^8+37440*ep^7-12048*ep^6-22008*ep^5+13320*ep^4+1704*ep^3-
         2520*ep^2+432*ep)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*GschemeConstants(
         2,0)*xi^2*rat(-5184*ep^10+12024*ep^9+1828*ep^8-19718*ep^7+8583
         *ep^6+8042*ep^5-6765*ep^4+699*ep^3+714*ep^2-247*ep+24,1152*
         ep^8-2304*ep^7-2048*ep^6+5216*ep^5+600*ep^4-3368*ep^3+536*ep^2
         +552*ep-144)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*GschemeConstants(
         2,0)*rat(-46080*ep^15+14208*ep^14+573632*ep^13-1255504*ep^12+
         743608*ep^11+314708*ep^10-718658*ep^9+899578*ep^8-700144*ep^7-
         180063*ep^6+687025*ep^5-403785*ep^4+49473*ep^3+33650*ep^2-
         12768*ep+1296,20736*ep^13-96768*ep^12+116928*ep^11+95424*ep^10
         -295632*ep^9+124608*ep^8+146868*ep^7-147492*ep^6+21324*ep^5+
         22788*ep^4-10368*ep^3+1296*ep^2)
         )
      +ca^3*(
         +GschemeConstants(0,0)*BasicT1Integral*rat(960*ep^8-3640*ep^7+
         8068*ep^6-4198*ep^5-8687*ep^4+7698*ep^3+201*ep^2-966*ep,1152*
         ep^5-4032*ep^4+4000*ep^3-208*ep^2-1104*ep+288)
         +GschemeConstants(0,0)*xi*BasicT1Integral*rat(2640*ep^7-10984*
         ep^6+10076*ep^5+2970*ep^4-4646*ep^3+1357*ep^2-243*ep,768*ep^4-
         2176*ep^3+1216*ep^2+672*ep-288)
         +GschemeConstants(0,0)*xi^2*BasicT1Integral*rat(-392*ep^7+1984
         *ep^6-1882*ep^5-1196*ep^4+1331*ep^3-241*ep^2+18*ep,768*ep^4-
         2176*ep^3+1216*ep^2+672*ep-288)
         +GschemeConstants(0,0)*xi^3*BasicT1Integral*rat(-136*ep^7+116*
         ep^6-138*ep^5-257*ep^4+213*ep^3+38*ep^2-22*ep,1536*ep^3-2048*
         ep^2-640*ep+384)
         +GschemeConstants(0,0)*xi^4*BasicT1Integral*rat(-12*ep^7+24*
         ep^6-3*ep^5+19*ep^4+4*ep^3-29*ep^2+9*ep,1536*ep^2-2816*ep+768)
         +GschemeConstants(0,0)^3*xi*rat(63-454*ep+1466*ep^2-2448*ep^3+
         1744*ep^4-432*ep^5,288*ep^2-384*ep^3+128*ep^4)
         +GschemeConstants(0,0)^3*xi^2*rat(44-327*ep+780*ep^2-628*ep^3+
         160*ep^4,288*ep-384*ep^2+128*ep^3)
         +GschemeConstants(0,0)^3*xi^3*rat(2+2*ep-37*ep^2+102*ep^3-48*
         ep^4,-384*ep^2+256*ep^3)
         +GschemeConstants(0,0)^3*xi^4*rat(-1+2*ep^2-9*ep^3+6*ep^4,-768
         *ep^2+512*ep^3)
         +GschemeConstants(0,0)^3*rat(81+213*ep-1492*ep^2+2136*ep^3-
         1184*ep^4+224*ep^5,-432*ep^2+864*ep^3-576*ep^4+128*ep^5)
         +GschemeConstants(0,0)^2*GschemeConstants(1,0)*xi*rat(-678+
         5193*ep-18730*ep^2+22561*ep^3+21366*ep^4-36652*ep^5-50264*ep^6
         +97440*ep^7-54912*ep^8+11520*ep^9,1152*ep^2-2112*ep^3-5056*
         ep^4+10496*ep^5+1024*ep^6-8192*ep^7+3072*ep^8)
         +GschemeConstants(0,0)^2*GschemeConstants(1,0)*xi^2*rat(42-
         1379*ep+9792*ep^2-18651*ep^3-428*ep^4+19348*ep^5+16728*ep^6-
         69568*ep^7+80864*ep^8-42112*ep^9+7680*ep^10,2304*ep^2-4224*
         ep^3-10112*ep^4+20992*ep^5+2048*ep^6-16384*ep^7+6144*ep^8)
         +GschemeConstants(0,0)^2*GschemeConstants(1,0)*xi^3*rat(-14+47
         *ep+87*ep^2-281*ep^3+27*ep^4-134*ep^5+896*ep^6-1192*ep^7+912*
         ep^8-192*ep^9,-384*ep^2+448*ep^3+1984*ep^4-2176*ep^5-1792*ep^6
         +1536*ep^7)
         +GschemeConstants(0,0)^2*GschemeConstants(1,0)*xi^4*rat(-3+11*
         ep-6*ep^2+10*ep^3-30*ep^4+12*ep^5,384*ep^2-640*ep^3-512*ep^4+
         512*ep^5)
         +GschemeConstants(0,0)^2*GschemeConstants(1,0)*rat(-1746+3285*
         ep+8109*ep^2-20649*ep^3+20525*ep^4-45136*ep^5+73404*ep^6-49784
         *ep^7+6784*ep^8+6816*ep^9-2304*ep^10,-864*ep^2+2160*ep^3+2736*
         ep^4-10400*ep^5+4480*ep^6+6656*ep^7-6400*ep^8+1536*ep^9)
         +GschemeConstants(0,0)^2*GschemeConstants(2,0)*xi*rat(-4736*
         ep^7+10144*ep^6+6824*ep^5-29434*ep^4+21867*ep^3-5657*ep^2+350*
         ep+33,768*ep^6-2304*ep^5+1536*ep^4+576*ep^3-432*ep^2)
         +GschemeConstants(0,0)^2*GschemeConstants(2,0)*xi^2*rat(5248*
         ep^7-11818*ep^6+7915*ep^5-3378*ep^4+1514*ep^3-371*ep^2+10*ep+4
         ,768*ep^5-1152*ep^4-192*ep^3+288*ep^2)
         +GschemeConstants(0,0)^2*GschemeConstants(2,0)*xi^3*rat(256*
         ep^8-2456*ep^7+4328*ep^6-1784*ep^5+213*ep^4-193*ep^3+34*ep^2+
         49*ep-12,1536*ep^5-2304*ep^4-384*ep^3+576*ep^2)
         +GschemeConstants(0,0)^2*GschemeConstants(2,0)*xi^4*rat(-48*
         ep^8+312*ep^7-428*ep^6+118*ep^5-42*ep^4+47*ep^3+2*ep^2-20*ep+5
         ,3072*ep^5-4608*ep^4-768*ep^3+1152*ep^2)
         +GschemeConstants(0,0)^2*GschemeConstants(2,0)*rat(-128*ep^9+
         448*ep^8+1992*ep^7-6596*ep^6-4246*ep^5+29691*ep^4-31368*ep^3+
         8917*ep^2+2049*ep-873,768*ep^7-3456*ep^6+4992*ep^5-1728*ep^4-
         1296*ep^3+648*ep^2)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*GschemeConstants(
         2,0)*xi*rat(110592*ep^13-224256*ep^12-447200*ep^11+1967248*
         ep^10-2172872*ep^9+99828*ep^8+1277556*ep^7-786862*ep^6+155443*
         ep^5+28922*ep^4-73330*ep^3+52450*ep^2-15317*ep+1542,55296*
         ep^11-138240*ep^10-43008*ep^9+299520*ep^8-96384*ep^7-176064*
         ep^6+106560*ep^5+13632*ep^4-20160*ep^3+3456*ep^2)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*GschemeConstants(
         2,0)*xi^2*rat(-654336*ep^13+3558720*ep^12-6900928*ep^11+
         3833152*ep^10+4541760*ep^9-6874836*ep^8+2147208*ep^7+1051404*
         ep^6-774091*ep^5+46994*ep^4+82798*ep^3-29412*ep^2+4189*ep-222,
         110592*ep^11-276480*ep^10-86016*ep^9+599040*ep^8-192768*ep^7-
         352128*ep^6+213120*ep^5+27264*ep^4-40320*ep^3+6912*ep^2)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*GschemeConstants(
         2,0)*xi^3*rat(-92160*ep^13+225984*ep^12-110992*ep^11-99200*
         ep^10+147840*ep^9-65508*ep^8-17199*ep^7+21818*ep^6+3964*ep^5-
         7482*ep^4+1115*ep^3+684*ep^2-248*ep+24,55296*ep^10-55296*ep^9-
         125952*ep^8+110592*ep^7+69504*ep^6-71808*ep^5-1152*ep^4+11904*
         ep^3-2304*ep^2)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*GschemeConstants(
         2,0)*xi^4*rat(2112*ep^12-2448*ep^11-96*ep^10-2040*ep^9-1460*
         ep^8+2655*ep^7+642*ep^6-648*ep^5-573*ep^4+313*ep^3+42*ep^2-40*
         ep+5,36864*ep^9-12288*ep^8-92160*ep^7+12288*ep^6+54528*ep^5-
         11520*ep^4-8448*ep^3+2304*ep^2)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*GschemeConstants(
         2,0)*rat(-44352*ep^14+162672*ep^13-136568*ep^12-253356*ep^11+
         638882*ep^10-261420*ep^9-629106*ep^8+508895*ep^7+682949*ep^6-
         1209774*ep^5+670568*ep^4-113429*ep^3-30121*ep^2+13404*ep-1260,
         41472*ep^13-193536*ep^12+233856*ep^11+190848*ep^10-591264*ep^9
         +249216*ep^8+293736*ep^7-294984*ep^6+42648*ep^5+45576*ep^4-
         20736*ep^3+2592*ep^2)
         )
      +cf*nf^2*(
         +GschemeConstants(0,0)*BasicT1Integral*rat(48*ep^7-136*ep^6+
         152*ep^5-104*ep^4+56*ep^3-16*ep^2,36*ep^4-144*ep^3+197*ep^2-
         105*ep+18)
         +GschemeConstants(0,0)^3*rat(-16+40*ep-48*ep^2+40*ep^3-16*ep^4
         ,9*ep-12*ep^2+4*ep^3)
         +GschemeConstants(0,0)^2*GschemeConstants(1,0)*rat(-32+160*ep-
         304*ep^2+288*ep^3-144*ep^4+32*ep^5,-18*ep+51*ep^2-44*ep^3+12*
         ep^4)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*GschemeConstants(
         2,0)*rat(-216*ep^6+696*ep^5-760*ep^4+248*ep^3+80*ep^2-48*ep,
         324*ep^5-1512*ep^4+2637*ep^3-2127*ep^2+792*ep-108)
         )
      +cf*ca*nf*(
         +BasicNOIntegral*rat(-3*ep^4-9*ep^3+18*ep^2-12*ep+6,8*ep^2-14*
         ep+3)
         +GschemeConstants(0,0)*BasicT1Integral*rat(696*ep^9+192*ep^8-
         9958*ep^7+24328*ep^6-27550*ep^5+18560*ep^4-8340*ep^3+2360*ep^2
         -288*ep,144*ep^5-612*ep^4+932*ep^3-617*ep^2+177*ep-18)
         +GschemeConstants(0,0)^3*xi*rat(2-3*ep+3*ep^2-2*ep^3,-3*ep+2*
         ep^2)
         +GschemeConstants(0,0)^3*rat(24-36*ep+52*ep^2-64*ep^3+48*ep^4-
         40*ep^5+16*ep^6,9*ep^2-12*ep^3+4*ep^4)
         +GschemeConstants(0,0)^2*GschemeConstants(1,0)*xi*rat(4-16*ep+
         22*ep^2-14*ep^3+4*ep^4,6*ep-13*ep^2+6*ep^3)
         +GschemeConstants(0,0)^2*GschemeConstants(1,0)*rat(264-2796*ep
         +12592*ep^2-33134*ep^3+58399*ep^4-70340*ep^5+52857*ep^6-19662*
         ep^7+788*ep^8+1032*ep^9,-18*ep^2+159*ep^3-494*ep^4+684*ep^5-
         424*ep^6+96*ep^7)
         +GschemeConstants(0,0)^2*GschemeConstants(2,0)*xi*rat(-32*ep^5
         +42*ep^4-35*ep^3+17*ep^2+12*ep-4,4*ep^3-4*ep^2-3*ep)
         +GschemeConstants(0,0)^2*GschemeConstants(2,0)*rat(-584*ep^7-
         1180*ep^6+3974*ep^5-2965*ep^4+780*ep^3+273*ep^2-418*ep+120,24*
         ep^5-36*ep^4-6*ep^3+9*ep^2)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*GschemeConstants(
         2,0)*xi*rat(64*ep^6-212*ep^5+302*ep^4-162*ep^3-28*ep^2+44*ep-8
         ,12*ep^4-20*ep^3-ep^2+6*ep)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*GschemeConstants(
         2,0)*rat(19584*ep^12-37200*ep^11-99436*ep^10+392884*ep^9-
         555451*ep^8+457147*ep^7-251481*ep^6+81861*ep^5+4072*ep^4-19164
         *ep^3+8840*ep^2-1800*ep+144,2592*ep^10-13392*ep^9+26496*ep^8-
         24216*ep^7+8058*ep^6+2859*ep^5-3279*ep^4+1008*ep^3-108*ep^2)
         )
      +cf^2*nf*(
         +BasicNOIntegral*rat(2*ep^4+6*ep^3-12*ep^2+8*ep-4,8*ep^2-14*ep
         +3)
         +GschemeConstants(0,0)*BasicT1Integral*rat(-168*ep^8-972*ep^7+
         3776*ep^6-5108*ep^5+3960*ep^4-2040*ep^3+632*ep^2-80*ep,72*ep^4
         -198*ep^3+169*ep^2-55*ep+6)
         +GschemeConstants(0,0)^3*rat(-8*ep^5+16*ep^4-26*ep^3+26*ep^2-
         16*ep+8,2*ep^3-3*ep^2)
         +GschemeConstants(0,0)^2*GschemeConstants(1,0)*rat(-72*ep^7-
         496*ep^6+1950*ep^5-2664*ep^4+2078*ep^3-1072*ep^2+312*ep-36,16*
         ep^5-36*ep^4+20*ep^3-3*ep^2)
         +GschemeConstants(0,0)^2*GschemeConstants(2,0)*rat(196*ep^6+
         304*ep^5-1468*ep^4+1708*ep^3-1116*ep^2+456*ep-80,12*ep^4-24*
         ep^3+9*ep^2)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*GschemeConstants(
         2,0)*rat(-4392*ep^10+11208*ep^9-7744*ep^8-3480*ep^7+7806*ep^6-
         3580*ep^5-938*ep^4+1820*ep^3-876*ep^2+192*ep-16,648*ep^8-2700*
         ep^7+4410*ep^6-3669*ep^5+1653*ep^4-384*ep^3+36*ep^2)
         );
*
*	The two loop gluon propagator
*
id	gluon2 =
      +nf^2*(
         +GschemeConstants(0,0)^2*rat(4-8*ep+4*ep^2,9-12*ep+4*ep^2)
         )
      +cf*nf*(
         +GschemeConstants(0,0)^2*rat(4*ep^3-6*ep^2+6*ep-4,2*ep^2-3*ep)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*rat(-8*ep^4+28*
         ep^3-44*ep^2+32*ep-8,6*ep^3-13*ep^2+6*ep)
         )
      +ca*nf*(
         +GschemeConstants(0,0)^2*xi*rat(-1+ep,-3+2*ep)
         +GschemeConstants(0,0)^2*rat(-6-ep+7*ep^2+4*ep^3-4*ep^4,9*ep-
         12*ep^2+4*ep^3)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*xi*rat(6*ep^3-3*
         ep^2-5*ep+2,2*ep^2-ep-3)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*rat(2*ep^5-13*
         ep^4+ep^3+27*ep^2-21*ep+4,6*ep^4-7*ep^3-7*ep^2+6*ep)
         )
      +ca^2*(
         +GschemeConstants(0,0)^2*xi*rat(2-10*ep+25*ep^2-12*ep^3,-6*ep+
         4*ep^2)
         +GschemeConstants(0,0)^2*xi^2*rat(3-12*ep+6*ep^2,-12+8*ep)
         +GschemeConstants(0,0)^2*xi^3*rat(-ep,16)
         +GschemeConstants(0,0)^2*rat(-3+40*ep-46*ep^2+14*ep^3,18*ep-24
         *ep^2+8*ep^3)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*xi*rat(-86*ep^4+
         213*ep^3-96*ep^2-17*ep+8,24*ep^4-28*ep^3-28*ep^2+24*ep)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*xi^2*rat(36*ep^4-
         52*ep^3-5*ep^2+9*ep-6,16*ep^2-8*ep-24)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*xi^3*rat(-2*ep^3-
         ep^2-ep,16*ep+16)
         +GschemeConstants(0,0)*GschemeConstants(1,0)*rat(-6*ep^5+ep^4+
         44*ep^3-79*ep^2+30*ep+2,12*ep^4-14*ep^3-14*ep^2+12*ep)
         );
*
*	The one loop gluon propagator
*
id	gluon1 =
      +nf*(
         +GschemeConstants(0,0)*rat(-2*ep+2,2*ep-3)
         )
      +ca*(
         +GschemeConstants(0,0)*xi*rat(-4*ep+1,2)
         +GschemeConstants(0,0)*xi^2*rat(ep,4)
         +GschemeConstants(0,0)*rat(3*ep-5,2*ep-3)
         );
*
*	The next statement is needed for certain Y-topology diagrams that give
*	a single (1,1) and say quark1*gluon1
*
id	GschemeConstants(1,1)*GschemeConstants(0,0) =
			GschemeConstants(1,0)*GschemeConstants(2,0)*rat(1-3*ep,1-2*ep);
*
#endprocedure
*
*--#] propagators : 
*--#[ Replace routines :
*		#[ replace1 :
*
#procedure replace1(lhs,rhs,topo,num)

repeat;
  if ( count(int`topo',1) );
	id,once,`lhs' = `rhs';
	#call rewire`topo'
  endif;
endrepeat;

.sort:integ`topo'-`num';

#endprocedure
*
*		#] replace1 : 
*		#[ replace2 :
*
#procedure replace2(lhs,rhs,topo,num)

#$repcount = 1;
#do irep = 1,1
#$irep = 1;
  
  if ( count(int`topo',1) );
	id,once,`lhs' = `rhs';
	#call rewire`topo'
	if ( count(int`topo',1) );
		id,once,`lhs' = `rhs';
		#call rewire`topo'
	endif;
    if ( ( count(int`topo',1) > 0 ) && ( match(`lhs') > 0 ) ) $irep = 0;
  endif;
  ModuleOption,minimum,$irep;

  .sort:integ`topo'-`num'-`$repcount++';

  #redefine irep "`$irep'"

#enddo

#endprocedure
*
*		#] replace2 : 
*		#[ replaceAB1 :
*
#procedure replaceAB1(lhs,rhs,AB,topo,num)

repeat;
  if ( count(int`topo',1) );
	id,once,`lhs' = `rhs';
	#call rewire`topo'
  endif;
endrepeat;

AB+ `AB';
.sort:integ`topo'-`num';

#endprocedure
*
*		#] replaceAB1 : 
*		#[ replaceAB2 :
*
#procedure replaceAB2(lhs,rhs,AB,topo,num)

AB+ `AB';
.sort:integ`topo'-`num'-0;

#$repcount = 1;
#do irep = 1,1
#$irep = 1;

  if ( count(int`topo',1) );
	id,once,`lhs' = `rhs';
	#call rewire`topo'
	if ( count(int`topo',1) );
		id,once,`lhs' = `rhs';
		#call rewire`topo'
	endif;
	if ( count(int`topo',1) && match(`lhs') ) $irep = 0;
  endif;
  AB+ `AB';
  ModuleOption,minimum,$irep;

  .sort:integ`topo'-`num'-`$repcount++';

  #redefine irep "`$irep'"

#enddo

#endprocedure
*
*		#] replaceAB2 : 
*--#] Replace routines : 
*--#] Service routines : 
*--#[ Integrations :
*--#[ integt3 :
*
#procedure integt3
*
if ( count(intt3,1) );
  id  p2.p?!{p2} = Q.p-p1.p;
  id  p4.p?!{p4} = Q.p-p3.p;
endif;
.sort:integt3-1;
if ( count(intt3,1) );
  id  Q.p1 = p1.p1/2+Q.Q/2-p2.p2/2;
  id  Q.p3 = p3.p3/2+Q.Q/2-p4.p4/2;
endif;
.sort:integt3-2;
if ( count(intt3,1) );
  #do isum1 = 1,2
    if ( ( count(epp`isum1',1) == 0 ) && ( count(p`isum1'.p`isum1',1) >= 0 ) ) Discard;
  #enddo
endif;
#call IntOne(p3,p4,Q,t3,l1)
*
#endprocedure
*
*--#] integt3 : 
*--#[ integt2 :
*
#procedure integt2
*
if ( count(intt2,1) );
  id  p2.p?!{p2} =  Q.p-p1.p;
  id  p4.p?!{p4} = p1.p-p3.p;
endif;
.sort:integt2-1;
if ( count(intt2,1) );
  id  Q.p1 = p1.p1/2+Q.Q/2-p2.p2/2;
endif;
.sort:integt2-2;
if ( count(intt2,1) );
  id  p1.p3 = p1.p1/2+p3.p3/2-p4.p4/2;
endif;
.sort:integt2-3;
if ( count(intt2,1) );
  if ( ( count(epp2,1) == 0 ) && ( count(p2.p2,1) >= 0 ) ) Discard;
  if ( ( count(epp4,1) == 0 ) && ( count(p4.p4,1) >= 0 ) ) Discard;
endif;
#call IntOne(p3,p4,p1,t2,l1)
*
#endprocedure
*
*--#] integt2 : 
*--#[ integt1 :
*
#procedure integt1
*
#call rewiret1
.sort:integt1-0;
*
#call replace2(p4.p?!{p4},p1.p-Q.p,t1,1)
#call replace2(p3.p?!{p3},p2.p-Q.p,t1,2)
#call replace2(p5.p?!{p5},p1.p-p2.p,t1,3)
#call replaceAB2(Q.p1,p1.p1/2+Q.Q/2-p4.p4/2,Q.p1 p1.p1 Q.Q p4.p4,t1,4)
#call replaceAB2(Q.p2,p2.p2/2+Q.Q/2-p3.p3/2,Q.p2 p2.p2 Q.Q p3.p3,t1,5)
#call replaceAB2(p1.p2,p1.p1/2+p2.p2/2-p5.p5/2,p1.p2 p1.p1 p2.p2 p5.p5,t1,6)
#call rewiret1
if ( count(intt1,1) );
  if ( ( count(epp1,1,epp4,1,epp5,1) == 0 ) && ( count(epp2,1,epp3,1,epp5,1) != 0 ) );
	Multiply replace_(p1,-p2,p2,-p1,p3,-p4,p4,-p3,
			epp1,epp2,epp2,epp1,epp3,epp4,epp4,epp3,Q,-Q);
  endif;
  if ( count(epp2,1,epp3,1,epp5,1) == 0 );
	id	p1.p?!{p1} = p2.p+p5.p;
  elseif ( count(epp1,1,epp2,1,epp3,1,epp4,1) == 0 );
  else;
  endif;
endif;
.sort:integt1-7;
if ( count(intt1,1) );
  if ( count(epp2,1,epp3,1,epp5,1) == 0 );
*
*	Apply the triangle rule
*
	#call ntriangle(p5,p1,p4,p2,p3)
*
	#call rewiret1
*
  endif;
endif;
.sort:integt1-8;
if ( count(intt1,1) );
  if ( count(epp1,1,epp2,1,epp3,1,epp4,1) == 0 );
	id 1/p1.p1^n1?/p2.p2^n2?/p3.p3^n3?/p4.p4^n4?/p5.p5^n5?*epp5^x5? =
			T1(n1,n2,n3,n4,n5+x5*ep);
  endif;
endif;
#do integt1 = 1,1
#$integt1 = 1;
if ( count(intt1,1) );
  if ( count(epp1,1,epp2,1,epp3,1,epp4,1) == 0 );
	id T1(n1?pos_,n2?pos_,n3?pos_,n4?{>1},n5?) = -1/Q.Q/(n4-1)*(
      +T1(-1+n1,n2,n3,n4,n5)*num(1-n4)
      +T1(-1+n1,n2,n3,n4-1,1+n5)*num(-n5)
      +T1(n1,-1+n2,n3,n4-1,1+n5)*num(n5)
      +T1(n1,n2,n3,n4-1,n5)*num(5-n5-n4-2*n1-2*ep));
	if ( match(T1(n1?pos_,n2?pos_,n3?pos_,n4?{>1},n5?)) ) $integt1 = 0;
  endif;
endif;
id	num(x?number_) = x;
id	num(x?) = rat(x,1);
Moduleoption,minimum,$integt1;
.sort:integt1-9;
#redefine integt1 "`$integt1'"
#enddo
#do integt1 = 1,1
#$integt1 = 1;
if ( count(intt1,1) );
	id T1(n1?pos_,n2?pos_,n3?{>1},1,n5?) = -1/Q.Q/(n3-1)*(
      +T1(-1+n1,n2,n3-1,1,1+n5)*num(n5)
      +T1(n1,-1+n2,n3,1,n5)*num(1-n3)
      +T1(n1,-1+n2,n3-1,1,1+n5)*num(-n5)
      +T1(n1,n2,n3-1,1,n5)*num(5-n5-n3-2*n2-2*ep));
	if ( match(T1(n1?pos_,n2?pos_,n3?{>1},1,n5?)) ) $integt1 = 0;
endif;
id	num(x?number_) = x;
id	num(x?) = rat(x,1);
Moduleoption,minimum,$integt1;
.sort:integt1-10;
#redefine integt1 "`$integt1'"
#enddo
#do integt1 = 1,1
#$integt1 = 1;
if ( count(intt1,1) );
	id T1(n1?{>1},n2?pos_,1,1,n5?) = -1/Q.Q/(n1-1)*(
      +T1(n1,n2,1,0,n5)*num(-n1+1)
      +T1(n1-1,n2,0,1,1+n5)*num(n5)
      +T1(n1-1,n2,1,0,1+n5)*num(-n5)
      +T1(n1-1,n2,1,1,n5)*num(3-n5-n1-2*ep));
	if ( match(T1(n1?{>1},n2?pos_,1,1,n5?)) ) $integt1 = 0;
endif;
id	num(x?number_) = x;
id	num(x?) = rat(x,1);
Moduleoption,minimum,$integt1;
.sort:integt1-11;
#redefine integt1 "`$integt1'"
#enddo
#do integt1 = 1,1
#$integt1 = 1;
if ( count(intt1,1) );
	id T1(1,n2?{>1},1,1,n5?) = -1/Q.Q/(n2-1)*(
      +T1(1,n2,0,1,n5)*num(-n2+1)
      +T1(1,n2-1,0,1,1+n5)*num(-n5)
      +T1(1,n2-1,1,0,1+n5)*num(n5)
      +T1(1,n2-1,1,1,n5)*num(3-n5-n2-2*ep));
	if ( match(T1(1,n2?{>1},1,1,n5?)) ) $integt1 = 0;
endif;
id	num(x?number_) = x;
id	num(x?) = rat(x,1);
Moduleoption,minimum,$integt1;
.sort:integt1-12;
#redefine integt1 "`$integt1'"
#enddo
if ( count(intt1,1) );
	id	T1(n1?,n2?,n3?,n4?,n5?) = T1(n1,n2,n3,n4,n5-ep);
	repeat id T1(1,1,1,1,n5?{>`MAXT1TABLE'})*intt1 =
		-num(n5-2+3*ep)*den(n5-1+2*ep)*T1(1,1,1,1,n5-1)/Q.Q*intt1
		-2*num(3-5*ep-2*n5)*den(n5-1+2*ep)*G(n5,1,1,0,0,0)*G(n5,2,1,0,0,0)/Q.Q^n5*epQ^3*int0;
	repeat id T1(1,1,1,1,n5?{<`MINT1TABLE'})*intt1 =
		-den(n5-1+3*ep)*num(n5+2*ep)*T1(1,1,1,1,n5+1)*Q.Q*intt1
		-2*num(1-5*ep-2*n5)*den(n5-1+3*ep)*G(n5+1,1,1,0,0,0)*G(n5+1,2,1,0,0,0)
				/Q.Q^n5*epQ^3*int0;
	id	T1(1,1,1,1,n?number_)*intt1 = T1Table(n)*epQ^3/Q.Q^n*int0;
	id	T1(n1?,n2?,n3?,n4?,n5?) = T1(n1,n2,n3,n4,n5+ep);
	id	T1(n1?,n2?,n3?,n4?,n5?) =
		1/p1.p1^n1/p2.p2^n2/p3.p3^n3/p4.p4^n4*T1(n5);
	SplitArg,((ep)),T1;
	id	T1(ep) = T1(0,ep);
	id	T1(n?,x?) = T1(n,x/ep);
	id	T1(n?,x?) = epp5^x/p5.p5^n;
	#call rewiret1
	id	num(x?) = rat(x,1);
	id	den(x?) = rat(1,x);
endif;
.sort:integt1-13;
*
#endprocedure
*
*--#] integt1 : 
*--#[ integy5 :
*
#procedure integy5
*
if ( count(inty5,1) );
  id  p6.p?!{p6} = Q.p-p5.p;
  id  p4.p?!{p4} = Q.p-p3.p;
  id  p2.p?!{p2} = Q.p-p1.p;
endif;
.sort:integy5-1;
if ( count(inty5,1) );
  id  Q.p5 = p5.p5/2+Q.Q/2-p6.p6/2;
  id  Q.p3 = p3.p3/2+Q.Q/2-p4.p4/2;
  id  Q.p1 = p1.p1/2+Q.Q/2-p2.p2/2;
endif;
.sort:integy5-2;
if ( count(inty5,1) );
  if ( ( count(epp1,1) == 0 ) && ( count(p1.p1,1) >= 0 ) ) Discard;
  if ( ( count(epp2,1) == 0 ) && ( count(p2.p2,1) >= 0 ) ) Discard;
  if ( ( count(epp3,1) == 0 ) && ( count(p3.p3,1) >= 0 ) ) Discard;
  if ( ( count(epp4,1) == 0 ) && ( count(p4.p4,1) >= 0 ) ) Discard;
endif;
#call IntOne(p5,p6,Q,y5,t3)
*
#endprocedure
*
*--#] integy5 : 
*--#[ integy4 :
*
#procedure integy4
*
if ( count(inty4,1) );
  id  p6.p?!{p6} = Q.p-p5.p;
  id  p4.p?!{p4} = p1.p-p3.p;
  id  p2.p?!{p2} = Q.p-p1.p;
endif;
.sort:integy4-1;
if ( count(inty4,1) );
  id  Q.p5 = p5.p5/2+Q.Q/2-p6.p6/2;
  id  p1.p3 = p3.p3/2+p1.p1/2-p4.p4/2;
  id  Q.p1 = p1.p1/2+Q.Q/2-p2.p2/2;
endif;
.sort:integy4-2;
if ( count(inty4,1) );
  if ( ( count(epp2,1) == 0 ) && ( count(p2.p2,1) >= 0 ) ) Discard;
  if ( ( count(epp3,1) == 0 ) && ( count(p3.p3,1) >= 0 ) ) Discard;
  if ( ( count(epp4,1) == 0 ) && ( count(p4.p4,1) >= 0 ) ) Discard;
  if ( ( count(epp5,1) == 0 ) && ( count(p5.p5,1) >= 0 ) ) Discard;
  if ( ( count(epp6,1) == 0 ) && ( count(p6.p6,1) >= 0 ) ) Discard;
endif;
.sort
#call IntOne(p5,p6,Q,y4,t2)
*
#endprocedure
*
*--#] integy4 : 
*--#[ integy3 :
*
#procedure integy3
*
if ( count(inty3,1) );
  id  p6.p?!{p6} = p3.p-p5.p;
endif;
.sort:integy3-1;
if ( count(inty3,1) );
  id  p4.p?!{p4} = p1.p-p3.p;
endif;
.sort:integy3-2;
if ( count(inty3,1) );
  id  p2.p?!{p2} = Q.p-p1.p;
endif;
.sort:integy3-3;
if ( count(inty3,1) );
  id  p3.p5 = p5.p5/2+p3.p3/2-p6.p6/2;
  id  p1.p3 = p3.p3/2+p1.p1/2-p4.p4/2;
endif;
.sort:integy3-4;
if ( count(inty3,1) );
  id  Q.p1 = p1.p1/2+Q.Q/2-p2.p2/2;
endif;
.sort:integy3-5;
if ( count(inty3,1) );
  if ( ( count(epp2,1) == 0 ) && ( count(p2.p2,1) >= 0 ) ) Discard;
  if ( ( count(epp4,1) == 0 ) && ( count(p4.p4,1) >= 0 ) ) Discard;
endif;
#call IntOne(p5,p6,p3,y3,t2)
*
#endprocedure
*
*--#] integy3 : 
*--#[ integy2 :
*
#procedure integy2
*
if ( count(inty2,1) );
  id  p6.p?!{p6} = p1.p-p5.p;
  id  p4.p?!{p4} = p1.p-p3.p;
  id  p2.p?!{p2} = Q.p-p1.p;
endif;
.sort:integy2-1;
if ( count(inty2,1) );
  id  p1.p5 = p5.p5/2+p1.p1/2-p6.p6/2;
  id  p1.p3 = p3.p3/2+p1.p1/2-p4.p4/2;
  id  Q.p1 = p1.p1/2+Q.Q/2-p2.p2/2;
endif;
.sort:integy2-2;
if ( count(inty2,1) );
  if ( ( count(epp2,1) == 0 ) && ( count(p2.p2,1) >= 0 ) ) Discard;
  if ( ( count(epp3,1) == 0 ) && ( count(p3.p3,1) >= 0 ) ) Discard;
  if ( ( count(epp4,1) == 0 ) && ( count(p4.p4,1) >= 0 ) ) Discard;
endif;
#call IntOne(p5,p6,p1,y2,t2)
*
#endprocedure
*
*--#] integy2 : 
*--#[ integy1 :
*
#procedure integy1
*
if ( count(inty1,1) );
  id  p6.p?!{p6} = p2.p-p5.p;
  id  p4.p?!{p4} = p1.p-p3.p;
  id  p2.p?!{p2} = Q.p-p1.p;
endif;
.sort:integy1-1;
if ( count(inty1,1) );
  id  p2.p5 = p5.p5/2+p2.p2/2-p6.p6/2;
  id  p1.p3 = p3.p3/2+p1.p1/2-p4.p4/2;
  id  Q.p1 = p1.p1/2+Q.Q/2-p2.p2/2;
endif;
.sort:integy1-2;
if ( count(inty1,1) );
  if ( ( count(epp3,1) == 0 ) && ( count(p3.p3,1) >= 0 ) ) Discard;
  if ( ( count(epp4,1) == 0 ) && ( count(p4.p4,1) >= 0 ) ) Discard;
  if ( ( count(epp5,1) == 0 ) && ( count(p5.p5,1) >= 0 ) ) Discard;
  if ( ( count(epp6,1) == 0 ) && ( count(p6.p6,1) >= 0 ) ) Discard;
endif;
#call IntOne(p5,p6,p2,y1,t2)
*
#endprocedure
*
*--#] integy1 : 
*--#[ intego4 :
*
#procedure intego4
*
#call replace1(p3.p?!{p3},p2.p-p6.p,o4,1)
#call replace1(p4.p?!{p4},p1.p-p6.p,o4,2)
#call replace1(p7.p?!{p7},Q.p-p6.p,o4,3)
#call replaceAB1(p5.p?!{p5},p1.p-p2.p,p1.p6 p1.p1 p6.p6 p4.p4,o4,4)
#call replaceAB1(p1.p6,p1.p1/2+p6.p6/2-p4.p4/2,p2.p6 p2.p2 p6.p6 p3.p3,o4,5)
#call replace1(p2.p6,p2.p2/2+p6.p6/2-p3.p3/2,o4,6)
#call replaceAB2(Q.p6,Q.Q/2+p6.p6/2-p7.p7/2,Q.p6 Q.Q p6.p6 p7.p7,o4,7)
if ( ( count(into4,1) > 0 ) && ( count(epp7,1) == 0 ) && ( count(p7.p7,1) >= 0 ) ) Discard;
AB+	p1.p2,p1.p1,p2.p2,p5.p5;
.sort:intego4-8-0;
#call replace1(p1.p2,p1.p1/2+p2.p2/2-p5.p5/2,o4,8)
#call rewireo4
if ( count(into4,1) );
*  if ( count(p1.p1,1,p4.p4,1,p5.p5,1) > count(p2.p2,1,p3.p3,1,p5.p5,1) )
*    Multiply replace_(p1,-p2,p2,-p1,p3,-p4,p4,-p3,p6,-p6,p7,-p7,Q,-Q,
*        epp1,epp2,epp2,epp1,epp3,epp4,epp4,epp3);
*  if ( count(epp2,1,epp3,1,epp5,1) == 0 );
*    id  p1.p?!{p1} = p2.p+p5.p;
*    #call ntriangle(p5,p1,p4,p2,p3)
*    #call rewireo4
*  elseif ( count(epp1,1,epp4,1,epp5,1) == 0 );
*    id  p2.p?!{p2} = p1.p-p5.p;
*    #call ntriangle(p5,p2,p3,p1,p4)
*    #call rewireo4
*  endif;
	id,many,q1?{p1,p2,p3,p4,p5}.q2?{p1,p2,p3,p4,p5}^x1?
        = q1.q2^x1*p6.p6^x1/Q.Q^x1;
	ToTensor,nosquare,Q,ftensor;
	multiply p6.p6^4/Q.Q^4;
	if ( count(ftensor,1) == 0 );
		id  into4/p6.p6^x1?/p7.p7^x2? =
    	    intt1/Q.Q^x1/Q.Q^x2*Q.Q^2*epQ*G(x1,2,x2,0,0,0);
		#call DoG
	elseif ( match(ftensor(i1?)) );
		id  into4*ftensor(i1?)/p6.p6^x1?/p7.p7^x2? =
	        intt1/Q.Q^x1/Q.Q^x2*Q.Q^2*epQ*Q(i1)*G(x1,2,x2,0,1,0);
		#call DoG
	elseif ( match(ftensor(i1?,i2?)) );
		id  into4*ftensor(i1?,i2?)/p6.p6^x1?/p7.p7^x2? =
    	    intt1/Q.Q^x1/Q.Q^x2*Q.Q^2*epQ*(
	        	+G(x1,2,x2,0,2,0)*Q(i1)*Q(i2)
		        -G(x1,2,x2,0,2,0)*d_(i1,i2)*Q.Q/2*rat(1,2-ep)
    		    +G(x1-1,2,x2,0,0,0)*d_(i1,i2)*Q.Q/2*rat(1,2-ep)
				);
		#call DoG
	else;
		id  into4*ftensor(?a)/p6.p6^x1?/p7.p7^x2? =
	        intt1*ftensor(?a)/Q.Q^x1/Q.Q^x2*Q.Q^2*epQ*
		        sum_(s,0,integer_(nargs_(?a)/2),G(x1-s,2,x2,0,nargs_(?a)-2*s,0)
					*Pochhammer(nargs_(?a)+2-2*s,-ep)
					*PochhammerINV(nargs_(?a)+2-s,-ep)
        			*Q.Q^s*sum_(j,0,integer_(nargs_(?a)/2)-s,sign_(j)*Q.Q^j
*
*			the original y/4 becomes y/2 when we consider
*			the normalization of the distrib_ to expand the ftensor.
*
					*Pochhammer(nargs_(?a)+1-2*s-j,-ep)
					*PochhammerINV(nargs_(?a)+1-2*s,-ep)
			        *y^j*y^s/2^j/2^s*invfac_(s)*invfac_(j)
		        ));
		#call DoG
		id  y^s?*ftensor(?a) = fac_(s)*distrib_(1,2*s,del,ftensor,?a);
		tovector,ftensor,Q;
		id  del(?a) = dd_(?a);
	endif;
endif;
.sort:intego4-9;
*
#endprocedure
*
*--#] intego4 : 
*--#[ intego3 :
*
#procedure intego3
*
if ( count(into3,1) );
  id  p4.p?!{p4} = p1.p-Q.p;
  id  p3.p?!{p3} = p2.p-Q.p;
endif;
.sort:intego3-1;
if ( count(into3,1) );
  id  p7.p?!{p7} = Q.p-p6.p;
  id  p5.p?!{p5} = p1.p-p2.p;
endif;
AB+	Q.p6,Q.Q,p6.p6,p7.p7;
.sort:intego3-2;
if ( count(into3,1) );
  id  Q.p6 = Q.Q/2+p6.p6/2-p7.p7/2;
  if ( ( count(epp6,1) == 0 ) && ( count(p6.p6,1) >= 0 ) ) Discard;
  if ( ( count(epp7,1) == 0 ) && ( count(p7.p7,1) >= 0 ) ) Discard;
endif;
AB+	Q.p1,Q.Q,p1.p1,p4.p4;
.sort:intego3-3;
if ( count(into3,1) );
  id  Q.p1 = Q.Q/2+p1.p1/2-p4.p4/2;
endif;
AB+	Q.p2,Q.Q,p2.p2,p3.p3;
.sort:intego3-4;
if ( count(into3,1) );
  id  Q.p2 = Q.Q/2+p2.p2/2-p3.p3/2;
endif;
AB+	p1.p2,p1.p1,p2.p2,p5.p5;
.sort:intego3-5;
if ( count(into3,1) );
  id  p1.p2 = p1.p1/2+p2.p2/2-p5.p5/2;
endif;
.sort:intego3-6;
#call IntOne(p6,p7,Q,o3,t1)
*
#endprocedure
*
*--#] intego3 : 
*--#[ intego2 :
*
#procedure intego2
*
if ( count(into2,1) );
  id  p7.p?!{p7} = p4.p-p6.p;
  id  p5.p?!{p5} = p1.p-p2.p;
endif;
.sort:intego2-1;
if ( count(into2,1) );
  id  p4.p?!{p4,p6} = p1.p-Q.p;
  id  p3.p?!{p3} = p2.p-Q.p;
endif;
AB+	p4.p6,p4.p4,p6.p6,p7.p7;
.sort:intego2-2;
if ( count(into2,1) );
  id  p4.p6 = p4.p4/2+p6.p6/2-p7.p7/2;
  if ( ( count(epp6,1) == 0 ) && ( count(p6.p6,1) >= 0 ) ) Discard;
  if ( ( count(epp7,1) == 0 ) && ( count(p7.p7,1) >= 0 ) ) Discard;
endif;
AB+	p1.p6,Q.p6,p4.p4,p6.p6,p7.p7;
.sort:intego2-3;
if ( count(into2,1) );
  id  p1.p6 = Q.p6+p4.p4/2+p6.p6/2-p7.p7/2;
  if ( ( count(epp6,1) == 0 ) && ( count(p6.p6,1) >= 0 ) ) Discard;
  if ( ( count(epp7,1) == 0 ) && ( count(p7.p7,1) >= 0 ) ) Discard;
endif;
AB+	Q.p1,Q.Q,p1.p1,p4.p4;
.sort:intego2-4;
if ( count(into2,1) );
  id  Q.p1 = Q.Q/2+p1.p1/2-p4.p4/2;
endif;
AB+	Q.p2,Q.Q,p2.p2,p3.p3;
.sort:intego2-5;
if ( count(into2,1) );
  id  Q.p2 = Q.Q/2+p2.p2/2-p3.p3/2;
endif;
AB+	p1.p2,p1.p1,p2.p2,p5.p5;
.sort:intego2-6;
if ( count(into2,1) );
  id  p1.p2 = p1.p1/2+p2.p2/2-p5.p5/2;
endif;
.sort:intego2-7;
#call IntOne(p6,p7,p4,o2,t1)
*
#endprocedure
*
*--#] intego2 : 
*--#[ intego1 :
*
#procedure intego1
*
if ( count(into1,1) );
  id,p7.p?!{p7} = p5.p-p6.p;
endif;
.sort:intego1-1;
if ( count(into1,1) );
  id,p4.p?!{p4} = p1.p-Q.p;
endif;
.sort:intego1-2;
if ( count(into1,1) );
  id,p5.p?!{p5,p6} = p1.p-p2.p;
endif;
.sort:intego1-3;
if ( count(into1,1) );
  id,p3.p?!{p3} = p2.p-Q.p;
endif;
AB+	p5.p6,p5.p5,p6.p6,p7.p7;
.sort:intego1-4;
if ( count(into1,1) );
  id,p5.p6 = p5.p5/2+p6.p6/2-p7.p7/2;
  if ( ( count(epp6,1) == 0 ) && ( count(p6.p6,1) >= 0 ) ) Discard;
  if ( ( count(epp7,1) == 0 ) && ( count(p7.p7,1) >= 0 ) ) Discard;
endif;
AB+	p1.p6,p5.p5,p6.p6,p7.p7;
.sort:intego1-5;
if ( count(into1,1) );
  id,p2.p6 = p1.p6-p5.p5/2-p6.p6/2+p7.p7/2;
  if ( ( count(epp6,1) == 0 ) && ( count(p6.p6,1) >= 0 ) ) Discard;
  if ( ( count(epp7,1) == 0 ) && ( count(p7.p7,1) >= 0 ) ) Discard;
endif;
AB+	Q.p1,Q.Q,p1.p1,p4.p4;
.sort:intego1-6;
if ( count(into1,1) );
  id,Q.p1 = Q.Q/2+p1.p1/2-p4.p4/2;
endif;
AB+	Q.p2,Q.Q,p2.p2,p3.p3;
.sort:intego1-7;
if ( count(into1,1) );
  id,Q.p2 = Q.Q/2+p2.p2/2-p3.p3/2;
endif;
AB+	p1.p2,p1.p1,p2.p2,p5.p5;
.sort:intego1-8;
if ( count(into1,1) );
  id,p1.p2 = p1.p1/2+p2.p2/2-p5.p5/2;
endif;
.sort:intego1-9;
#call IntOne(p6,p7,p5,o1,t1)
*
#endprocedure
*
*--#] intego1 : 
*--#[ integbu :
*
#procedure integbu
*
#call replace1(p1.p?!{p1},p4.p+p6.p,bu,1)
#call replace1(p3.p?!{p3},p7.p-p5.p,bu,2)
#call replace1(p2.p?!{p2},p4.p+p5.p,bu,3)
#call replaceAB1(p7.p?!{p7},p6.p-Q.p,Q.p6 Q.Q p6.p6 p7.p7,bu,4)
#call replaceAB1(Q.p6,Q.Q/2+p6.p6/2-p7.p7/2,p4.p5 p2.p2 p4.p4 p5.p5,bu,5)
#call replaceAB1(p4.p5,p2.p2/2-p4.p4/2-p5.p5/2,p4.p6 p1.p1 p4.p4 p6.p6,bu,6)
#call replaceAB1(p4.p6,p1.p1/2-p4.p4/2-p6.p6/2,p5.p6 Q.p5 p5.p5 p7.p7 p3.p3,bu,7)
#call replace1(p5.p6,Q.p5+p5.p5/2+p7.p7/2-p3.p3/2,bu,8)
#call rewirebu
if ( count(intbu,1) );
  if ( count(epp4,1,epp5,1,epp6,1) == 0 );
	#call ntriangle(p4,p1,p2,p6,p5)
	#call rewirebu
  elseif ( count(epp4,1,epp5,1,epp7,1) == 0 );
	#call ntriangle(p5,p2,p3,p4,p7)
	#call rewirebu
  endif;
endif;
.sort:integbu-9;
*
#endprocedure
*
*--#] integbu : 
*--#[ integfa :
*
#procedure integfa
*
#call replace1(p5.p?!{p5},p1.p-Q.p,fa,1)
#call replace1(p4.p?!{p4},p3.p-Q.p,fa,2)
#call replace1(p6.p?!{p6},p2.p-p1.p,fa,3)
#call replaceAB1(p7.p?!{p7},p2.p-p3.p,Q.p1 p1.p1 Q.Q p5.p5,fa,4)
#call replaceAB1(Q.p1,p1.p1/2+Q.Q/2-p5.p5/2,Q.p3 p3.p3 Q.Q p4.p4,fa,5)
#call replaceAB1(Q.p3,p3.p3/2+Q.Q/2-p4.p4/2,p1.p2 p1.p1 p2.p2 p6.p6,fa,6)
#call replaceAB1(p1.p2,p1.p1/2+p2.p2/2-p6.p6/2,p2.p3 p2.p2 p3.p3 p7.p7,fa,7)
#call replace1(p2.p3,p2.p2/2+p3.p3/2-p7.p7/2,fa,8)
#call rewirefa
if ( count(intfa,1) );
  if ( count(epp1,1,epp2,1,epp3,1) == 0 );
	#call ntriangle(p2,p6,p7,p1,p3)
    #call rewirefa
  endif;
endif;
.sort:integfa-9;
*
#endprocedure
*
*--#] integfa : 
*--#[ integla :
*
#procedure integla
*
#call replace1(p6.p?!{p6},p1.p-Q.p,la,1)
#call replace1(p5.p?!{p5},p2.p-Q.p,la,2)
#call replace1(p4.p?!{p4},p3.p-Q.p,la,3)
#call replace1(p7.p?!{p7},p1.p-p2.p,la,4)
#call replaceAB1(p8.p?!{p8},p3.p-p2.p,Q.p1 p1.p1 Q.Q p6.p6,la,5)
#call replaceAB1(Q.p1,p1.p1/2+Q.Q/2-p6.p6/2,Q.p2 p2.p2 Q.Q p5.p5,la,6)
#call replaceAB1(Q.p2,p2.p2/2+Q.Q/2-p5.p5/2,Q.p3 p3.p3 Q.Q p4.p4,la,7)
#call replaceAB1(Q.p3,p3.p3/2+Q.Q/2-p4.p4/2,p1.p2 p1.p1 p2.p2 p7.p7,la,8)
#call replaceAB1(p1.p2,p1.p1/2+p2.p2/2-p7.p7/2,p2.p3 p2.p2 p3.p3 p8.p8,la,9)
#call replaceAB1(p2.p3,p2.p2/2+p3.p3/2-p8.p8/2,p1.p3 p1.p1 p3.p3 p7.p7 p8.p8 p7.p8,la,10)
#call replace1(p1.p3,p1.p1/2+p3.p3/2-p7.p7/2-p8.p8/2+p7.p8,la,11)
#call rewirela
if ( count(intla,1) );
  if ( count(epp2,1,epp5,1,epp7,1) == 0 );
	id	p1.p? = p2.p+p7.p;
	#call ntriangle(p7,p1,p6,p2,p5)
  elseif ( count(epp2,1,epp5,1,epp8,1) == 0 );
	id	p3.p? = p2.p+p8.p;
	#call ntriangle(p8,p3,p4,p2,p5)
  endif;
  #call rewirela
endif;
.sort:integla-12;
*
#endprocedure
*
*--#] integla : 
*--#[ integbe :
*
#procedure integbe
*
#call replace1(p5.p?!{p5},p1.p-Q.p,be,1)
#call replace1(p4.p?!{p4},p3.p-Q.p,be,2)
#call replace1(p6.p?!{p6},p2.p-p1.p,be,3)
#call replace1(p7.p?!{p7},p2.p-p3.p,be,4)
#call replaceAB1(p8.p?!{p8},p3.p-p1.p,Q.p1 Q.Q p1.p1 p5.p5,be,5)
#call replaceAB1(Q.p1,Q.Q/2+p1.p1/2-p5.p5/2,Q.p3 Q.Q p3.p3 p4.p4,be,6)
#call replaceAB1(Q.p3,Q.Q/2+p3.p3/2-p4.p4/2,p1.p2 p1.p1 p2.p2 p6.p6,be,7)
#call replaceAB1(p1.p2,p1.p1/2+p2.p2/2-p6.p6/2,p2.p3 p2.p2 p3.p3 p7.p7,be,8)
#call replaceAB1(p2.p3,p2.p2/2+p3.p3/2-p7.p7/2,p1.p3 p1.p1 p3.p3 p8.p8,be,9)
#call replace1(p1.p3,p1.p1/2+p3.p3/2-p8.p8/2,be,10)
#call rewirebe
if ( count(intbe,1) );
  if ( count(epp1,1,epp2,1,epp3,1) == 0 );
	#call ntriangle(p2,p6,p7,p1,p3)
	#call rewirebe
  endif;
endif;
.sort:integbe-11;
*
#endprocedure
*
*--#] integbe : 
*--#[ integno :
*
#procedure integno
*
#call rewireno
*
*if ( count(intno,1) );
*  if ( count(p2.p2,1) > count(p5.p5,1) );
*	Multiply replace_(p1,-p6,p6,-p1,p3,-p4,p4,-p3,p2,-p5,p5,-p2,p7,p8,p8,p7,
*		epp1,epp6,epp6,epp1,epp3,epp4,epp4,epp3,epp2,epp5,epp5,epp2,epp7,epp8,epp8,epp7);
*  endif;
*endif;
*if ( count(intno,1) );
*  if ( count(p1.p1,1) > count(p6.p6,1) );
*	Multiply replace_(p1,-p6,p6,-p1,p5,p7,p7,p5,p2,-p8,p8,-p2,
*		epp1,epp6,epp6,epp1,epp5,epp7,epp7,epp5,epp2,epp8,epp8,epp2);
*  elseif( count(p2.p2,1) > count(p7.p7,1) );
*	Multiply replace_(p1,-p6,p6,-p1,p5,p7,p7,p5,p2,-p8,p8,-p2,
*		epp1,epp6,epp6,epp1,epp5,epp7,epp7,epp5,epp2,epp8,epp8,epp2);
*  endif;
*endif;
*if ( count(intno,1) );
*  if ( count(p3.p3,1) > count(p4.p4,1) );
*	Multiply replace_(p3,-p4,p4,-p3,p5,p8,p8,p5,p2,-p7,p7,-p2,
*		epp3,epp4,epp4,epp3,epp5,epp8,epp8,epp5,epp2,epp7,epp7,epp2);
*  elseif ( count(p2.p2,1) > count(p8.p8,1) );
*	Multiply replace_(p3,-p4,p4,-p3,p5,p8,p8,p5,p2,-p7,p7,-p2,
*		epp3,epp4,epp4,epp3,epp5,epp8,epp8,epp5,epp2,epp7,epp7,epp2);
*  endif;
*endif;
*
.sort:integno-1;
#call replace1(p4.p?!{p4},p3.p-Q.p,no,1a)
#call replace1(p6.p?!{p6},p1.p-Q.p,no,1b)
#call replace1(p7.p?!{p7},p2.p-p1.p,no,2a)
#call replace1(p8.p?!{p8},p2.p-p3.p,no,2b)
#call replace2(p5.p?!{p5},p1.p+p3.p-p2.p-Q.p,no,3)
AB+	p1.Q,p1.p1,Q.Q,p6.p6;
.sort:integno-4;
#call replaceAB1(p1.Q,p1.p1/2+Q.Q/2-p6.p6/2,p3.Q p3.p3 Q.Q p4.p4,no,4a)
#call replaceAB1(p3.Q,p3.p3/2+Q.Q/2-p4.p4/2,p1.p2 p1.p1 p2.p2 p7.p7,no,4b)
#call replaceAB1(p1.p2,p1.p1/2+p2.p2/2-p7.p7/2,p2.p3 p3.p3 p2.p2 p8.p8,no,5)
#call replace1(p2.p3,p3.p3/2+p2.p2/2-p8.p8/2,no,6)
#call replace1(p1.p3,p1.p1/2+p2.p2/2+p3.p3/2+p5.p5/2-p4.p4/2-p6.p6/2-p7.p7/2-p8.p8/2+Q.Q/2-Q.p2,no,7)
*
if ( count(intno,1) );
	id	Q.p2^k9?/p1.p1^n1?/p2.p2^n2?/p3.p3^n3?
		/p4.p4^n4?/p5.p5^n5?/p6.p6^n6?/p7.p7^n7?/p8.p8^n8? =
			NO(n1,n2,n3,n4,n5,n6,n7,n8,k9)/2^k9;
endif;
*
#do ino = 1,1
if ( count(intno,1) );
  repeat;
*
*   F22=
*
	id	NO(n1?pos_,n2?pos_,n3?pos_,n4?pos_,n5?{>1},n6?pos_,n7?pos_,
				n8?pos_,k9?pos_) = 1/(-1+n5)*(
      +NO(-1+n1,n2,n3,n4,n5,n6,n7,n8,-1+k9)*acc(-1+n5)
      +NO(-1+n1,n2,n3,n4,-1+n5,n6,1+n7,n8,-1+k9)*(n7)
      +NO(n1,-1+n2,n3,n4,-1+n5,n6,1+n7,n8,-1+k9)*(-n7)
      +NO(n1,-1+n2,n3,n4,-1+n5,n6,n7,1+n8,-1+k9)*(-n8)
      +NO(n1,n2,-1+n3,n4,n5,n6,n7,n8,-1+k9)*acc(-1+n5)
      +NO(n1,n2,-1+n3,n4,-1+n5,n6,n7,1+n8,-1+k9)*(n8)
      +NO(n1,n2,n3,n4,n5,n6,-1+n7,n8,-1+k9)*(-acc(-1+n5))
      +NO(n1,n2,n3,n4,n5,n6,n7,-1+n8,-1+k9)*(-acc(-1+n5))
      +NO(n1,n2,n3,n4,-1+n5,n6,n7,n8,-1+k9)*num(3+k9-n8-n7-2*n2-2*ep));
  endrepeat;
  id  acc(x?) = x;
  id  num(x?) = rat(x,1);
endif;
*
.sort:integno-8;
*
if ( count(intno,1) );
  repeat;
*
*   F16=
*
	id	NO(n1?pos_,n2?pos_,n3?pos_,n4?pos_,n5?pos_,n6?pos_
			,n7?{>1},n8?pos_,k9?pos_) = 1/(-1+n7)*(
      +NO(1+n1,n2,n3,n4,n5,-1+n6,-1+n7,n8,-1+k9)*(-n1)
      +NO(1+n1,n2,n3,n4,n5,n6,-1+n7,n8,-1+k9)*Q.Q*(n1)
      +NO(n1,-1+n2,n3,n4,n5,n6,n7,n8,-1+k9)*acc(-1+n7)
      +NO(n1,n2,n3,n4,1+n5,-1+n6,-1+n7,n8,-1+k9)*(-n5)
      +NO(n1,n2,n3,n4,1+n5,n6,-1+n7,-1+n8,-1+k9)*(n5)
      +NO(n1,n2,n3,n4,n5,-1+n6,n7,n8,-1+k9)*(-acc(-1+n7))
      +NO(n1,n2,n3,n4,n5,n6,n7,n8,-1+k9)*Q.Q*acc(-1+n7)
      +NO(n1,n2,n3,n4,n5,n6,-1+n7,n8,-1+k9)*num(5-n7-2*n6-n5-n1-2*ep));
  endrepeat;
  id  acc(x?) = x;
  id  num(x?) = rat(x,1);
endif;
*
.sort:integno-9;
*
if ( count(intno,1) );
  repeat;
*
*   F25=
*
	id	NO(n1?pos_,n2?{>1},n3?pos_,n4?pos_,n5?pos_,n6?pos_
			,n7?pos_,n8?pos_,k9?pos_) = -1/(-1+n2)*(
      +NO(-1+n1,n2,n3,n4,n5,n6,n7,n8,-1+k9)*(-acc(-1+n2))
      +NO(-1+n1,-1+n2,n3,n4,n5,n6,n7,n8,-2+k9)*acc(-1+k9)
      +NO(n1,n2,-1+n3,n4,n5,n6,n7,n8,-1+k9)*(-acc(-1+n2))
      +NO(n1,n2,n3,n4,n5,n6,-1+n7,n8,-1+k9)*acc(-1+n2)
      +NO(n1,n2,n3,n4,n5,n6,n7,-1+n8,-1+k9)*acc(-1+n2)
      +NO(n1,-1+n2,-1+n3,n4,n5,n6,n7,n8,-2+k9)*acc(-1+k9)
      +NO(n1,-1+n2,n3,-1+n4,n5,n6,1+n7,n8,-1+k9)*(-n7)
      +NO(n1,-1+n2,n3,-1+n4,n5,n6,n7,n8,-2+k9)*(-acc(-1+k9))
      +NO(n1,-1+n2,n3,n4,-1+n5,n6,1+n7,n8,-1+k9)*(n7)
      +NO(n1,-1+n2,n3,n4,-1+n5,n6,n7,1+n8,-1+k9)*(n8)
      +NO(n1,-1+n2,n3,n4,n5,-1+n6,n7,1+n8,-1+k9)*(-n8)
      +NO(n1,-1+n2,n3,n4,n5,-1+n6,n7,n8,-2+k9)*(-acc(-1+k9))
      +NO(n1,-1+n2,n3,n4,n5,n6,n7,n8,-1+k9)*num(-3-k9+n8+n7+2*n5+2*ep));
  endrepeat;
  id  acc(x?) = x;
  id  num(x?) = rat(x,1);
endif;
*
.sort:integno-10;
*
if ( count(intno,1) );
  repeat;
*
*   F24=
*
	id	NO(n1?pos_,n2?pos_,n3?pos_,n4?pos_,n5?pos_,n6?pos_,
			n7?pos_,n8?{>1},k9?pos_) = -1/(-1+n8)*(
      +NO(-1+n1,1+n2,n3,n4,n5,n6,n7,-1+n8,-1+k9)*(n2)
      +NO(-1+n1,n2,n3,n4,n5,n6,n7,-1+n8,-2+k9)*(-acc(-1+k9))
      +NO(n1,-1+n2,n3,n4,n5,n6,n7,n8,-1+k9)*(-acc(-1+n8))
      +NO(n1,1+n2,n3,n4,n5,n6,-1+n7,-1+n8,-1+k9)*(-n2)
      +NO(n1,n2,n3,-1+n4,1+n5,n6,n7,-1+n8,-1+k9)*(n5)
      +NO(n1,n2,n3,-1+n4,n5,n6,n7,n8,-1+k9)*acc(-1+n8)
      +NO(n1,n2,n3,n4,-1+n5,n6,n7,n8,-1+k9)*(-acc(-1+n8))
      +NO(n1,n2,n3,n4,1+n5,n6,-1+n7,-1+n8,-1+k9)*(-n5)
      +NO(n1,n2,n3,n4,n5,-1+n6,n7,n8,-1+k9)*acc(-1+n8)
      +NO(n1,n2,n3,n4,n5,-1+n6,n7,-1+n8,-2+k9)*acc(-1+k9)
      +NO(n1,n2,n3,n4,n5,n6,n7,n8,-1+k9)*Q.Q*(-acc(-1+n8))
      +NO(n1,n2,n3,n4,n5,n6,n7,-1+n8,-2+k9)*Q.Q*(-acc(-1+k9))
      +NO(n1,n2,n3,n4,n5,n6,n7,-1+n8,-1+k9)*num(3+k9-2*n7-n5-n2-2*ep));
  endrepeat;
  id  acc(x?) = x;
  id  num(x?) = rat(x,1);
endif;
*
.sort:integno-11;
*
if ( count(intno,1) );
  repeat;
*
*   F35=
*
	id	NO(n1?pos_,n2?pos_,n3?{>1},n4?pos_,n5?pos_,n6?pos_,
			n7?pos_,n8?pos_,k9?pos_) = -1/(-1+n3)*(
      +NO(-1+n1,n2,n3,n4,n5,n6,n7,n8,-1+k9)*(-acc(-1+n3))
      +NO(n1,n2,n3,n4,-1+n5,n6,n7,n8,-1+k9)*(-acc(-1+n3))
      +NO(n1,n2,n3,n4,n5,-1+n6,n7,n8,-1+k9)*acc(-1+n3)
      +NO(n1,n2,n3,n4,n5,n6,-1+n7,n8,-1+k9)*acc(-1+n3)
      +NO(n1,n2,-1+n3,1+n4,-1+n5,n6,n7,n8,-1+k9)*(-n4)
      +NO(n1,n2,-1+n3,1+n4,n5,n6,-1+n7,n8,-1+k9)*(n4)
      +NO(n1,n2,-1+n3,n4,-1+n5,n6,n7,1+n8,-1+k9)*(-n8)
      +NO(n1,n2,-1+n3,n4,n5,-1+n6,n7,1+n8,-1+k9)*(n8)
      +NO(n1,n2,-1+n3,n4,n5,n6,n7,n8,-1+k9)*num(5-n8-2*n5-n4-n3-2*ep));
  endrepeat;
  id  acc(x?) = x;
  id  num(x?) = rat(x,1);
endif;
*
.sort:integno-12;
*
if ( count(intno,1) );
  repeat;
*
*   F15a=
*
	id	NO(n1?{>1},n2?pos_,n3?pos_,n4?pos_,n5?pos_,n6?pos_,
			n7?pos_,n8?pos_,k9?pos_) = -1/(-1+n1)*(
      +NO(n1,n2,-1+n3,n4,n5,n6,n7,n8,-1+k9)*(-acc(-1+n1))
      +NO(n1,n2,n3,-1+n4,n5,n6,n7,n8,-1+k9)*acc(-1+n1)
      +NO(n1,n2,n3,n4,-1+n5,n6,n7,n8,-1+k9)*(-acc(-1+n1))
      +NO(n1,n2,n3,n4,n5,n6,n7,-1+n8,-1+k9)*acc(-1+n1)
      +NO(-1+n1,n2,n3,-1+n4,n5,n6,1+n7,n8,-1+k9)*(n7)
      +NO(-1+n1,n2,n3,n4,-1+n5,1+n6,n7,n8,-1+k9)*(-n6)
      +NO(-1+n1,n2,n3,n4,-1+n5,n6,1+n7,n8,-1+k9)*(-n7)
      +NO(-1+n1,n2,n3,n4,n5,1+n6,n7,-1+n8,-1+k9)*(n6)
      +NO(-1+n1,n2,n3,n4,n5,n6,n7,n8,-1+k9)*num(5-n7-n6-2*n5-n1-2*ep));
  endrepeat;
  id  acc(x?) = x;
  id  num(x?) = rat(x,1);
endif;
*
.sort:integno-13;
*
if ( count(intno,1) );
  repeat;
*
*   F38=
*
	id	NO(n1?pos_,n2?pos_,n3?pos_,n4?{>1},n5?pos_,n6?pos_,
			n7?pos_,n8?pos_,k9?pos_) = -1/(-1+n4)*(
      +NO(n1,-1+n2,1+n3,-1+n4,n5,n6,n7,n8,-1+k9)*(-n3)
      +NO(n1,-1+n2,n3,n4,n5,n6,n7,n8,-1+k9)*(-acc(-1+n4))
      +NO(n1,n2,1+n3,-1+n4,n5,n6,n7,-1+n8,-1+k9)*(n3)
      +NO(n1,n2,n3,n4,n5,n6,n7,-1+n8,-1+k9)*acc(-1+n4)
      +NO(n1,n2,n3,n4,n5,n6,n7,n8,-1+k9)*Q.Q*(-acc(-1+n4))
      +NO(n1,n2,n3,-1+n4,1+n5,-1+n6,n7,n8,-1+k9)*(-n5)
      +NO(n1,n2,n3,-1+n4,1+n5,n6,n7,-1+n8,-1+k9)*(n5)
      +NO(n1,n2,n3,-1+n4,n5,n6,n7,n8,-1+k9)*num(-5+2*n8+n5+n4+n3+2*ep));
  endrepeat;
  id  acc(x?) = x;
  id  num(x?) = rat(x,1);
endif;
*
.sort:integno-14;
*
if ( count(intno,1) );
  repeat;
*
*   F17=
*
	id	NO(n1?pos_,n2?pos_,n3?pos_,n4?pos_,n5?pos_,n6?{>1},
			n7?pos_,n8?pos_,k9?pos_) = -1/(-1+n6)*(
      +NO(1+n1,-1+n2,n3,n4,n5,-1+n6,n7,n8,-1+k9)*(-n1)
      +NO(1+n1,n2,n3,n4,n5,-1+n6,-1+n7,n8,-1+k9)*(n1)
      +NO(n1,-1+n2,n3,n4,n5,n6,n7,n8,-1+k9)*(-acc(-1+n6))
      +NO(n1,n2,n3,-1+n4,1+n5,-1+n6,n7,n8,-1+k9)*(-n5)
      +NO(n1,n2,n3,n4,1+n5,-1+n6,-1+n7,n8,-1+k9)*(n5)
      +NO(n1,n2,n3,n4,n5,n6,-1+n7,n8,-1+k9)*acc(-1+n6)
      +NO(n1,n2,n3,n4,n5,n6,n7,n8,-1+k9)*Q.Q*(-acc(-1+n6))
      +NO(n1,n2,n3,n4,n5,-1+n6,n7,n8,-1+k9)*num(-5+2*n7+n6+n5+n1+2*ep));
  endrepeat;
  id  acc(x?) = x;
  id  num(x?) = rat(x,1);
endif;
*
if ( match(NO(n1?{>1},n2?pos_,n3?pos_,n4?pos_,n5?pos_,n6?pos_,n7?pos_,n8?pos_,k9?pos_))
	|| match(NO(n1?pos_,n2?{>1},n3?pos_,n4?pos_,n5?pos_,n6?pos_,n7?pos_,n8?pos_,k9?pos_))
	|| match(NO(n1?pos_,n2?pos_,n3?{>1},n4?pos_,n5?pos_,n6?pos_,n7?pos_,n8?pos_,k9?pos_))
	|| match(NO(n1?pos_,n2?pos_,n3?pos_,n4?{>1},n5?pos_,n6?pos_,n7?pos_,n8?pos_,k9?pos_))
	|| match(NO(n1?pos_,n2?pos_,n3?pos_,n4?pos_,n5?{>1},n6?pos_,n7?pos_,n8?pos_,k9?pos_))
	|| match(NO(n1?pos_,n2?pos_,n3?pos_,n4?pos_,n5?pos_,n6?{>1},n7?pos_,n8?pos_,k9?pos_))
	|| match(NO(n1?pos_,n2?pos_,n3?pos_,n4?pos_,n5?pos_,n6?pos_,n7?{>1},n8?pos_,k9?pos_))
	|| match(NO(n1?pos_,n2?pos_,n3?pos_,n4?pos_,n5?pos_,n6?pos_,n7?pos_,n8?{>1},k9?pos_)) )
		redefine ino "0";
.sort:integno-15;
#enddo
*
if ( count(intno,1) );
  repeat;
	id	NO(1,1,1,1,1,1,1,1,k9?pos_) = Q.Q*den(-1+k9-4*ep)*(
      +NO(1,1,1,1,1,1,1,1,-1+k9)*num(-1+k9-2*ep)
      -NO(0,0,1,1,1,1,1,1,-2+k9)*Q.Q^-1*(acc(-1+k9))
      -NO(0,2,1,1,1,1,1,0,-1+k9)*Q.Q^-1
      +NO(0,1,1,1,1,1,1,0,-2+k9)*Q.Q^-1*acc(-1+k9)
      +NO(1,0,0,1,1,1,1,1,-2+k9)*Q.Q^-1*(-acc(-1+k9))
      +NO(1,0,1,0,1,1,2,1,-1+k9)*Q.Q^-1
      +NO(1,0,1,0,1,1,1,1,-2+k9)*Q.Q^-1*acc(-1+k9)
      -NO(1,0,1,1,0,1,2,1,-1+k9)*Q.Q^-1
      -NO(1,0,1,1,0,1,1,2,-1+k9)*Q.Q^-1
      +NO(1,0,1,1,1,0,1,2,-1+k9)*Q.Q^-1
      +NO(1,0,1,1,1,0,1,1,-2+k9)*Q.Q^-1*acc(-1+k9)
      +NO(1,0,1,1,1,1,1,1,-1+k9)*Q.Q^-1*num(-1+k9-4*ep)*2
      -NO(1,0,2,0,1,1,1,1,-1+k9)*Q.Q^-1
      -NO(1,2,0,1,1,1,0,1,-1+k9)*Q.Q^-1
      +NO(1,2,1,1,1,1,0,0,-1+k9)*Q.Q^-1*2
      +NO(1,1,0,1,1,1,0,1,-2+k9)*Q.Q^-1*acc(-1+k9)
      +NO(1,1,1,0,1,1,0,1,-2+k9)*Q.Q^-1*(-acc(-1+k9))
      +NO(1,1,1,1,1,0,1,0,-2+k9)*Q.Q^-1*(-acc(-1+k9))
      +NO(1,1,1,1,1,1,0,1,-2+k9)*acc(-1+k9)
      -NO(1,1,1,1,1,1,0,1,-1+k9)*Q.Q^-1*num(-1+k9-4*ep)
      +NO(1,1,1,1,1,1,1,0,-2+k9)*acc(-1+k9)
      -NO(1,1,1,1,1,1,1,0,-1+k9)*Q.Q^-1*num(-1+k9-4*ep)
      +NO(1,1,2,0,1,1,1,0,-1+k9)*Q.Q^-1
      -NO(2,0,1,1,1,0,1,1,-1+k9)*Q.Q^-1
      +NO(2,1,1,1,1,0,0,1,-1+k9)*Q.Q^-1);
	id	num(x?)*den(x?) = 1;
	id  acc(x?) = x;
  endrepeat;
  id  num(x?) = rat(x,1);
  id  den(x?) = rat(1,x);
endif;
*
.sort:integno-16;
*
if ( count(intno,1) );
  repeat;
	id	NO(n1?pos_,n2?pos_,n3?pos_,n4?pos_,n5?pos_,n6?{>1},n7?pos_,n8?pos_,0) = -1/Q.Q/(n6-1)*(
      +NO(-1+n1,n2,n3,n4,n5,n6,n7,n8,0)*acc(-n6+1)
      +NO(n1,-1+n2,n3,n4,n5,n6-1,n7,1+n8,0)*(-n8)
      +NO(n1,n2,-1+n3,n4,n5,n6-1,n7,1+n8,0)*(n8)
      +NO(n1,n2,n3,-1+n4,1+n5,n6-1,n7,n8,0)*(n5)
      +NO(n1,n2,n3,n4,1+n5,n6-1,-1+n7,n8,0)*(-n5)
      +NO(n1,n2,n3,n4,n5,n6-1,n7,n8,0)*num(9-n8-2*n7-n6-n5-2*n2-2*n1-4*ep));
  endrepeat;
  id  acc(x?) = x;
  id  num(x?) = rat(x,1);
endif;
*
.sort:integno-17;
*
if ( count(intno,1) );
  repeat;
	id	NO(n1?{>1},n2?pos_,n3?pos_,n4?pos_,n5?pos_,1,n7?pos_,n8?pos_,0) = -1/Q.Q/(n1-1)*(
      +NO(n1,n2,n3,n4,n5,0,n7,n8,0)*acc(-n1+1)
      +NO(n1-1,1+n2,-1+n3,n4,n5,1,n7,n8,0)*(n2)
      +NO(n1-1,1+n2,n3,n4,n5,1,n7,-1+n8,0)*(-n2)
      +NO(n1-1,n2,n3,-1+n4,n5,1,1+n7,n8,0)*(n7)
      +NO(n1-1,n2,n3,n4,-1+n5,1,1+n7,n8,0)*(-n7)
      +NO(n1-1,n2,n3,n4,n5,1,n7,n8,0)*num(7-2*n8-n7-2*n5-n2-n1-4*ep));
  endrepeat;
  id  acc(x?) = x;
  id  num(x?) = rat(x,1);
endif;
*
.sort:integno-18;
*
if ( count(intno,1) );
  repeat;
	id	NO(1,n2?pos_,n3?pos_,n4?{>1},n5?pos_,1,n7?pos_,n8?pos_,0) = -1/Q.Q/(-1+n4)*(
      +NO(0,n2,n3,-1+n4,n5,1,1+n7,n8,0)*(n7)
      +NO(1,-1+n2,n3,-1+n4,n5,1,1+n7,n8,0)*(-n7)
      +NO(1,n2,-1+n3,n4,n5,1,n7,n8,0)*(-acc(-1+n4))
      +NO(1,n2,n3,-1+n4,1+n5,0,n7,n8,0)*(n5)
      +NO(1,n2,n3,-1+n4,1+n5,1,n7,-1+n8,0)*(-n5)
      +NO(1,n2,n3,-1+n4,n5,1,n7,n8,0)*num(9-2*n8-n7-n5-n4-2*n3-2*n2-4*ep));
  endrepeat;
  id  acc(x?) = x;
  id  num(x?) = rat(x,1);
endif;
*
.sort:integno-19;
*
if ( count(intno,1) );
  repeat;
	id	NO(1,n2?pos_,n3?{>1},1,n5?pos_,1,n7?pos_,n8?pos_,0) = -1/Q.Q/(-1+n3)*(
      +NO(0,1+n2,-1+n3,1,n5,1,n7,n8,0)*(n2)
      +NO(1,1+n2,-1+n3,1,n5,1,-1+n7,n8,0)*(-n2)
      +NO(1,n2,n3,0,n5,1,n7,n8,0)*(-acc(-1+n3))
      +NO(1,n2,-1+n3,1,-1+n5,1,n7,1+n8,0)*(-n8)
      +NO(1,n2,-1+n3,1,n5,0,n7,1+n8,0)*(n8)
      +NO(1,n2,-1+n3,1,n5,1,n7,n8,0)*num(7-n8-2*n7-2*n5-n3-n2-4*ep));
  endrepeat;
  id  acc(x?) = x;
  id  num(x?) = rat(x,1);
endif;
*
.sort:integno-20;
*
#$icount = 1;
#do isum1 = 1,1
*
#$i2578 = 1;

if ( count(intno,1) );
*  repeat;
#ifndef `OLD'
	id	NO(1,n2?{>1},1,1,n5?pos_,1,n7?pos_,n8?pos_,0) = 1/Q.Q/(-1+n2)*den(-1+n2+ep)/2*(
      +NO(0,1+n2,1,1,n5,1,n7,-1+n8,0)*acc(+1-n2)*n2
      +NO(0,n2,1,1,n5,1,n7,n8,0)*num((-5+n8+n7+n5+2*n2+4*ep)*(n2-1))
      +NO(1,-1+n2,1,0,n5,1,1+n7,n8,0)*num((-5+n8+n7+n5+2*n2+4*ep)*n7)
      +NO(1,-1+n2,1,1,-1+n5,1,1+n7,n8,0)*num((5-n8-n7-n5-2*n2-4*ep)*n7)
      +NO(1,-1+n2,1,1,-1+n5,1,n7,1+n8,0)*num((5-n8-n7-n5-2*n2-4*ep)*n8)
      +NO(1,-1+n2,1,1,n5,0,n7,1+n8,0)*num((-5+n8+n7+n5+2*n2+4*ep)*n8)
      +NO(1,-1+n2,1,1,n5,1,n7,n8,0)*num(-12+7*n8-n8^2+7*n7-2*n7*n8-n7^2+10*n5-3*n5*n8-3*n5*n7-2*n5^2+14*(-1+n2)-4*(-1+n2)*n8-4*(-1+n2)
         *n7-6*(-1+n2)*n5-2*(-1+n2)^2+22*ep-6*ep*n8-6*ep*n7-10*ep*n5-10*ep*(-1+n2)-8*ep^2)
      +NO(1,-1+n2,2,0,n5,1,n7,n8,0)*acc(1-n2)
      +NO(1,1+n2,0,1,n5,1,-1+n7,n8,0)*acc(1-n2)*n2
      +NO(1,1+n2,1,1,n5,1,-1+n7,-1+n8,0)*acc(-1+n2)*2*n2
      +NO(1,n2,0,1,n5,1,n7,n8,0)*num((-5+n8+n7+n5+2*n2+4*ep)*(n2-1))
      +NO(1,n2,1,0,n5,1,n7,n8,0)*acc(-1+n2)*acc(1-n7)
      +NO(1,n2,1,1,-1+n5,1,n7,n8,0)*acc(-1+n2)*acc(-2+n8+n7)
      +NO(1,n2,1,1,n5,0,n7,n8,0)*acc(-1+n2)*acc(1-n8)
      +NO(1,n2,1,1,n5,1,-1+n7,n8,0)*acc(-1+n2)*acc(-1+n8+n5-n2)
      +NO(1,n2,1,1,n5,1,n7,-1+n8,0)*acc(-1+n2)*acc(-1+n7+n5-n2)
      +NO(1,n2,2,0,n5,1,n7,-1+n8,0)*acc(-1+n2)
      +NO(2,-1+n2,1,1,n5,0,n7,n8,0)*acc(1-n2)
      +NO(2,n2,1,1,n5,0,-1+n7,n8,0)*acc(-1+n2)
			);
#else
	id	NO(1,n2?{>1},1,1,n5?pos_,1,n7?pos_,n8?pos_,0) = 1/Q.Q/(-1+n2)*den(-1+n2+ep)/2*(
         +NO(0,1+n2,1,1,n5,1,n7,-1+n8,0)*acc(n2-n2^2)
         +NO(0,n2,1,1,n5,1,n7,n8,0)*num(5-4*ep-n8-n7-n5-7*n2+4*n2*ep+n2*n8+n2*n7+n2*n5+2*n2^2)
         +NO(1,-1+n2,1,0,n5,1,1+n7,n8,0)*num(-5*n7+4*n7*ep+n7*n8+n7^2+n5*n7+2*n2*n7)
         +NO(1,-1+n2,1,1,-1+n5,1,1+n7,n8,0)*num(5*n7-4*n7*ep-n7*n8-n7^2-n5*n7-2*n2*n7)
         +NO(1,-1+n2,1,1,-1+n5,1,n7,1+n8,0)*num(5*n8-4*n8*ep-n8^2-n7*n8-n5*n8-2*n2*n8)
         +NO(1,-1+n2,1,1,n5,0,n7,1+n8,0)*num(-5*n8+4*n8*ep+n8^2+n7*n8+n5*n8+2*n2*n8)
         +NO(1,-1+n2,1,1,n5,1,n7,n8,0)*num(-28+32*ep-8*ep^2+11*n8-6*n8*
         	ep-n8^2+11*n7-6*n7*ep-2*n7*n8-n7^2+16*n5-10*n5*ep-3*n5*n8-3*n5
         	*n7-2*n5^2+18*n2-10*n2*ep-4*n2*n8-4*n2*n7-6*n2*n5-2*n2^2)
         +NO(1,-1+n2,2,0,n5,1,n7,n8,0)*acc(1-n2)
         +NO(1,1+n2,0,1,n5,1,-1+n7,n8,0)*acc(n2-n2^2)
         +NO(1,1+n2,1,1,n5,1,-1+n7,-1+n8,0)*acc(-2*n2+2*n2^2)
         +NO(1,n2,0,1,n5,1,n7,n8,0)*num(5-4*ep-n8-n7-n5-7*n2+4*n2*ep+n2*n8+n2*n7+n2*n5+2*n2^2)
         +NO(1,n2,1,0,n5,1,n7,n8,0)*acc(-1+n7+n2-n2*n7)
         +NO(1,n2,1,1,-1+n5,1,n7,n8,0)*acc(2-n8-n7-2*n2+n2*n8+n2*n7)
         +NO(1,n2,1,1,n5,0,n7,n8,0)*acc(-1+n8+n2-n2*n8)
         +NO(1,n2,1,1,n5,1,-1+n7,n8,0)*acc(1-n8-n5+n2*n8+n2*n5-n2^2)
         +NO(1,n2,1,1,n5,1,n7,-1+n8,0)*acc(1-n7-n5+n2*n7+n2*n5-n2^2)
         +NO(1,n2,2,0,n5,1,n7,-1+n8,0)*acc(-1+n2)
         +NO(2,-1+n2,1,1,n5,0,n7,n8,0)*acc(1-n2)
         +NO(2,n2,1,1,n5,0,-1+n7,n8,0)*acc(-1+n2)
         );
#endif
	id	acc(x?) = x;
	id  den(x?) = rat(1,x);
	id  num(x?) = rat(x,1);
*  endrepeat;
  if ( match(NO(1,n2?{>1},1,1,n5?pos_,1,n7?pos_,n8?pos_,0)) );
	$i2578 = 0;
  elseif ( match(NO(1,n2?pos_,1,1,n5?{>1},1,n7?pos_,n8?pos_,0)) );
	Multiply replace_(p1,-p6,p6,-p1,p3,-p4,p4,-p3,p2,-p5,p5,-p2,p7,p8,p8,p7);
	id	NO(1,n2?,1,1,n5?,1,n7?,n8?,0) = NO(1,n5,1,1,n2,1,n8,n7,0);
	$i2578 = 0;
  elseif ( match(NO(1,n2?pos_,1,1,n5?pos_,1,n7?{>1},n8?pos_,0)) );
	Multiply replace_(p3,-p4,p4,-p3,p5,p8,p8,p5,p2,-p7,p7,-p2);
	id	NO(1,n2?,1,1,n5?,1,n7?,n8?,0) = NO(1,n7,1,1,n8,1,n2,n5,0);
	$i2578 = 0;
  elseif ( match(NO(1,n2?pos_,1,1,n5?pos_,1,n7?pos_,n8?{>1},0)) );
	Multiply replace_(p1,-p6,p6,-p1,p5,p7,p7,p5,p2,-p8,p8,-p2);
	id	NO(1,n2?,1,1,n5?,1,n7?,n8?,0) = NO(1,n8,1,1,n7,1,n5,n2,0);
	$i2578 = 0;
  endif;
endif;
*
Moduleoption minimum,$i2578;
.sort:integno-21-`$icount++';
#redefine isum1 "`$i2578'"
#enddo
*
if ( count(intno,1) );
	id	NO(1,1,1,1,1,1,1,1,0)*intno = BasicNOIntegral*int0*epQ^3/Q.Q^2;
	id	NO(n1?,...,n8?,k9?) = (2*Q.p2)^k9/<p1.p1^n1>/.../<p8.p8^n8>;
	#call rewireno
endif;
*
.sort:integno-22;
*
#endprocedure
*
*--#] integno : 
*		#[ integral :
*
#procedure integral(TOP,par)
*
#switch `TOP'
* 	#[ no :
#case no
	Multiply intno;
	#call integno
	#call integfa
	#call integbu
	#call intego4
	#call intego1
	#call intego2
	#call integy4
	#call integy3
	#call integy2
	#call integy1
	#call integt1
	#call integt2
	#call integt3
	#call integl1
	Multiply 1/epQ^3/int0;
#break
* 	#] no : 
* 	#[ be :
#case be
	Multiply intbe;
	#call integbe
	#call integfa
	#call integbu
	#call intego4
	#call intego1
	#call intego2
	#call intego3
	#call integy4
	#call integy3
	#call integy2
	#call integy1
	#call integt1
	#call integt2
	#call integt3
	#call integl1
	Multiply 1/epQ^3/int0;
#break
* 	#] be : 
* 	#[ la :
#case la
	Multiply intla;
	#call integla
	#call integfa
	#call intego1
	#call intego2
	#call intego3
	#call integy4
	#call integy3
	#call integt1
	#call integt2
	#call integt3
	#call integl1
	Multiply 1/epQ^3/int0;
#break
* 	#] la : 
* 	#[ fa :
#case fa
	Multiply intfa;
	#call integfa
	#call intego1
	#call intego2
	#call integy4
	#call integt1
	#call integt2
	#call integt3
	#call integl1
	Multiply 1/epQ^3/int0;
#break
* 	#] fa : 
* 	#[ bu :
#case bu
	Multiply intbu;
	#call integbu
	#call intego4
	#call intego2
	#call integy3
	#call integy2
	#call integy1
	#call integt1
	#call integt2
	#call integt3
	#call integl1
	Multiply 1/epQ^3/int0;
#break
* 	#] bu : 
* 	#[ o1 :
#case o1
	Multiply into1;
	#call intego1
	#call integt1
	#call integt2
	#call integl1
	Multiply 1/epQ^3/int0;
#break
* 	#] o1 : 
* 	#[ o2 :
#case o2
	Multiply into2;
	#call intego2
	#call integt1
	#call integt2
	#call integt3
	#call integl1
	Multiply 1/epQ^3/int0;
#break
* 	#] o2 : 
* 	#[ o3 :
#case o3
	Multiply into3;
	#call intego3
	#call integt1
	#call integt2
	#call integt3
	#call integl1
	Multiply 1/epQ^3/int0;
#break
* 	#] o3 : 
* 	#[ o4 :
#case o4
	Multiply into4;
	#call intego4
	#call integy2
	#call integy3
	#call integt1
	#call integt2
	#call integt3
	#call integl1
	Multiply 1/epQ^3/int0;
#break
* 	#] o4 : 
* 	#[ y1 :
#case y1
	Multiply inty1;
	#call integy1
	#call integt2
	#call integl1
	Multiply 1/epQ^3/int0;
#break
* 	#] y1 : 
* 	#[ y2 :
#case y2
	Multiply inty2;
	#call integy2
	#call integt2
	#call integl1
	Multiply 1/epQ^3/int0;
#break
* 	#] y2 : 
* 	#[ y3 :
#case y3
	Multiply inty3;
	#call integy3
	#call integt2
	#call integl1
	Multiply 1/epQ^3/int0;
#break
* 	#] y3 : 
* 	#[ y4 :
#case y4
	Multiply inty4;
	#call integy4
	#call integt2
	#call integl1
	Multiply 1/epQ^3/int0;
#break
* 	#] y4 : 
* 	#[ y5 :
#case y5
	Multiply inty5;
	#call integy5
	#call integt3
	#call integl1
	Multiply 1/epQ^3/int0;
#break
* 	#] y5 : 
* 	#[ t1 :
#case t1
	Multiply intt1;
	#call integt1
	#call integt2
	#call integt3
	#call integl1
	Multiply 1/epQ^2/int0;
#break
* 	#] t1 : 
* 	#[ t2 :
#case t2
	Multiply intt2;
	#call integt2
	#call integl1
	Multiply 1/epQ^2/int0;
#break
* 	#] t2 : 
* 	#[ t3 :
#case t3
	Multiply intt3;
	#call integt3
	#call integl1
	Multiply 1/epQ^2/int0;
#break
* 	#] t3 : 
* 	#[ l1 :
#case l1
	Multiply intl1;
	#call integl1
	Multiply 1/epQ/int0;
#break
* 	#] l1 : 
* 	#[ tr :
#case tr
#break
* 	#] tr : 
#endswitch
*
#if ( `par' == 1 )
id	GschemeConstants(0,0) = GC0;
id	GschemeConstants(1,0) = GC1;
id	GschemeConstants(2,0) = GC2;
id	BasicNOIntegral = BNO;
id	BasicT1Integral = BT1;
#endif
*
#endprocedure
*
*		#] integral : 
*--#] Integrations : 
*--#[ Extra routines :
*--#[ intpow :
#procedure intpow(TOPO)
#switch `TOPO'
#case la
#case be
#case no
#case fa
#case bu
#case o1
#case o2
#case o3
#case o4
#case o5
#case o6
#case y1
#case y2
#case y3
#case y4
#case y5
#case y6
Multiply,i_^3;
#break
#case t1
#case t2
#case t3
Multiply,i_^2;
#break
#case l1
#case l2
#case l3
Multiply,i_;
#break
#endswitch
#endprocedure

*--#] intpow : 
*--#[ vertsubm :
#procedure vertsubm
*
*Multiply replace_(Dg,mncDg,v2gp,mncv2gp,v2gi,mncv2gi,v2gc,mncv2gc,
*		v3g,mncv3g,v3gp,mncv3gp,Ds,mncDs,DL,mncDL,v4g,mncv4g,V4G,mncV4G
*		v3gc,mncv3gc,v3gi,mncv3gi,v4gc,mncv4gc,v4gp,mncv4gp);
*
multiply,replace_(v4gi,v4g);
id	v4gp(?a) = v4g(?a);
#ifdef `GAUGE'
#if ( `GAUGE' == 0 )
    id  Dg(i1?,i2?,p?) = -i_*d_(i1,i2)*Ds(p);
#else
    repeat;
        id  Dg(i1?,i2?,p1?)*v2gi(i1?,p1?,?a) = -i_*v2gi(i2,p1,?a)/p1.p1;
        id  Dg(i2?,i1?,p1?)*v2gi(i1?,p1?,?a) = -i_*v2gi(i2,p1,?a)/p1.p1;
        id  Dg(i1?,i2?,p1?)*v2gi(?a,i1?,p1?) = -i_*v2gi(?a,i2,p1)/p1.p1;
        id  Dg(i2?,i1?,p1?)*v2gi(?a,i1?,p1?) = -i_*v2gi(?a,i2,p1)/p1.p1;
        id  Dg(i1?,i2?,-p1?)*v2gi(i1?,p1?,?a) = -i_*v2gi(i2,p1,?a)/p1.p1;
        id  Dg(i2?,i1?,-p1?)*v2gi(i1?,p1?,?a) = -i_*v2gi(i2,p1,?a)/p1.p1;
        id  Dg(i1?,i2?,-p1?)*v2gi(?a,i1?,p1?) = -i_*v2gi(?a,i2,p1)/p1.p1;
        id  Dg(i2?,i1?,-p1?)*v2gi(?a,i1?,p1?) = -i_*v2gi(?a,i2,p1)/p1.p1;
	endrepeat;
    repeat;
        id,once,Dg(i1?,i2?,p?)*v3g(?a,i1?,p?,?b) =
            -i_*v3g(?a,i2,p,?b)*Ds(p)
            +i_*xi*p(i2)*v3g(?a,p,p,?b)*Ds(p)*Ds(p);

        id,once,Dg(i1?,i2?,p?)*v3g(?a,i1?,-p?,?b) =
            -i_*v3g(?a,i2,-p,?b)*Ds(p)
            -i_*xi*p(i2)*v3g(?a,-p,-p,?b)*Ds(p)*Ds(p);

        id,once,Dg(i2?,i1?,p?)*v3g(?a,i1?,p?,?b) =
            -i_*v3g(?a,i2,p,?b)*Ds(p)
            +i_*xi*p(i2)*v3g(?a,p,p,?b)*Ds(p)*Ds(p);

        id,once,Dg(i2?,i1?,p?)*v3g(?a,i1?,-p?,?b) =
            -i_*v3g(?a,i2,-p,?b)*Ds(p)
            -i_*xi*p(i2)*v3g(?a,-p,-p,?b)*Ds(p)*Ds(p);

        id,once,Dg(i1?,i2?,p?)*v3gp(?a,i1?,p?,?b) =
            -i_*v3gp(?a,i2,p,?b)*Ds(p)
            +i_*xi*p(i2)*v3gp(?a,p,p,?b)*Ds(p)*Ds(p);

        id,once,Dg(i1?,i2?,p?)*v3gp(?a,i1?,-p?,?b) =
            -i_*v3gp(?a,i2,-p,?b)*Ds(p)
            -i_*xi*p(i2)*v3gp(?a,-p,-p,?b)*Ds(p)*Ds(p);

        id,once,Dg(i2?,i1?,p?)*v3gp(?a,i1?,p?,?b) =
            -i_*v3gp(?a,i2,p,?b)*Ds(p)
            +i_*xi*p(i2)*v3gp(?a,p,p,?b)*Ds(p)*Ds(p);

        id,once,Dg(i2?,i1?,p?)*v3gp(?a,i1?,-p?,?b) =
            -i_*v3gp(?a,i2,-p,?b)*Ds(p)
            -i_*xi*p(i2)*v3gp(?a,-p,-p,?b)*Ds(p)*Ds(p);
    endrepeat;
#endif
#if ( `GAUGE' >= 0 )
    if ( count(xi,1) > `GAUGE' ) discard;
#endif
#else
    id  Dg(i1?,i2?,p?) = -i_*d_(i1,i2)*Ds(p);
#endif
id  Ds(p1?) = 1/p1.p1;
id  DL(i1?,i2?,p1?) = -i_*d_(i1,i2)/p1.p1+i_*p1(i1)*p1(i2)/p1.p1^2;
id  v3g(?a,p3?,-p3?) = -v3g(?a,-p3,-p3);
id  v3g(i1?index_,p1?,p2?,-p2?,?a) = -v3g(i1,p1,-p2,-p2,?a);
id  v3g(p3?,p1?,p2?,-p2?,?a) = -v3g(p3,p1,-p2,-p2,?a);
id  v3g(p1?,-p1?,?a) = -v3g(-p1,-p1,?a);

.sort:Gluon Propagators;

repeat;
  repeat;
    repeat;
      repeat;
        repeat;
          repeat;
            repeat;
              id,v3g(p1?,p1?,p2?,p2?,p3?,p3?) = 0;
              id,v2gi(p1?,p1?,?a) = 0;
              id,v2gi(p1?,-p1?,?a) = 0;
              id,v2gi(?a,p1?,p1?) = 0;
              id,v2gi(?a,p1?,-p1?) = 0;
              id,once,v3g(p1?,p1?,p2?,p2?,i3?,p3?) =
                    -i_*p3.p3*p2(i3)+i_*p2.p3*p3(i3);
              id    v3g(?a,p3?,-p3?) = -v3g(?a,-p3,-p3);
              id    v3g(i1?index_,p1?,p2?,-p2?,?a) = -v3g(i1,p1,-p2,-p2,?a);
              id    v3g(p3?,p1?,p2?,-p2?,?a) = -v3g(p3,p1,-p2,-p2,?a);
              id    v3g(p1?,-p1?,?a) = -v3g(-p1,-p1,?a);
            endrepeat;
            id,once,v3g(i3?,p3?,p1?,p1?,p2?,p2?) =
                -i_*p3.p3*p2(i3)+i_*p2.p3*p3(i3);
            id  v3g(?a,p3?,-p3?) = -v3g(?a,-p3,-p3);
            id  v3g(i1?index_,p1?,p2?,-p2?,?a) = -v3g(i1,p1,-p2,-p2,?a);
            id  v3g(p3?,p1?,p2?,-p2?,?a) = -v3g(p3,p1,-p2,-p2,?a);
            id  v3g(p1?,-p1?,?a) = -v3g(-p1,-p1,?a);
          endrepeat;
          id,once,v3g(p2?,p2?,i3?,p3?,p1?,p1?) =
                -i_*p3.p3*p2(i3)+i_*p2.p3*p3(i3);
          id    v3g(?a,p3?,-p3?) = -v3g(?a,-p3,-p3);
          id    v3g(i1?index_,p1?,p2?,-p2?,?a) = -v3g(i1,p1,-p2,-p2,?a);
          id    v3g(p3?,p1?,p2?,-p2?,?a) = -v3g(p3,p1,-p2,-p2,?a);
          id    v3g(p1?,-p1?,?a) = -v3g(-p1,-p1,?a);
        endrepeat;
        id,once,v3g(p1?,p1?,i2?,p2?,i3?,p3?) =
            -i_*p2(i2)*p2(i3)+i_*p3(i2)*p3(i3)-i_*p3.p3*d_(i2,i3)+i_*p2.p2*d_(i2,i3);
        id  v3g(?a,p3?,-p3?) = -v3g(?a,-p3,-p3);
        id  v3g(i1?index_,p1?,p2?,-p2?,?a) = -v3g(i1,p1,-p2,-p2,?a);
        id  v3g(p3?,p1?,p2?,-p2?,?a) = -v3g(p3,p1,-p2,-p2,?a);
        id  v3g(p1?,-p1?,?a) = -v3g(-p1,-p1,?a);
      endrepeat;
      id,once,v3g(i3?,p3?,p1?,p1?,i2?,p2?) =
        -i_*p2(i2)*p2(i3)+i_*p3(i2)*p3(i3)-i_*p3.p3*d_(i2,i3)+i_*p2.p2*d_(i2,i3);
      id    v3g(?a,p3?,-p3?) = -v3g(?a,-p3,-p3);
      id    v3g(i1?index_,p1?,p2?,-p2?,?a) = -v3g(i1,p1,-p2,-p2,?a);
      id    v3g(p3?,p1?,p2?,-p2?,?a) = -v3g(p3,p1,-p2,-p2,?a);
      id    v3g(p1?,-p1?,?a) = -v3g(-p1,-p1,?a);
    endrepeat;
    id,once,v3g(i2?,p2?,i3?,p3?,p1?,p1?) =
        -i_*p2(i2)*p2(i3)+i_*p3(i2)*p3(i3)-i_*p3.p3*d_(i2,i3)+i_*p2.p2*d_(i2,i3);
    id  v3g(?a,p3?,-p3?) = -v3g(?a,-p3,-p3);
    id  v3g(i1?index_,p1?,p2?,-p2?,?a) = -v3g(i1,p1,-p2,-p2,?a);
    id  v3g(p3?,p1?,p2?,-p2?,?a) = -v3g(p3,p1,-p2,-p2,?a);
    id  v3g(p1?,-p1?,?a) = -v3g(-p1,-p1,?a);
  endrepeat;
  id,once,v3g(i1?,p1?,i2?,p2?,i3?,p3?) =
             -2*i_*p1(i3)*d_(i1,i2)-i_*p3(i3)*d_(i1,i2)
             -2*i_*p2(i1)*d_(i2,i3)-i_*p1(i1)*d_(i2,i3)
             -2*i_*p3(i2)*d_(i3,i1)-i_*p2(i2)*d_(i3,i1);
  id    v3g(?a,p3?,-p3?) = -v3g(?a,-p3,-p3);
  id    v3g(i1?index_,p1?,p2?,-p2?,?a) = -v3g(i1,p1,-p2,-p2,?a);
  id    v3g(p3?,p1?,p2?,-p2?,?a) = -v3g(p3,p1,-p2,-p2,?a);
  id    v3g(p1?,-p1?,?a) = -v3g(-p1,-p1,?a);
endrepeat;
id  v4g(i1?,i2?,i3?,i4?) = -i_*(d_(i1,i3)*d_(i2,i4)-d_(i1,i4)*d_(i2,i3));

id  V4G(i1?,i2?,i3?,i4?,x1?,x2?,x3?) =
    -i_*x1*(d_(i1,i3)*d_(i2,i4)-d_(i1,i4)*d_(i2,i3))
    -i_*x2*(d_(i1,i2)*d_(i3,i4)-d_(i1,i4)*d_(i2,i3))
    -i_*x3*(d_(i1,i3)*d_(i2,i4)-d_(i1,i2)*d_(i3,i4));

#ifdef `GAUGE'
#if ( `GAUGE' != 0 )
    id  Dg(i1?,i2?,p?) = -i_*(d_(i1,i2)-xi*p(i1)*p(i2)/p.p)/p.p;
#endif
#endif

id	P.P = 0;

id  v2gi(i1?,p1?,i2?,p2?) = -i_*(d_(i1,i2)*p1.p2-p1(i2)*p2(i1));
id  v3gi(i1?,p1?,i2?,p2?,i3?,p3?) = i_*(
        d_(i1,i2)*(p1(i3)-p2(i3))+d_(i2,i3)*(p2(i1)-p3(i1))
        +d_(i3,i1)*(p3(i2)-p1(i2)));


id  v2gp(i1?,p1?,i2?,p2?) = -i_*(d_(i1,i2)*p1.p2-p1(i2)*p2(i1));
id  v3gp(i1?,p1?,i2?,p2?,i3?,p3?) = i_*(
        d_(i1,i2)*(p1(i3)-p2(i3))+d_(i2,i3)*(p2(i1)-p3(i1))
        +d_(i3,i1)*(p3(i2)-p1(i2)));

id	P.P = 0;

id	v2gc(i1?,p1?,i2?,p2?) = -i_*e_(i1,p1,i2,p2);
id	v3gc(i1?,p1?,i2?,p2?,i3?,p3?) = i_*(
			e_(i1,i2,i3,p1)+e_(i1,i2,i3,p2)+e_(i1,i2,i3,p3));
id	v3gc(p?,i1?,i2?,i3?) = i_*e_(i1,i2,i3,p);
id	v3gc(i1?,i2?,i3?,p?) = -i_*e_(i1,i2,i3,p);
id	v4gc(i1?,i2?,i3?,i4?) = 0;

Contract;
id	P.P = 0;
*Multiply replace_(mncxi,xi);

#endprocedure
*--#] vertsubm : 
*--#[ sym2 :
#procedure sym2(TOPO)
#switch `TOPO'
*--#[ la :
#case la
*
if ( count(p7.p7,1) < count(p8.p8,1) );
	multiply replace_(p1,p3,p3,p1,p4,p6,p6,p4,p7,p8,p8,p7);
elseif ( count(p7.p7,1) == count(p8.p8,1) );
    if ( count(p1.p1,1) < count(p3.p3,1) );
		multiply replace_(p1,p3,p3,p1,p4,p6,p6,p4,p7,p8,p8,p7);
	elseif ( count(p1.p1,1) == count(p3.p3,1) );
	    if ( count(p6.p6,1) < count(p4.p4,1) )
			multiply replace_(p1,p3,p3,p1,p4,p6,p6,p4,p7,p8,p8,p7);
	endif;
endif;
*
#break
*--#] la : 
*--#[ be :
#case be
*
if ( count(p6.p6,1) < count(p7.p7,1) );
	multiply replace_(p1,p3,p3,p1,p4,p5,p5,p4,p6,p7,p7,p6,p8,-p8);
elseif ( count(p6.p6,1) == count(p7.p7,1) );
    if ( count(p1.p1,1) < count(p3.p3,1) );
		multiply replace_(p1,p3,p3,p1,p4,p5,p5,p4,p6,p7,p7,p6,p8,-p8);
	elseif ( count(p1.p1,1) == count(p3.p3,1) );
	    if ( count(p5.p5,1) < count(p4.p4,1) )
			multiply replace_(p1,p3,p3,p1,p4,p5,p5,p4,p6,p7,p7,p6,p8,-p8);
	endif;
endif;
*
#break
*--#] be : 
*--#[ no :
#case no
*
if ( count(p7.p7,1) < count(p8.p8,1) );
	multiply replace_(p1,-p3,p2,-p2,p3,-p1,p4,-p6,p5,-p5,p6,-p4,p7,-p8,p8,-p7,Q,-Q);
elseif ( count(p7.p7,1) == count(p8.p8,1) );
    if ( count(p1.p1,1) < count(p3.p3,1) );
		multiply replace_(p1,-p3,p2,-p2,p3,-p1,p4,-p6,p5,-p5,p6,-p4,p7,-p8,p8,-p7,Q,-Q);
	elseif ( count(p1.p1,1) == count(p3.p3,1) );
	    if ( count(p6.p6,1) < count(p4.p4,1) )
			multiply replace_(p1,-p3,p2,-p2,p3,-p1,p4,-p6,p5,-p5,p6,-p4,p7,-p8,p8,-p7,Q,-Q);
	endif;
endif;
*
#break
*--#] no : 
*--#[ fa :
#case fa
*
*
#break
*--#] fa : 
*--#[ bu :
#case bu
*
*
#break
*--#] bu : 
*--#[ o1 :
#case o1
*
*
#break
*--#] o1 : 
*--#[ o2 :
#case o2
*
*
#break
*--#] o2 : 
*--#[ o3 :
#case o3
*
*
#break
*--#] o3 : 
*--#[ o4 :
#case o4
*
*
#break
*--#] o4 : 
*--#[ o5 :
#case o5
*
*
#break
*--#] o5 : 
*--#[ o6 :
#case o6
*
*
#break
*--#] o6 : 
*--#[ y1 :
#case y1
*
*
#break
*--#] y1 : 
*--#[ y2 :
#case y2
*
*
#break
*--#] y2 : 
*--#[ y3 :
#case y3
*
*
#break
*--#] y3 : 
*--#[ y4 :
#case y4
*
*
#break
*--#] y4 : 
*--#[ y5 :
#case y5
*
*
#break
*--#] y5 : 
*--#[ y6 :
#case y6
*
*
#break
*--#] y6 : 
*--#[ t1 :
#case t1
*
*
#break
*--#] t1 : 
*--#[ t2 :
#case t2
*
*
#break
*--#] t2 : 
*--#[ t3 :
#case t3
*
*
#break
*--#] t3 : 
*--#[ l1 :
#case l1
*
*
#break
*--#] l1 : 
*--#[ l2 :
#case l2
*
*
#break
*--#] l2 : 
*--#[ l3 :
#case l3
*
*
#break
*--#] l3 : 
*--#[ tr :
#case tr
*
*
#break
*--#] tr : 
#endswitch
#endprocedure

*--#] sym2 : 
*--#[ rename :
#procedure rename(TOPO)
#switch `TOPO'
*--#[ la :
*
*
*--#] la : 
*--#[ be :
*
*
*--#] be : 
*--#[ no :
*
*
*--#] no : 
*--#[ fa :
*
*
*--#] fa : 
*--#[ bu :
*
*
*--#] bu : 
*--#[ o1 :
#case o1
*
Multiply replace_(p8,p5,[P+p8],[P+p5],[P-p8],[P-p5]);
*
#break
*--#] o1 : 
*--#[ o2 :
#case o2
*
Multiply replace_(p8,p4,[P+p8],[P+p4],[P-p8],[P-p4]);
*
#break
*--#] o2 : 
*--#[ o3 :
#case o3
*
Multiply replace_(p8,Q,[P+p8],[P+Q],[P-p8],[P-Q]);
*
#break
*--#] o3 : 
*--#[ o4 :
#case o4
*
Multiply replace_(p8,p6,[P+p8],[P+p6],[P-p8],[P-p6]);
*
#break
*--#] o4 : 
*--#[ o5 :
#case o5
*
Multiply replace_(p8,p3,[P+p8],[P+p3],[P-p8],[P-p3]);
*
#break
*--#] o5 : 
*--#[ o6 :
#case o6
*
Multiply replace_(p8,Q,[P+p8],[P+Q],[P-p8],[P-Q]);
*
#break
*--#] o6 : 
*--#[ y1 :
#case y1
*
Multiply replace_(p8,p2,[P+p8],[P+p2],[P-p8],[P-p2]);
Multiply replace_(p7,p1,[P+p7],[P+p1],[P-p7],[P-p1]);
*
#break
*--#] y1 : 
*--#[ y2 :
#case y2
*
Multiply replace_(p8,p1,[P+p8],[P+p1],[P-p8],[P-p1]);
Multiply replace_(p7,p1,[P+p7],[P+p1],[P-p7],[P-p1]);
*
#break
*--#] y2 : 
*--#[ y3 :
#case y3
*
Multiply replace_(p8,p3,[P+p8],[P+p3],[P-p8],[P-p3]);
Multiply replace_(p7,p1,[P+p7],[P+p1],[P-p7],[P-p1]);
*
#break
*--#] y3 : 
*--#[ y4 :
#case y4
*
Multiply replace_(p8,Q,[P+p8],[P+Q],[P-p8],[P-Q]);
Multiply replace_(p7,p1,[P+p7],[P+p1],[P-p7],[P-p1]);
*
#break
*--#] y4 : 
*--#[ y5 :
#case y5
*
Multiply replace_(p8,Q,[P+p8],[P+Q],[P-p8],[P-Q]);
Multiply replace_(p7,Q,[P+p7],[P+Q],[P-p7],[P-Q]);
*
#break
*--#] y5 : 
*--#[ y6 :
#case y6
*
Multiply replace_(p8,Q,[P+p8],[P+Q],[P-p8],[P-Q]);
Multiply replace_(p7,p1,[P+p7],[P+p1],[P-p7],[P-p1]);
*
#break
*--#] y6 : 
*--#[ t1 :
*
*
*--#] t1 : 
*--#[ t2 :
#case t2
*
Multiply replace_(p5,p1,[P+p5],[P+p1],[P-p5],[P-p1]);
*
#break
*--#] t2 : 
*--#[ t3 :
#case t3
*
Multiply replace_(p5,Q,[P+p5],[P+Q],[P-p5],[P-Q]);
*
#break
*--#] t3 : 
*--#[ l1 :
*
*
*--#] l1 : 
*--#[ l2 :
*
*
*--#] l2 : 
*--#[ l3 :
*
*
*--#] l3 : 
*--#[ tr :
*
*
*--#] tr : 
#endswitch
#endprocedure
*--#] rename : 
*--#[ redoTOPO :
*
#procedure redoTOPO
*
#if ( `TOPO' == o5 )
	#redefine TOPO "o2"
	Multiply replace_(Q,-Q,p1,-p2,p2,-p1,p3,-p4,p4,-p3,p6,-p6,p7,-p7,p8,-p4);
#endif
#if ( `TOPO' == o6 )
	#redefine TOPO "o3"
	Multiply replace_(Q,-Q,p1,-p2,p2,-p1,p3,-p4,p4,-p3,p6,-p6,p7,-p7,p8,-Q);
#endif
#if ( `TOPO' == y6 )
	#redefine TOPO "y4"
	Multiply replace_(Q,-Q,p1,-p1,p2,-p2,p3,-p3,p4,-p4,p5,-p5,p6,-p6,p7,-p1,p8,-Q);
#endif
*
#endprocedure
*
*--#] redoTOPO : 
*--#[ special :
#procedure special(TOPO)
#switch `TOPO'
*--#[ la :
#case la
*
id  Dg(?a,p?[pp18][x]) = Dg(?a,p)*[x18][x];
id  Dg(?a,p?[-pp18][x]) = Dg(?a,p)*[x18][x];
id  Dg(?a,-p?[pp18][x]) = Dg(?a,-p)*[x18][x];
id  Dg(?a,-p?[-pp18][x]) = Dg(?a,-p)*[x18][x];
id  Dgh(?a,p?[pp18][x]) = Dgh(?a,p)*[x18][x];
id  Dgh(?a,p?[-pp18][x]) = Dgh(?a,p)*[x18][x];
id  Dgh(?a,-p?[pp18][x]) = Dgh(?a,-p)*[x18][x];
id  Dgh(?a,-p?[-pp18][x]) = Dgh(?a,-p)*[x18][x];
id  fp(?a,p?[pp18][x]) = fp(?a,p)*[x18][x];
id  fp(?a,p?[-pp18][x]) = fp(?a,p)*[x18][x];
id  fp(?a,-p?[pp18][x]) = fp(?a,-p)*[x18][x];
id  fp(?a,-p?[-pp18][x]) = fp(?a,-p)*[x18][x];

if ( ( count(x5,1) > 0 ) && ( count(x2,1) == 0 ) );
	multiply,replace_(
	 [P-p1],[P+p6],[P+p1],[P-p6],[P+p6],[P-p1],[P-p6],[P+p1]
	,[P-p2],[P+p5],[P+p2],[P-p5],[P+p5],[P-p2],[P-p5],[P+p2]
	,[P-p3],[P+p4],[P+p3],[P-p4],[P+p4],[P-p3],[P-p4],[P+p3]
	,p1,-p6,p6,-p1,p2,-p5,p5,-p2,p3,-p4,p4,-p3,p7,-p7,p8,-p8,
	[P+p7],[P-p7],[P-p7],[P+p7],[P+p8],[P-p8],[P-p8],[P+p8]);
	multiply,replace_(x1,x6,x6,x1,x2,x5,x5,x2,x3,x4,x4,x3);
endif;
if ( ( count(x2,1) > 0 ) && ( count(x6,1) > 0 ) );
	multiply,replace_(
	 [P-p1],[P+p3],[P+p1],[P-p3],[P-p4],[P+p6],[P+p4],[P-p6]
	,[P-p3],[P+p1],[P+p3],[P-p1],[P-p6],[P+p4],[P+p6],[P-p4]
	,[P-p2],[P+p2],[P+p2],[P-p2],[P-p5],[P+p5],[P+p5],[P-p5]
	,[P-p7],[P+p8],[P+p7],[P-p8],[P-p8],[P+p7],[P+p8],[P-p7]
	,p1,-p3,p3,-p1,p4,-p6,p6,-p4,p2,-p2,p5,-p5,p7,-p8,p8,-p7,Q,-Q
	,[P+Q],[P-Q],[P-Q],[P+Q]); *sgn3;
	multiply,replace_(x1,x3,x3,x1,x4,x6,x6,x4,x7,x8,x8,x7);
endif;
if ( match(x2*x8*x4) );
	if ( match(Dg(?a,[P-p2])) || match(Dg(?a,-[P-p2]))
	|| match(fp(?a,[P-p2])) || match(fp(?a,-[P-p2]))
	|| match(Dgh(?a,[P-p2])) || match(Dgh(?a,-[P-p2])) );
		multiply,replace_([P+p8],p8,[P+p4],p4,p4,-[P-p4],p3,-[P-p3],x8,x3,x3,x8);
	else;
		multiply,replace_([P-p8],-p8,[P-p4],-p4,p4,[P+p4],p3,[P+p3],x8,x3,x3,x8);
	endif;
endif;
if ( count(x7,1,x8,1) > 0 );
  if ( match(x7*x8) > 0 );
*    redefine LATRANS "3";
	if ( count(x5,1) > 0 )
		multiply,replace_(
		 [P-p1],[P+p6],[P+p1],[P-p6],[P+p6],[P-p1],[P-p6],[P+p1]
		,[P-p2],[P+p5],[P+p2],[P-p5],[P+p5],[P-p2],[P-p5],[P+p2]
		,[P-p3],[P+p4],[P+p3],[P-p4],[P+p4],[P-p3],[P-p4],[P+p3]
		,p1,-p6,p6,-p1,p2,-p5,p5,-p2,p3,-p4,p4,-p3,p7,-p7,p8,-p8,
		[P+p7],[P-p7],[P-p7],[P+p7],[P+p8],[P-p8],[P-p8],[P+p8]);
  elseif ( (match(x7*x1) > 0) || (match(x7*x6) > 0) );
*    redefine LATRANS "2";
	if ( count(x6,1) > 0 )
		multiply,replace_(
		 [P-p1],[P+p6],[P+p1],[P-p6],[P+p6],[P-p1],[P-p6],[P+p1]
		,[P-p2],[P+p5],[P+p2],[P-p5],[P+p5],[P-p2],[P-p5],[P+p2]
		,[P-p3],[P+p4],[P+p3],[P-p4],[P+p4],[P-p3],[P-p4],[P+p3]
		,p1,-p6,p6,-p1,p2,-p5,p5,-p2,p3,-p4,p4,-p3,p7,-p7,p8,-p8,
		[P+p7],[P-p7],[P-p7],[P+p7],[P+p8],[P-p8],[P-p8],[P+p8]);
  elseif ( (match(x8*x3) > 0) || (match(x8*x4) > 0) );
*    redefine LATRANS "2";
	multiply,replace_(
		 [P-p1],[P+p3],[P+p1],[P-p3],[P-p4],[P+p6],[P+p4],[P-p6]
		,[P-p3],[P+p1],[P+p3],[P-p1],[P-p6],[P+p4],[P+p6],[P-p4]
		,[P-p2],[P+p2],[P+p2],[P-p2],[P-p5],[P+p5],[P+p5],[P-p5]
		,[P-p7],[P+p8],[P+p7],[P-p8],[P-p8],[P+p7],[P+p8],[P-p7]
		,p1,-p3,p3,-p1,p4,-p6,p6,-p4,p2,-p2,p5,-p5,p7,-p8,p8,-p7,Q,-Q
		,[P+Q],[P-Q],[P-Q],[P+Q]); *sgn3;
	if ( count(x6,1) > 0 )
		multiply,replace_(
		 [P-p1],[P+p6],[P+p1],[P-p6],[P+p6],[P-p1],[P-p6],[P+p1]
		,[P-p2],[P+p5],[P+p2],[P-p5],[P+p5],[P-p2],[P-p5],[P+p2]
		,[P-p3],[P+p4],[P+p3],[P-p4],[P+p4],[P-p3],[P-p4],[P+p3]
		,p1,-p6,p6,-p1,p2,-p5,p5,-p2,p3,-p4,p4,-p3,p7,-p7,p8,-p8,
		[P+p7],[P-p7],[P-p7],[P+p7],[P+p8],[P-p8],[P-p8],[P+p8]);
  else;
*    redefine LATRANS "1";
	if ( count(x8,1) > 0 )
		multiply,replace_(
		 [P-p1],[P+p3],[P+p1],[P-p3],[P-p4],[P+p6],[P+p4],[P-p6]
		,[P-p3],[P+p1],[P+p3],[P-p1],[P-p6],[P+p4],[P+p6],[P-p4]
		,[P-p2],[P+p2],[P+p2],[P-p2],[P-p5],[P+p5],[P+p5],[P-p5]
		,[P-p7],[P+p8],[P+p7],[P-p8],[P-p8],[P+p7],[P+p8],[P-p7]
		,p1,-p3,p3,-p1,p4,-p6,p6,-p4,p2,-p2,p5,-p5,p7,-p8,p8,-p7,Q,-Q
		,[P+Q],[P-Q],[P-Q],[P+Q]); *sgn3;
	if ( count(x5,1) > 0 )
		multiply,replace_(
		 [P-p1],[P+p6],[P+p1],[P-p6],[P+p6],[P-p1],[P-p6],[P+p1]
		,[P-p2],[P+p5],[P+p2],[P-p5],[P+p5],[P-p2],[P-p5],[P+p2]
		,[P-p3],[P+p4],[P+p3],[P-p4],[P+p4],[P-p3],[P-p4],[P+p3]
		,p1,-p6,p6,-p1,p2,-p5,p5,-p2,p3,-p4,p4,-p3,p7,-p7,p8,-p8,
		[P+p7],[P-p7],[P-p7],[P+p7],[P+p8],[P-p8],[P-p8],[P+p8]);
  endif;
elseif ( count(x4,1,x5,1,x6,1) > count(x1,1,x2,1,x3,1) );
		multiply,replace_(
		 [P-p1],[P+p6],[P+p1],[P-p6],[P+p6],[P-p1],[P-p6],[P+p1]
		,[P-p2],[P+p5],[P+p2],[P-p5],[P+p5],[P-p2],[P-p5],[P+p2]
		,[P-p3],[P+p4],[P+p3],[P-p4],[P+p4],[P-p3],[P-p4],[P+p3]
		,p1,-p6,p6,-p1,p2,-p5,p5,-p2,p3,-p4,p4,-p3,p7,-p7,p8,-p8,
		[P+p7],[P-p7],[P-p7],[P+p7],[P+p8],[P-p8],[P-p8],[P+p8]);
endif;
repeat,id  x?[x18] = 1;
*
#break
*--#] la : 
*--#[ be :
#case be
*
id  Dg(?a,p?[pp18][x]) = Dg(?a,p)*[x18][x];
id  Dg(?a,p?[-pp18][x]) = Dg(?a,p)*[x18][x];
id  Dg(?a,-p?[pp18][x]) = Dg(?a,-p)*[x18][x];
id  Dg(?a,-p?[-pp18][x]) = Dg(?a,-p)*[x18][x];
id  Dgh(?a,p?[pp18][x]) = Dgh(?a,p)*[x18][x];
id  Dgh(?a,p?[-pp18][x]) = Dgh(?a,p)*[x18][x];
id  Dgh(?a,-p?[pp18][x]) = Dgh(?a,-p)*[x18][x];
id  Dgh(?a,-p?[-pp18][x]) = Dgh(?a,-p)*[x18][x];
id  fp(?a,p?[pp18][x]) = fp(?a,p)*[x18][x];
id  fp(?a,p?[-pp18][x]) = fp(?a,p)*[x18][x];
id  fp(?a,-p?[pp18][x]) = fp(?a,-p)*[x18][x];
id  fp(?a,-p?[-pp18][x]) = fp(?a,-p)*[x18][x];
if ( match(x4*x5) );
*	redefine BEPATH "7";*  1,5,4 or 3,4,5 or 4,5
	if ( count(x3,1) > 0 )
		multiply,replace_(p1,-p3,p3,-p1,p2,-p2,p6,-p7,p7,-p6,p4,-p5,p5,-p4,Q,-Q
		,[P+p1],[P-p3],[P+p3],[P-p1],[P-p1],[P+p3],[P-p3],[P+p1]
		,[P+p4],[P-p5],[P+p5],[P-p4],[P-p4],[P+p5],[P-p5],[P+p4]
		,[P+p6],[P-p7],[P+p7],[P-p6],[P-p6],[P+p7],[P-p7],[P+p6]
		,[P+p2],[P-p2],[P-p2],[P+p2],[P+Q],[P-Q],[P-Q],[P+Q]); *sgn3;
elseif ( match(x4*x6*x8) || match(x5*x7*x8) );
*	redefine BEPATH "4";*  4,8,6 or 5,8,7 or 4,8 or 5,8
	if ( count(x5,1) > 0 )
		multiply,replace_(p1,-p3,p3,-p1,p2,-p2,p6,-p7,p7,-p6,p4,-p5,p5,-p4,Q,-Q
		,[P+p1],[P-p3],[P+p3],[P-p1],[P-p1],[P+p3],[P-p3],[P+p1]
		,[P+p4],[P-p5],[P+p5],[P-p4],[P-p4],[P+p5],[P-p5],[P+p4]
		,[P+p6],[P-p7],[P+p7],[P-p6],[P-p6],[P+p7],[P-p7],[P+p6]
		,[P+p2],[P-p2],[P-p2],[P+p2],[P+Q],[P-Q],[P-Q],[P+Q]); *sgn3;
elseif ( ( count(x4,1,x5,1) > 0 ) && ( count(x1,1,x3,1) == 0 ) );
label 6;
*	redefine BEPATH "6";*  4,8,7,or 5,8,6 or 4,8 or 5,8
	if ( count(x4,1) > 0 )
		multiply,replace_(p1,-p3,p3,-p1,p2,-p2,p6,-p7,p7,-p6,p4,-p5,p5,-p4,Q,-Q
		,[P+p1],[P-p3],[P+p3],[P-p1],[P-p1],[P+p3],[P-p3],[P+p1]
		,[P+p4],[P-p5],[P+p5],[P-p4],[P-p4],[P+p5],[P-p5],[P+p4]
		,[P+p6],[P-p7],[P+p7],[P-p6],[P-p6],[P+p7],[P-p7],[P+p6]
		,[P+p2],[P-p2],[P-p2],[P+p2],[P+Q],[P-Q],[P-Q],[P+Q]); *sgn3;
elseif ( match(x1*x6*x7) || match(x3*x6*x7) );
*	redefine BEPATH "5";*  1,6,7 or 3,7,6
	if ( count(x3,1) > 0 )
		multiply,replace_(p1,-p3,p3,-p1,p2,-p2,p6,-p7,p7,-p6,p4,-p5,p5,-p4,Q,-Q
		,[P+p1],[P-p3],[P+p3],[P-p1],[P-p1],[P+p3],[P-p3],[P+p1]
		,[P+p4],[P-p5],[P+p5],[P-p4],[P-p4],[P+p5],[P-p5],[P+p4]
		,[P+p6],[P-p7],[P+p7],[P-p6],[P-p6],[P+p7],[P-p7],[P+p6]
		,[P+p2],[P-p2],[P-p2],[P+p2],[P+Q],[P-Q],[P-Q],[P+Q]); *sgn3;
elseif ( match(x6*x7) );
*	redefine BEPATH "8";*  6,7
elseif ( match(x2*x8) );
*	redefine BEPATH "3";*  2,6,8 or 2,7,8
	if ( count(x7,1) > 0 )
		multiply,replace_(p1,-p3,p3,-p1,p2,-p2,p6,-p7,p7,-p6,p4,-p5,p5,-p4,Q,-Q
		,[P+p1],[P-p3],[P+p3],[P-p1],[P-p1],[P+p3],[P-p3],[P+p1]
		,[P+p4],[P-p5],[P+p5],[P-p4],[P-p4],[P+p5],[P-p5],[P+p4]
		,[P+p6],[P-p7],[P+p7],[P-p6],[P-p6],[P+p7],[P-p7],[P+p6]
		,[P+p2],[P-p2],[P-p2],[P+p2],[P+Q],[P-Q],[P-Q],[P+Q]); *sgn3;
elseif ( match(x2*x7) || match(x2*x6) );
*	redefine BEPATH "2";*  1,2,7 or 3,2,6
	if ( count(x6,1) > 0 )
		multiply,replace_(p1,-p3,p3,-p1,p2,-p2,p6,-p7,p7,-p6,p4,-p5,p5,-p4,Q,-Q
		,[P+p1],[P-p3],[P+p3],[P-p1],[P-p1],[P+p3],[P-p3],[P+p1]
		,[P+p4],[P-p5],[P+p5],[P-p4],[P-p4],[P+p5],[P-p5],[P+p4]
		,[P+p6],[P-p7],[P+p7],[P-p6],[P-p6],[P+p7],[P-p7],[P+p6]
		,[P+p2],[P-p2],[P-p2],[P+p2],[P+Q],[P-Q],[P-Q],[P+Q]); *sgn3;
elseif ( match(x6) || match(x7) || match(x8) );
	if ( match(x1*x5*x6) || match(x3*x4*x7) );
		if ( count(x3,1) )
			multiply,replace_(p1,-p3,p3,-p1,p2,-p2,p6,-p7,p7,-p6,p4,-p5,p5,-p4,Q,-Q
			,[P+p1],[P-p3],[P+p3],[P-p1],[P-p1],[P+p3],[P-p3],[P+p1]
			,[P+p4],[P-p5],[P+p5],[P-p4],[P-p4],[P+p5],[P-p5],[P+p4]
			,[P+p6],[P-p7],[P+p7],[P-p6],[P-p6],[P+p7],[P-p7],[P+p6]
			,[P+p2],[P-p2],[P-p2],[P+p2],[P+Q],[P-Q],[P-Q],[P+Q]
			,x3,x1,x1,x3,x4,x5,x5,x4,x6,x7,x7,x6); *sgn3;
		if ( match(Dg(?a,[P-p6])) || match(Dg(?a,-[P-p6]))
		|| match(fp(?a,[P-p6])) || match(fp(?a,-[P-p6]))
		|| match(Dgh(?a,[P-p6])) || match(Dgh(?a,-[P-p6])) );
			multiply,replace_([P+p5],p5,[P+p1],p1,[P-p6],-p6,
			p6,[P+p6],p8,[P+p8],p5,-[P-p5],[P-p5],-p5,[P-p1],-p1,[P+p6],p6,
			x1,x8,x8,x1);
		else;
*
*			This one still needs correcting in some databases
*
			multiply,replace_([P+p5],p5,[P+p1],p1,[P-p6],-p6,
			p6,-[P-p6],p8,-[P-p8],p5,[P+p5],[P-p5],-p5,[P-p1],-p1,[P+p6],p6,
			x1,x8,x8,x1);
		endif;
		goto 6;
	endif;
	if ( match(x3*x4*x8) || match(x1*x5*x8) );
		if ( count(x3,1) )
			multiply,replace_(p1,-p3,p3,-p1,p2,-p2,p6,-p7,p7,-p6,p4,-p5,p5,-p4,Q,-Q
			,[P+p1],[P-p3],[P+p3],[P-p1],[P-p1],[P+p3],[P-p3],[P+p1]
			,[P+p4],[P-p5],[P+p5],[P-p4],[P-p4],[P+p5],[P-p5],[P+p4]
			,[P+p6],[P-p7],[P+p7],[P-p6],[P-p6],[P+p7],[P-p7],[P+p6]
			,[P+p2],[P-p2],[P-p2],[P+p2],[P+Q],[P-Q],[P-Q],[P+Q]
			,x3,x1,x1,x3,x4,x5,x5,x4,x6,x7,x7,x6); *sgn3;
		if ( match(Dg(?a,[P+p1])) || match(Dg(?a,-[P+p1]))
		|| match(fp(?a,[P+p1])) || match(fp(?a,-[P+p1]))
		|| match(Dgh(?a,[P+p1])) || match(Dgh(?a,-[P+p1])) );
			multiply,replace_(p1,-[P-p1],p6,[P+p6],p8,[P+p8]
			,[P+p1],p1,[P+p5],p5,[P-p8],-p8
			,[P-p1],-p1,[P-p5],-p5,[P+p8],p8
			,x5,x6,x6,x5);
		else;
*
*			This one still needs correcting in some databases
*
			multiply,replace_(p1,[P+p1],p6,-[P-p6],p8,-[P-p8]
			,[P+p1],p1,[P+p5],p5,[P-p8],-p8
			,[P-p1],-p1,[P-p5],-p5,[P+p8],p8
			,x5,x6,x6,x5);
		endif;
	endif;
*	redefine BEPATH "1";*  1,6,8 or 1,6 or 6,8 or 5,1,6 or vv
	if ( count(x7,1) > 0 )
		multiply,replace_(p1,-p3,p3,-p1,p2,-p2,p6,-p7,p7,-p6,p4,-p5,p5,-p4,Q,-Q
		,[P+p1],[P-p3],[P+p3],[P-p1],[P-p1],[P+p3],[P-p3],[P+p1]
		,[P+p4],[P-p5],[P+p5],[P-p4],[P-p4],[P+p5],[P-p5],[P+p4]
		,[P+p6],[P-p7],[P+p7],[P-p6],[P-p6],[P+p7],[P-p7],[P+p6]
		,[P+p2],[P-p2],[P-p2],[P+p2],[P+Q],[P-Q],[P-Q],[P+Q]); *sgn3;
endif;
repeat,id  x?[x18] = 1;
*
#break
*--#] be : 
*--#[ no :
#case no
*
id  Dg(?a,p?[pp18][x]) = Dg(?a,p)*[x18][x];
id  Dg(?a,p?[-pp18][x]) = Dg(?a,p)*[x18][x];
id  Dg(?a,-p?[pp18][x]) = Dg(?a,-p)*[x18][x];
id  Dg(?a,-p?[-pp18][x]) = Dg(?a,-p)*[x18][x];
id  Dgh(?a,p?[pp18][x]) = Dgh(?a,p)*[x18][x];
id  Dgh(?a,p?[-pp18][x]) = Dgh(?a,p)*[x18][x];
id  Dgh(?a,-p?[pp18][x]) = Dgh(?a,-p)*[x18][x];
id  Dgh(?a,-p?[-pp18][x]) = Dgh(?a,-p)*[x18][x];
id  fp(?a,p?[pp18][x]) = fp(?a,p)*[x18][x];
id  fp(?a,p?[-pp18][x]) = fp(?a,p)*[x18][x];
id  fp(?a,-p?[pp18][x]) = fp(?a,-p)*[x18][x];
id  fp(?a,-p?[-pp18][x]) = fp(?a,-p)*[x18][x];

repeat id x?[x18]^2 = x;
if ( match(x2*x7*x8) || match(x5*x7*x8)
		 || match(x2*x5*x7) || match(x2*x5*x8) );
*    redefine NOSPEC "1";
	if ( count(x2,1) == 0 );
		multiply,replace_([P-p1],[P+p6],[P+p1],[P-p6],[P+p6],[P-p1],[P-p6],[P+p1]
		,[P-p2],[P+p5],[P+p2],[P-p5],[P+p5],[P-p2],[P-p5],[P+p2]
		,[P-p3],[P+p4],[P+p3],[P-p4],[P+p4],[P-p3],[P-p4],[P+p3]);
		multiply,replace_(p1,-p6,p6,-p1,p2,-p5,p5,-p2,p3,-p4,p4,-p3,p7,p8,p8,p7
		,[P+p8],[P+p7],[P+p7],[P+p8],[P-p8],[P-p7],[P-p7],[P-p8]);
		multiply,replace_(x1,x6,x6,x1,x2,x5,x5,x2,x3,x4,x4,x3,x7,x8,x8,x7);
	elseif ( count(x7,1) == 0 );
		multiply,replace_(
			p1,-p6,p6,-p1,[P-p1],[P+p6],[P+p1],[P-p6],[P+p6],[P-p1],[P-p6],[P+p1],
			p7,p5,p5,p7,[P+p7],[P+p5],[P+p5],[P+p7],[P-p7],[P-p5],[P-p5],[P-p7],
			p2,-p8,p8,-p2,[P-p2],[P+p8],[P+p2],[P-p8],[P+p8],[P-p2],[P-p8],[P+p2],
			x1,x6,x6,x1,x5,x7,x7,x5,x2,x8,x8,x2);
	elseif ( count(x8,1) == 0 );
		multiply,replace_([P-p3],[P+p4],[P+p3],[P-p4],[P+p4],[P-p3],[P-p4],[P+p3]
		,[P-p2],[P+p7],[P+p2],[P-p7],[P+p7],[P-p2],[P-p7],[P+p2]
		,[P+p5],[P+p8],[P-p5],[P-p8],[P+p8],[P+p5],[P-p8],[P-p5]);
		multiply,replace_(p2,-p7,p7,-p2,p8,p5,p5,p8,p3,-p4,p4,-p3);
		multiply,replace_(x2,x7,x7,x2,x8,x5,x5,x8,x3,x4,x4,x3);
	endif;
*
*	We have now a configuration with 7,2,8
*	Now minimize the number of fermions
*
	id  fp(?a, p?Pcenter,?b) = fp(?a, p,?b)*x;
	id  fp(?a,-p?Pcenter,?b) = fp(?a,-p,?b)*x;
	id	fp(?a, p?pcenter,?b ) = fp(?a, p,?b)/x;
	id	fp(?a,-p?pcenter,?b ) = fp(?a,-p,?b)/x;
	if ( count(x,1) > 0 );
		if ( match(Dg(?a,[P-p7])) || match(Dg(?a,-[P-p7]))
		|| match(fp(?a,[P-p7])) || match(fp(?a,-[P-p7]))
		|| match(Dgh(?a,[P-p7])) || match(Dgh(?a,-[P-p7])) );
			multiply,replace_([P-p7],-p7,[P-p2],-p2,[P-p8],-p8,
			p7,[P+p7],p5,-[P-p5],p8,[P+p8],x2,x5,x5,x2);
		else;
			multiply,replace_([P+p7],p7,[P+p2],p2,[P+p8],p8,
			p7,-[P-p7],p5,[P+p5],p8,-[P-p8],x2,x5,x5,x2);
		endif;
		multiply,replace_([P-p1],[P+p6],[P+p1],[P-p6],[P+p6],[P-p1],[P-p6],[P+p1]
		,[P-p2],[P+p5],[P+p2],[P-p5],[P+p5],[P-p2],[P-p5],[P+p2]
		,[P-p3],[P+p4],[P+p3],[P-p4],[P+p4],[P-p3],[P-p4],[P+p3]);
		multiply,replace_(p1,-p6,p6,-p1,p2,-p5,p5,-p2,p3,-p4,p4,-p3,p7,p8,p8,p7
		,[P+p8],[P+p7],[P+p7],[P+p8],[P-p8],[P-p7],[P-p7],[P-p8]);
		multiply,replace_(x1,x6,x6,x1,x2,x5,x5,x2,x3,x4,x4,x3,x7,x8,x8,x7);
	endif;
	id	x = 1;
	id	1/x = 1;
else;
if ( ( count(x3,1) > 0 ) && ( count(x1,1,x4,1,x6,1) == 0 ) );
	multiply,replace_(
		p1,-p3,p3,-p1,[P+p1],[P-p3],[P+p3],[P-p1],[P-p1],[P+p3],[P-p3],[P+p1],
		p4,-p6,p6,-p4,[P+p4],[P-p6],[P+p6],[P-p4],[P-p4],[P+p6],[P-p6],[P+p4],
		p2,-p2,[P+p2],[P-p2],[P-p2],[P+p2],
		p5,-p5,[P+p5],[P-p5],[P-p5],[P+p5],
		p7,-p8,p8,-p7,[P+p7],[P-p8],[P+p8],[P-p7],[P-p7],[P+p8],[P-p8],[P+p7],
		Q,-Q,[P+Q],[P-Q],[P-Q],[P+Q],
		x1,x3,x3,x1,x4,x6,x6,x4,x7,x8,x8,x7); *sgn3;
endif;
if ( ( count(x4,1) > 0 ) && ( count(x1,1,x3,1,x6,1) == 0 ) );
	multiply,replace_(
		p1,p4,p4,p1,[P+p1],[P+p4],[P+p4],[P+p1],[P-p1],[P-p4],[P-p4],[P-p1],
		p2,p5,p5,p2,[P+p2],[P+p5],[P+p5],[P+p2],[P-p2],[P-p5],[P-p5],[P-p2],
		p3,p6,p6,p3,[P+p3],[P+p6],[P+p6],[P+p3],[P-p3],[P-p6],[P-p6],[P-p3],
		p7,-p7,[P+p7],[P-p7],[P-p7],[P+p7],
		p8,-p8,[P+p8],[P-p8],[P-p8],[P+p8],
		Q,-Q,[P+Q],[P-Q],[P-Q],[P+Q],
		x1,x4,x4,x1,x2,x5,x5,x2,x3,x6,x6,x3); *sgn3;
endif;
if ( ( count(x6,1) > 0 ) && ( count(x1,1) == 0 ) );
	multiply,replace_([P-p1],[P+p6],[P+p1],[P-p6],[P+p6],[P-p1],[P-p6],[P+p1]
		,[P-p2],[P+p5],[P+p2],[P-p5],[P+p5],[P-p2],[P-p5],[P+p2]
		,[P-p3],[P+p4],[P+p3],[P-p4],[P+p4],[P-p3],[P-p4],[P+p3]);
	multiply,replace_(p1,-p6,p6,-p1,p2,-p5,p5,-p2,p3,-p4,p4,-p3,p7,p8,p8,p7
		,[P+p8],[P+p7],[P+p7],[P+p8],[P-p8],[P-p7],[P-p7],[P-p8]);
	multiply,replace_(x1,x6,x6,x1,x2,x5,x5,x2,x3,x4,x4,x3,x7,x8,x8,x7);
endif;
if ( match(x1*x7) > 0 );
	multiply,replace_([P-p3],[P+p4],[P+p3],[P-p4],[P+p4],[P-p3],[P-p4],[P+p3]
		,[P-p2],[P+p7],[P+p2],[P-p7],[P+p7],[P-p2],[P-p7],[P+p2]
		,[P+p5],[P+p8],[P-p5],[P-p8],[P+p8],[P+p5],[P-p8],[P-p5]);
	multiply,replace_(p2,-p7,p7,-p2,p8,p5,p5,p8,p3,-p4,p4,-p3);
	multiply,replace_(x2,x7,x7,x2,x8,x5,x5,x8,x3,x4,x4,x3);
endif;
if ( match(x1*x2*x8) > 0 );
*    redefine NOSPEC "2";
endif;
endif;
repeat,id  x?[x18] = 1;
*
#break
*--#] no : 
*--#[ fa :
#case fa
*
*
#break
*--#] fa : 
*--#[ bu :
#case bu
*
*
#break
*--#] bu : 
*--#[ o1 :
#case o1
*
id  Dg(?a,p?[pp18][x]) = Dg(?a,p)*[x18][x];
id  Dg(?a,p?[-pp18][x]) = Dg(?a,p)*[x18][x];
id  Dg(?a,-p?[pp18][x]) = Dg(?a,-p)*[x18][x];
id  Dg(?a,-p?[-pp18][x]) = Dg(?a,-p)*[x18][x];
id  Dgh(?a,p?[pp18][x]) = Dgh(?a,p)*[x18][x];
id  Dgh(?a,p?[-pp18][x]) = Dgh(?a,p)*[x18][x];
id  Dgh(?a,-p?[pp18][x]) = Dgh(?a,-p)*[x18][x];
id  Dgh(?a,-p?[-pp18][x]) = Dgh(?a,-p)*[x18][x];
id  fp(?a,p?[pp18][x]) = fp(?a,p)*[x18][x];
id  fp(?a,p?[-pp18][x]) = fp(?a,p)*[x18][x];
id  fp(?a,-p?[pp18][x]) = fp(?a,-p)*[x18][x];
id  fp(?a,-p?[-pp18][x]) = fp(?a,-p)*[x18][x];
if ( match(x6*x7) > 0 );
*	redefine O1PATH "1";
elseif ( ( count(x6,1,x7,1) > 0 ) && ( count(x3,1,x4,1) > 0 ) );
	multiply replace_(
		p1,-p4,p4,-p1,[P+p1],[P-p4],[P-p1],[P+p4],[P+p4],[P-p1],[P-p4],[P+p1],
		p2,-p3,p3,-p2,[P+p2],[P-p3],[P-p2],[P+p3],[P+p3],[P-p2],[P-p3],[P+p2],
		p5,-p5,[P-p5],[P+p5],[P+p5],[P-p5],
		p6,-p6,[P-p6],[P+p6],[P+p6],[P-p6],
		p7,-p7,[P-p7],[P+p7],[P+p7],[P-p7],
		x1,x4,x4,x1,x2,x3,x3,x2);
endif;
if ( count(x3,1,x4,1) > count(x1,1,x2,1) );
	multiply replace_(
		p1,-p4,p4,-p1,[P+p1],[P-p4],[P-p1],[P+p4],[P+p4],[P-p1],[P-p4],[P+p1],
		p2,-p3,p3,-p2,[P+p2],[P-p3],[P-p2],[P+p3],[P+p3],[P-p2],[P-p3],[P+p2],
		p5,-p5,[P-p5],[P+p5],[P+p5],[P-p5],
		p6,-p6,[P-p6],[P+p6],[P+p6],[P-p6],
		p7,-p7,[P-p7],[P+p7],[P+p7],[P-p7],
		x1,x4,x4,x1,x2,x3,x3,x2);
endif;
if ( ( count(x7,1) > 0 ) && ( count(x6,1) == 0 ) );
	multiply replace_(p6,p7,p7,p6,[P+p6],[P+p7],[P+p7],[P+p6],
		[P-p6],[P-p7],[P-p7],[P-p6],x6,x7,x7,x6);
endif;
if ( ( count(x2,1) > 0 ) && ( count(x1,1) == 0 ) );
	multiply replace_(
		p1,-p2,p2,-p1,[P+p1],[P-p2],[P-p1],[P+p2],[P+p2],[P-p1],[P-p2],[P+p1],
		p4,-p3,p3,-p4,[P+p4],[P-p3],[P-p4],[P+p3],[P+p3],[P-p4],[P-p3],[P+p4],
		Q,-Q,[P-Q],[P+Q],[P+Q],[P-Q],x1,x2,x2,x1,x4,x3,x3,x4); *sgn3;
endif;
if ( count(x5,1) > 0 );
*	redefine O1PATH "2";
endif;
repeat,id  x?[x18] = 1;
*
#break
*--#] o1 : 
*--#[ o2 :
#case o2
*
id  Dg(?a,p?[pp18][x]) = Dg(?a,p)*[x18][x];
id  Dg(?a,p?[-pp18][x]) = Dg(?a,p)*[x18][x];
id  Dg(?a,-p?[pp18][x]) = Dg(?a,-p)*[x18][x];
id  Dg(?a,-p?[-pp18][x]) = Dg(?a,-p)*[x18][x];
id  Dgh(?a,p?[pp18][x]) = Dgh(?a,p)*[x18][x];
id  Dgh(?a,p?[-pp18][x]) = Dgh(?a,p)*[x18][x];
id  Dgh(?a,-p?[pp18][x]) = Dgh(?a,-p)*[x18][x];
id  Dgh(?a,-p?[-pp18][x]) = Dgh(?a,-p)*[x18][x];
id  fp(?a,p?[pp18][x]) = fp(?a,p)*[x18][x];
id  fp(?a,p?[-pp18][x]) = fp(?a,p)*[x18][x];
id  fp(?a,-p?[pp18][x]) = fp(?a,-p)*[x18][x];
id  fp(?a,-p?[-pp18][x]) = fp(?a,-p)*[x18][x];
if ( ( count(x7,1) > 0 ) && ( count(x6,1) == 0 ) );
	multiply replace_(
		p6,p7,p7,p6,[P+p6],[P+p7],[P+p7],[P+p6],[P-p6],[P-p7],[P-p7],[P-p6]
		x6,x7,x7,x6);
endif;
if ( match(x6*x2*x1) );
	if ( match(Dg(?a,[P-p2])) || match(Dg(?a,-[P-p2]))
	|| match(fp(?a,[P-p2])) || match(fp(?a,-[P-p2]))
	|| match(Dgh(?a,[P-p2])) || match(Dgh(?a,-[P-p2])) );
		Multiply,replace_([P-p2],-p2,p2,[P+p2],[P-p1],-p1,[P-p4],-p4
		,[P-p6],-p6,p6,[P+p6],p4,[P+p4],p3,[P+p3],x1,x3,x3,x1);
	else;
		Multiply,replace_([P+p2],p2,p2,-[P-p2],[P+p4],p4,p4,-[P-p4],[P+p6],p6,
        p6,-[P-p6],p3,-[P-p3],[P+p1],p1,x1,x3,x3,x1);
	endif;	
endif;
repeat,id  x?[x18] = 1;
*
#break
*--#] o2 : 
*--#[ o3 :
#case o3
*
*
#break
*--#] o3 : 
*--#[ o4 :
#case o4
*
*
#break
*--#] o4 : 
*--#[ o5 :
#case o5
*
id  Dg(?a,p?[pp18][x]) = Dg(?a,p)*[x18][x];
id  Dg(?a,p?[-pp18][x]) = Dg(?a,p)*[x18][x];
id  Dg(?a,-p?[pp18][x]) = Dg(?a,-p)*[x18][x];
id  Dg(?a,-p?[-pp18][x]) = Dg(?a,-p)*[x18][x];
id  Dgh(?a,p?[pp18][x]) = Dgh(?a,p)*[x18][x];
id  Dgh(?a,p?[-pp18][x]) = Dgh(?a,p)*[x18][x];
id  Dgh(?a,-p?[pp18][x]) = Dgh(?a,-p)*[x18][x];
id  Dgh(?a,-p?[-pp18][x]) = Dgh(?a,-p)*[x18][x];
id  fp(?a,p?[pp18][x]) = fp(?a,p)*[x18][x];
id  fp(?a,p?[-pp18][x]) = fp(?a,p)*[x18][x];
id  fp(?a,-p?[pp18][x]) = fp(?a,-p)*[x18][x];
id  fp(?a,-p?[-pp18][x]) = fp(?a,-p)*[x18][x];
if ( ( count(x7,1) > 0 ) && ( count(x6,1) == 0 ) );
	multiply replace_(
		p6,p7,p7,p6,[P+p6],[P+p7],[P+p7],[P+p6],[P-p6],[P-p7],[P-p7],[P-p6]
		x6,x7,x7,x6);
endif;
if ( match(x6*x2*x1) );
	if ( match(Dg(?a,[P-p2])) || match(Dg(?a,-[P-p2]))
	|| match(fp(?a,[P-p2])) || match(fp(?a,-[P-p2]))
	|| match(Dgh(?a,[P-p2])) || match(Dgh(?a,-[P-p2])) );
		Multiply,replace_([P-p2],-p2,p2,[P+p2],[P-p1],-p1,p1,[P+p1],[P-p4],-p4,[P-p3],-p3
		,[P-p6],-p6,p6,[P+p6],p4,[P+p4],p3,[P+p3],x2,x4,x4,x2);
	else;
		Multiply,replace_([P+p2],p2,p2,-[P-p2],[P+p4],p4,p4,-[P-p4],[P+p6],p6,
        p6,-[P-p6],[P+p3],p3,p3,-[P-p3],[P+p1],p1,p1,-[P-p1],x2,x4,x4,x2);
	endif;	
endif;
repeat,id  x?[x18] = 1;
*
#break
*--#] o5 : 
*--#[ o6 :
#case o6
*
*
#break
*--#] o6 : 
*--#[ y1 :
#case y1
*
*
#break
*--#] y1 : 
*--#[ y2 :
#case y2
*
*
#break
*--#] y2 : 
*--#[ y3 :
#case y3
*
*
#break
*--#] y3 : 
*--#[ y4 :
#case y4
*
*
#break
*--#] y4 : 
*--#[ y5 :
#case y5
*
*
#break
*--#] y5 : 
*--#[ y6 :
#case y6
*
*
#break
*--#] y6 : 
*--#[ t1 :
#case t1
*
*
#break
*--#] t1 : 
*--#[ t2 :
#case t2
*
*
#break
*--#] t2 : 
*--#[ t3 :
#case t3
*
*
#break
*--#] t3 : 
*--#[ l1 :
#case l1
*
*
#break
*--#] l1 : 
*--#[ l2 :
#case l2
*
*
#break
*--#] l2 : 
*--#[ l3 :
#case l3
*
*
#break
*--#] l3 : 
*--#[ tr :
#case tr
*
*
#break
*--#] tr : 
#endswitch
#endprocedure
*--#] special : 
*--#] Extra routines : 
#endif
